// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package talkservice

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type Method_ int64
const (
  Method__TIMELINE Method_ = 1
  Method__NEARBY Method_ = 2
  Method__SQUARE Method_ = 3
)

func (p Method_) String() string {
  switch p {
  case Method__TIMELINE: return "TIMELINE"
  case Method__NEARBY: return "NEARBY"
  case Method__SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func Method_FromString(s string) (Method_, error) {
  switch s {
  case "TIMELINE": return Method__TIMELINE, nil 
  case "NEARBY": return Method__NEARBY, nil 
  case "SQUARE": return Method__SQUARE, nil 
  }
  return Method_(0), fmt.Errorf("not a valid Method_ string")
}


func Method_Ptr(v Method_) *Method_ { return &v }

func (p Method_) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Method_) UnmarshalText(text []byte) error {
q, err := Method_FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Method_) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Method_(v)
return nil
}

func (p * Method_) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ErrorCode int64
const (
  ErrorCode_ILLEGAL_ARGUMENT ErrorCode = 0
  ErrorCode_AUTHENTICATION_FAILED ErrorCode = 1
  ErrorCode_DB_FAILED ErrorCode = 2
  ErrorCode_INVALID_STATE ErrorCode = 3
  ErrorCode_EXCESSIVE_ACCESS ErrorCode = 4
  ErrorCode_NOT_FOUND ErrorCode = 5
  ErrorCode_INVALID_MID ErrorCode = 9
  ErrorCode_NOT_A_MEMBER ErrorCode = 10
  ErrorCode_INVALID_LENGTH ErrorCode = 6
  ErrorCode_NOT_AVAILABLE_USER ErrorCode = 7
  ErrorCode_NOT_AUTHORIZED_DEVICE ErrorCode = 8
  ErrorCode_NOT_AUTHORIZED_SESSION ErrorCode = 14
  ErrorCode_INCOMPATIBLE_APP_VERSION ErrorCode = 11
  ErrorCode_NOT_READY ErrorCode = 12
  ErrorCode_NOT_AVAILABLE_SESSION ErrorCode = 13
  ErrorCode_SYSTEM_ERROR ErrorCode = 15
  ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD ErrorCode = 16
  ErrorCode_NOT_AUTHENTICATED ErrorCode = 17
  ErrorCode_INVALID_IDENTITY_CREDENTIAL ErrorCode = 18
  ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER ErrorCode = 19
  ErrorCode_INTERNAL_ERROR ErrorCode = 20
  ErrorCode_NO_SUCH_IDENTITY_IDENFIER ErrorCode = 21
  ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY ErrorCode = 22
  ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL ErrorCode = 23
  ErrorCode_UNKNOWN_CHANNEL ErrorCode = 24
  ErrorCode_NO_SUCH_MESSAGE_BOX ErrorCode = 25
  ErrorCode_NOT_AVAILABLE_MESSAGE_BOX ErrorCode = 26
  ErrorCode_CHANNEL_DOES_NOT_MATCH ErrorCode = 27
  ErrorCode_NOT_YOUR_MESSAGE ErrorCode = 28
  ErrorCode_MESSAGE_DEFINED_ERROR ErrorCode = 29
  ErrorCode_USER_CANNOT_ACCEPT_PRESENTS ErrorCode = 30
  ErrorCode_USER_NOT_STICKER_OWNER ErrorCode = 32
  ErrorCode_MAINTENANCE_ERROR ErrorCode = 33
  ErrorCode_ACCOUNT_NOT_MATCHED ErrorCode = 34
  ErrorCode_ABUSE_BLOCK ErrorCode = 35
  ErrorCode_NOT_FRIEND ErrorCode = 36
  ErrorCode_NOT_ALLOWED_CALL ErrorCode = 37
  ErrorCode_BLOCK_FRIEND ErrorCode = 38
  ErrorCode_INCOMPATIBLE_VOIP_VERSION ErrorCode = 39
  ErrorCode_INVALID_SNS_ACCESS_TOKEN ErrorCode = 40
  ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE ErrorCode = 41
  ErrorCode_NOT_ALLOWED_ADD_CONTACT ErrorCode = 42
  ErrorCode_NOT_CERTIFICATED ErrorCode = 43
  ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE ErrorCode = 44
  ErrorCode_INVALID_PIN_CODE ErrorCode = 45
  ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL ErrorCode = 46
  ErrorCode_EXCEED_FILE_MAX_SIZE ErrorCode = 47
  ErrorCode_EXCEED_DAILY_QUOTA ErrorCode = 48
  ErrorCode_NOT_SUPPORT_SEND_FILE ErrorCode = 49
  ErrorCode_MUST_UPGRADE ErrorCode = 50
  ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION ErrorCode = 51
  ErrorCode_EXPIRED_REVISION ErrorCode = 52
  ErrorCode_NOT_YET_PHONE_NUMBER ErrorCode = 54
  ErrorCode_BAD_CALL_NUMBER ErrorCode = 55
  ErrorCode_UNAVAILABLE_CALL_NUMBER ErrorCode = 56
  ErrorCode_NOT_SUPPORT_CALL_SERVICE ErrorCode = 57
  ErrorCode_CONGESTION_CONTROL ErrorCode = 58
  ErrorCode_NO_BALANCE ErrorCode = 59
  ErrorCode_NOT_PERMITTED_CALLER_ID ErrorCode = 60
  ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED ErrorCode = 61
  ErrorCode_CALLER_ID_VERIFICATION_REQUIRED ErrorCode = 62
  ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED ErrorCode = 63
  ErrorCode_MESSAGE_NOT_FOUND ErrorCode = 64
  ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT ErrorCode = 65
  ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED ErrorCode = 66
  ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED ErrorCode = 67
  ErrorCode_INVALID_PASSWORD_FORMAT ErrorCode = 69
  ErrorCode_FEATURE_RESTRICTED ErrorCode = 70
  ErrorCode_MESSAGE_NOT_DESTRUCTIBLE ErrorCode = 71
  ErrorCode_PAID_CALL_REDEEM_FAILED ErrorCode = 72
  ErrorCode_PREVENTED_JOIN_BY_TICKET ErrorCode = 73
  ErrorCode_SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT ErrorCode = 75
  ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY ErrorCode = 76
  ErrorCode_SECURITY_CENTER_NOT_VERIFIED ErrorCode = 77
  ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING ErrorCode = 78
  ErrorCode_SECURITY_CENTER_BLOCKED ErrorCode = 79
  ErrorCode_TALK_PROXY_EXCEPTION ErrorCode = 80
  ErrorCode_E2EE_INVALID_PROTOCOL ErrorCode = 81
  ErrorCode_E2EE_RETRY_ENCRYPT ErrorCode = 82
  ErrorCode_E2EE_UPDATE_SENDER_KEY ErrorCode = 83
  ErrorCode_E2EE_UPDATE_RECEIVER_KEY ErrorCode = 84
  ErrorCode_E2EE_INVALID_ARGUMENT ErrorCode = 85
  ErrorCode_E2EE_INVALID_VERSION ErrorCode = 86
  ErrorCode_E2EE_SENDER_DISABLED ErrorCode = 87
  ErrorCode_E2EE_RECEIVER_DISABLED ErrorCode = 88
  ErrorCode_E2EE_SENDER_NOT_ALLOWED ErrorCode = 89
  ErrorCode_E2EE_RECEIVER_NOT_ALLOWED ErrorCode = 90
  ErrorCode_E2EE_RESEND_FAIL ErrorCode = 91
  ErrorCode_E2EE_RESEND_OK ErrorCode = 92
  ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA ErrorCode = 93
  ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE ErrorCode = 94
  ErrorCode_SUCCESS ErrorCode = 95
  ErrorCode_CANCEL ErrorCode = 96
  ErrorCode_E2EE_PRIMARY_NOT_SUPPORT ErrorCode = 97
  ErrorCode_E2EE_RETRY_PLAIN ErrorCode = 98
  ErrorCode_E2EE_RECREATE_GROUP_KEY ErrorCode = 99
  ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS ErrorCode = 100
  ErrorCode_SERVER_BUSY ErrorCode = 101
  ErrorCode_NOT_ALLOWED_ADD_FOLLOW ErrorCode = 102
  ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT ErrorCode = 103
  ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT ErrorCode = 104
  ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA ErrorCode = 105
  ErrorCode_DUPLICATED ErrorCode = 106
  ErrorCode_BANNED ErrorCode = 107
  ErrorCode_NOT_AN_INVITEE ErrorCode = 108
  ErrorCode_NOT_AN_OUTSIDER ErrorCode = 109
  ErrorCode_EMPTY_GROUP ErrorCode = 111
  ErrorCode_EXCEED_FOLLOW_LIMIT ErrorCode = 112
  ErrorCode_UNSUPPORTED_ACCOUNT_TYPE ErrorCode = 113
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case ErrorCode_AUTHENTICATION_FAILED: return "AUTHENTICATION_FAILED"
  case ErrorCode_DB_FAILED: return "DB_FAILED"
  case ErrorCode_INVALID_STATE: return "INVALID_STATE"
  case ErrorCode_EXCESSIVE_ACCESS: return "EXCESSIVE_ACCESS"
  case ErrorCode_NOT_FOUND: return "NOT_FOUND"
  case ErrorCode_INVALID_MID: return "INVALID_MID"
  case ErrorCode_NOT_A_MEMBER: return "NOT_A_MEMBER"
  case ErrorCode_INVALID_LENGTH: return "INVALID_LENGTH"
  case ErrorCode_NOT_AVAILABLE_USER: return "NOT_AVAILABLE_USER"
  case ErrorCode_NOT_AUTHORIZED_DEVICE: return "NOT_AUTHORIZED_DEVICE"
  case ErrorCode_NOT_AUTHORIZED_SESSION: return "NOT_AUTHORIZED_SESSION"
  case ErrorCode_INCOMPATIBLE_APP_VERSION: return "INCOMPATIBLE_APP_VERSION"
  case ErrorCode_NOT_READY: return "NOT_READY"
  case ErrorCode_NOT_AVAILABLE_SESSION: return "NOT_AVAILABLE_SESSION"
  case ErrorCode_SYSTEM_ERROR: return "SYSTEM_ERROR"
  case ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD: return "NO_AVAILABLE_VERIFICATION_METHOD"
  case ErrorCode_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case ErrorCode_INVALID_IDENTITY_CREDENTIAL: return "INVALID_IDENTITY_CREDENTIAL"
  case ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER: return "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
  case ErrorCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case ErrorCode_NO_SUCH_IDENTITY_IDENFIER: return "NO_SUCH_IDENTITY_IDENFIER"
  case ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY: return "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
  case ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL: return "ILLEGAL_IDENTITY_CREDENTIAL"
  case ErrorCode_UNKNOWN_CHANNEL: return "UNKNOWN_CHANNEL"
  case ErrorCode_NO_SUCH_MESSAGE_BOX: return "NO_SUCH_MESSAGE_BOX"
  case ErrorCode_NOT_AVAILABLE_MESSAGE_BOX: return "NOT_AVAILABLE_MESSAGE_BOX"
  case ErrorCode_CHANNEL_DOES_NOT_MATCH: return "CHANNEL_DOES_NOT_MATCH"
  case ErrorCode_NOT_YOUR_MESSAGE: return "NOT_YOUR_MESSAGE"
  case ErrorCode_MESSAGE_DEFINED_ERROR: return "MESSAGE_DEFINED_ERROR"
  case ErrorCode_USER_CANNOT_ACCEPT_PRESENTS: return "USER_CANNOT_ACCEPT_PRESENTS"
  case ErrorCode_USER_NOT_STICKER_OWNER: return "USER_NOT_STICKER_OWNER"
  case ErrorCode_MAINTENANCE_ERROR: return "MAINTENANCE_ERROR"
  case ErrorCode_ACCOUNT_NOT_MATCHED: return "ACCOUNT_NOT_MATCHED"
  case ErrorCode_ABUSE_BLOCK: return "ABUSE_BLOCK"
  case ErrorCode_NOT_FRIEND: return "NOT_FRIEND"
  case ErrorCode_NOT_ALLOWED_CALL: return "NOT_ALLOWED_CALL"
  case ErrorCode_BLOCK_FRIEND: return "BLOCK_FRIEND"
  case ErrorCode_INCOMPATIBLE_VOIP_VERSION: return "INCOMPATIBLE_VOIP_VERSION"
  case ErrorCode_INVALID_SNS_ACCESS_TOKEN: return "INVALID_SNS_ACCESS_TOKEN"
  case ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE: return "EXTERNAL_SERVICE_NOT_AVAILABLE"
  case ErrorCode_NOT_ALLOWED_ADD_CONTACT: return "NOT_ALLOWED_ADD_CONTACT"
  case ErrorCode_NOT_CERTIFICATED: return "NOT_CERTIFICATED"
  case ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE: return "NOT_ALLOWED_SECONDARY_DEVICE"
  case ErrorCode_INVALID_PIN_CODE: return "INVALID_PIN_CODE"
  case ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL: return "NOT_FOUND_IDENTITY_CREDENTIAL"
  case ErrorCode_EXCEED_FILE_MAX_SIZE: return "EXCEED_FILE_MAX_SIZE"
  case ErrorCode_EXCEED_DAILY_QUOTA: return "EXCEED_DAILY_QUOTA"
  case ErrorCode_NOT_SUPPORT_SEND_FILE: return "NOT_SUPPORT_SEND_FILE"
  case ErrorCode_MUST_UPGRADE: return "MUST_UPGRADE"
  case ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION: return "NOT_AVAILABLE_PIN_CODE_SESSION"
  case ErrorCode_EXPIRED_REVISION: return "EXPIRED_REVISION"
  case ErrorCode_NOT_YET_PHONE_NUMBER: return "NOT_YET_PHONE_NUMBER"
  case ErrorCode_BAD_CALL_NUMBER: return "BAD_CALL_NUMBER"
  case ErrorCode_UNAVAILABLE_CALL_NUMBER: return "UNAVAILABLE_CALL_NUMBER"
  case ErrorCode_NOT_SUPPORT_CALL_SERVICE: return "NOT_SUPPORT_CALL_SERVICE"
  case ErrorCode_CONGESTION_CONTROL: return "CONGESTION_CONTROL"
  case ErrorCode_NO_BALANCE: return "NO_BALANCE"
  case ErrorCode_NOT_PERMITTED_CALLER_ID: return "NOT_PERMITTED_CALLER_ID"
  case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED: return "NO_CALLER_ID_LIMIT_EXCEEDED"
  case ErrorCode_CALLER_ID_VERIFICATION_REQUIRED: return "CALLER_ID_VERIFICATION_REQUIRED"
  case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED: return "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  case ErrorCode_MESSAGE_NOT_FOUND: return "MESSAGE_NOT_FOUND"
  case ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT: return "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
  case ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED: return "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
  case ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED: return "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
  case ErrorCode_INVALID_PASSWORD_FORMAT: return "INVALID_PASSWORD_FORMAT"
  case ErrorCode_FEATURE_RESTRICTED: return "FEATURE_RESTRICTED"
  case ErrorCode_MESSAGE_NOT_DESTRUCTIBLE: return "MESSAGE_NOT_DESTRUCTIBLE"
  case ErrorCode_PAID_CALL_REDEEM_FAILED: return "PAID_CALL_REDEEM_FAILED"
  case ErrorCode_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case ErrorCode_SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT: return "SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT"
  case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY: return "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
  case ErrorCode_SECURITY_CENTER_NOT_VERIFIED: return "SECURITY_CENTER_NOT_VERIFIED"
  case ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING: return "SECURITY_CENTER_BLOCKED_BY_SETTING"
  case ErrorCode_SECURITY_CENTER_BLOCKED: return "SECURITY_CENTER_BLOCKED"
  case ErrorCode_TALK_PROXY_EXCEPTION: return "TALK_PROXY_EXCEPTION"
  case ErrorCode_E2EE_INVALID_PROTOCOL: return "E2EE_INVALID_PROTOCOL"
  case ErrorCode_E2EE_RETRY_ENCRYPT: return "E2EE_RETRY_ENCRYPT"
  case ErrorCode_E2EE_UPDATE_SENDER_KEY: return "E2EE_UPDATE_SENDER_KEY"
  case ErrorCode_E2EE_UPDATE_RECEIVER_KEY: return "E2EE_UPDATE_RECEIVER_KEY"
  case ErrorCode_E2EE_INVALID_ARGUMENT: return "E2EE_INVALID_ARGUMENT"
  case ErrorCode_E2EE_INVALID_VERSION: return "E2EE_INVALID_VERSION"
  case ErrorCode_E2EE_SENDER_DISABLED: return "E2EE_SENDER_DISABLED"
  case ErrorCode_E2EE_RECEIVER_DISABLED: return "E2EE_RECEIVER_DISABLED"
  case ErrorCode_E2EE_SENDER_NOT_ALLOWED: return "E2EE_SENDER_NOT_ALLOWED"
  case ErrorCode_E2EE_RECEIVER_NOT_ALLOWED: return "E2EE_RECEIVER_NOT_ALLOWED"
  case ErrorCode_E2EE_RESEND_FAIL: return "E2EE_RESEND_FAIL"
  case ErrorCode_E2EE_RESEND_OK: return "E2EE_RESEND_OK"
  case ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA: return "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
  case ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE: return "E2EE_UPDATE_PRIMARY_DEVICE"
  case ErrorCode_SUCCESS: return "SUCCESS"
  case ErrorCode_CANCEL: return "CANCEL"
  case ErrorCode_E2EE_PRIMARY_NOT_SUPPORT: return "E2EE_PRIMARY_NOT_SUPPORT"
  case ErrorCode_E2EE_RETRY_PLAIN: return "E2EE_RETRY_PLAIN"
  case ErrorCode_E2EE_RECREATE_GROUP_KEY: return "E2EE_RECREATE_GROUP_KEY"
  case ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS: return "E2EE_GROUP_TOO_MANY_MEMBERS"
  case ErrorCode_SERVER_BUSY: return "SERVER_BUSY"
  case ErrorCode_NOT_ALLOWED_ADD_FOLLOW: return "NOT_ALLOWED_ADD_FOLLOW"
  case ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT: return "INCOMING_FRIEND_REQUEST_LIMIT"
  case ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT: return "OUTGOING_FRIEND_REQUEST_LIMIT"
  case ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA: return "OUTGOING_FRIEND_REQUEST_QUOTA"
  case ErrorCode_DUPLICATED: return "DUPLICATED"
  case ErrorCode_BANNED: return "BANNED"
  case ErrorCode_NOT_AN_INVITEE: return "NOT_AN_INVITEE"
  case ErrorCode_NOT_AN_OUTSIDER: return "NOT_AN_OUTSIDER"
  case ErrorCode_EMPTY_GROUP: return "EMPTY_GROUP"
  case ErrorCode_EXCEED_FOLLOW_LIMIT: return "EXCEED_FOLLOW_LIMIT"
  case ErrorCode_UNSUPPORTED_ACCOUNT_TYPE: return "UNSUPPORTED_ACCOUNT_TYPE"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return ErrorCode_ILLEGAL_ARGUMENT, nil 
  case "AUTHENTICATION_FAILED": return ErrorCode_AUTHENTICATION_FAILED, nil 
  case "DB_FAILED": return ErrorCode_DB_FAILED, nil 
  case "INVALID_STATE": return ErrorCode_INVALID_STATE, nil 
  case "EXCESSIVE_ACCESS": return ErrorCode_EXCESSIVE_ACCESS, nil 
  case "NOT_FOUND": return ErrorCode_NOT_FOUND, nil 
  case "INVALID_MID": return ErrorCode_INVALID_MID, nil 
  case "NOT_A_MEMBER": return ErrorCode_NOT_A_MEMBER, nil 
  case "INVALID_LENGTH": return ErrorCode_INVALID_LENGTH, nil 
  case "NOT_AVAILABLE_USER": return ErrorCode_NOT_AVAILABLE_USER, nil 
  case "NOT_AUTHORIZED_DEVICE": return ErrorCode_NOT_AUTHORIZED_DEVICE, nil 
  case "NOT_AUTHORIZED_SESSION": return ErrorCode_NOT_AUTHORIZED_SESSION, nil 
  case "INCOMPATIBLE_APP_VERSION": return ErrorCode_INCOMPATIBLE_APP_VERSION, nil 
  case "NOT_READY": return ErrorCode_NOT_READY, nil 
  case "NOT_AVAILABLE_SESSION": return ErrorCode_NOT_AVAILABLE_SESSION, nil 
  case "SYSTEM_ERROR": return ErrorCode_SYSTEM_ERROR, nil 
  case "NO_AVAILABLE_VERIFICATION_METHOD": return ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD, nil 
  case "NOT_AUTHENTICATED": return ErrorCode_NOT_AUTHENTICATED, nil 
  case "INVALID_IDENTITY_CREDENTIAL": return ErrorCode_INVALID_IDENTITY_CREDENTIAL, nil 
  case "NOT_AVAILABLE_IDENTITY_IDENTIFIER": return ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil 
  case "INTERNAL_ERROR": return ErrorCode_INTERNAL_ERROR, nil 
  case "NO_SUCH_IDENTITY_IDENFIER": return ErrorCode_NO_SUCH_IDENTITY_IDENFIER, nil 
  case "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": return ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil 
  case "ILLEGAL_IDENTITY_CREDENTIAL": return ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL, nil 
  case "UNKNOWN_CHANNEL": return ErrorCode_UNKNOWN_CHANNEL, nil 
  case "NO_SUCH_MESSAGE_BOX": return ErrorCode_NO_SUCH_MESSAGE_BOX, nil 
  case "NOT_AVAILABLE_MESSAGE_BOX": return ErrorCode_NOT_AVAILABLE_MESSAGE_BOX, nil 
  case "CHANNEL_DOES_NOT_MATCH": return ErrorCode_CHANNEL_DOES_NOT_MATCH, nil 
  case "NOT_YOUR_MESSAGE": return ErrorCode_NOT_YOUR_MESSAGE, nil 
  case "MESSAGE_DEFINED_ERROR": return ErrorCode_MESSAGE_DEFINED_ERROR, nil 
  case "USER_CANNOT_ACCEPT_PRESENTS": return ErrorCode_USER_CANNOT_ACCEPT_PRESENTS, nil 
  case "USER_NOT_STICKER_OWNER": return ErrorCode_USER_NOT_STICKER_OWNER, nil 
  case "MAINTENANCE_ERROR": return ErrorCode_MAINTENANCE_ERROR, nil 
  case "ACCOUNT_NOT_MATCHED": return ErrorCode_ACCOUNT_NOT_MATCHED, nil 
  case "ABUSE_BLOCK": return ErrorCode_ABUSE_BLOCK, nil 
  case "NOT_FRIEND": return ErrorCode_NOT_FRIEND, nil 
  case "NOT_ALLOWED_CALL": return ErrorCode_NOT_ALLOWED_CALL, nil 
  case "BLOCK_FRIEND": return ErrorCode_BLOCK_FRIEND, nil 
  case "INCOMPATIBLE_VOIP_VERSION": return ErrorCode_INCOMPATIBLE_VOIP_VERSION, nil 
  case "INVALID_SNS_ACCESS_TOKEN": return ErrorCode_INVALID_SNS_ACCESS_TOKEN, nil 
  case "EXTERNAL_SERVICE_NOT_AVAILABLE": return ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil 
  case "NOT_ALLOWED_ADD_CONTACT": return ErrorCode_NOT_ALLOWED_ADD_CONTACT, nil 
  case "NOT_CERTIFICATED": return ErrorCode_NOT_CERTIFICATED, nil 
  case "NOT_ALLOWED_SECONDARY_DEVICE": return ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE, nil 
  case "INVALID_PIN_CODE": return ErrorCode_INVALID_PIN_CODE, nil 
  case "NOT_FOUND_IDENTITY_CREDENTIAL": return ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil 
  case "EXCEED_FILE_MAX_SIZE": return ErrorCode_EXCEED_FILE_MAX_SIZE, nil 
  case "EXCEED_DAILY_QUOTA": return ErrorCode_EXCEED_DAILY_QUOTA, nil 
  case "NOT_SUPPORT_SEND_FILE": return ErrorCode_NOT_SUPPORT_SEND_FILE, nil 
  case "MUST_UPGRADE": return ErrorCode_MUST_UPGRADE, nil 
  case "NOT_AVAILABLE_PIN_CODE_SESSION": return ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil 
  case "EXPIRED_REVISION": return ErrorCode_EXPIRED_REVISION, nil 
  case "NOT_YET_PHONE_NUMBER": return ErrorCode_NOT_YET_PHONE_NUMBER, nil 
  case "BAD_CALL_NUMBER": return ErrorCode_BAD_CALL_NUMBER, nil 
  case "UNAVAILABLE_CALL_NUMBER": return ErrorCode_UNAVAILABLE_CALL_NUMBER, nil 
  case "NOT_SUPPORT_CALL_SERVICE": return ErrorCode_NOT_SUPPORT_CALL_SERVICE, nil 
  case "CONGESTION_CONTROL": return ErrorCode_CONGESTION_CONTROL, nil 
  case "NO_BALANCE": return ErrorCode_NO_BALANCE, nil 
  case "NOT_PERMITTED_CALLER_ID": return ErrorCode_NOT_PERMITTED_CALLER_ID, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED": return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED, nil 
  case "CALLER_ID_VERIFICATION_REQUIRED": return ErrorCode_CALLER_ID_VERIFICATION_REQUIRED, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, nil 
  case "MESSAGE_NOT_FOUND": return ErrorCode_MESSAGE_NOT_FOUND, nil 
  case "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": return ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, nil 
  case "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": return ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, nil 
  case "ACCOUNT_MIGRATION_PINCODE_BLOCKED": return ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED, nil 
  case "INVALID_PASSWORD_FORMAT": return ErrorCode_INVALID_PASSWORD_FORMAT, nil 
  case "FEATURE_RESTRICTED": return ErrorCode_FEATURE_RESTRICTED, nil 
  case "MESSAGE_NOT_DESTRUCTIBLE": return ErrorCode_MESSAGE_NOT_DESTRUCTIBLE, nil 
  case "PAID_CALL_REDEEM_FAILED": return ErrorCode_PAID_CALL_REDEEM_FAILED, nil 
  case "PREVENTED_JOIN_BY_TICKET": return ErrorCode_PREVENTED_JOIN_BY_TICKET, nil 
  case "SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT": return ErrorCode_SEND_MESSAGE_NOT_PERMITTED__fromLINE_AT, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, nil 
  case "SECURITY_CENTER_NOT_VERIFIED": return ErrorCode_SECURITY_CENTER_NOT_VERIFIED, nil 
  case "SECURITY_CENTER_BLOCKED_BY_SETTING": return ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING, nil 
  case "SECURITY_CENTER_BLOCKED": return ErrorCode_SECURITY_CENTER_BLOCKED, nil 
  case "TALK_PROXY_EXCEPTION": return ErrorCode_TALK_PROXY_EXCEPTION, nil 
  case "E2EE_INVALID_PROTOCOL": return ErrorCode_E2EE_INVALID_PROTOCOL, nil 
  case "E2EE_RETRY_ENCRYPT": return ErrorCode_E2EE_RETRY_ENCRYPT, nil 
  case "E2EE_UPDATE_SENDER_KEY": return ErrorCode_E2EE_UPDATE_SENDER_KEY, nil 
  case "E2EE_UPDATE_RECEIVER_KEY": return ErrorCode_E2EE_UPDATE_RECEIVER_KEY, nil 
  case "E2EE_INVALID_ARGUMENT": return ErrorCode_E2EE_INVALID_ARGUMENT, nil 
  case "E2EE_INVALID_VERSION": return ErrorCode_E2EE_INVALID_VERSION, nil 
  case "E2EE_SENDER_DISABLED": return ErrorCode_E2EE_SENDER_DISABLED, nil 
  case "E2EE_RECEIVER_DISABLED": return ErrorCode_E2EE_RECEIVER_DISABLED, nil 
  case "E2EE_SENDER_NOT_ALLOWED": return ErrorCode_E2EE_SENDER_NOT_ALLOWED, nil 
  case "E2EE_RECEIVER_NOT_ALLOWED": return ErrorCode_E2EE_RECEIVER_NOT_ALLOWED, nil 
  case "E2EE_RESEND_FAIL": return ErrorCode_E2EE_RESEND_FAIL, nil 
  case "E2EE_RESEND_OK": return ErrorCode_E2EE_RESEND_OK, nil 
  case "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": return ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA, nil 
  case "E2EE_UPDATE_PRIMARY_DEVICE": return ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE, nil 
  case "SUCCESS": return ErrorCode_SUCCESS, nil 
  case "CANCEL": return ErrorCode_CANCEL, nil 
  case "E2EE_PRIMARY_NOT_SUPPORT": return ErrorCode_E2EE_PRIMARY_NOT_SUPPORT, nil 
  case "E2EE_RETRY_PLAIN": return ErrorCode_E2EE_RETRY_PLAIN, nil 
  case "E2EE_RECREATE_GROUP_KEY": return ErrorCode_E2EE_RECREATE_GROUP_KEY, nil 
  case "E2EE_GROUP_TOO_MANY_MEMBERS": return ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS, nil 
  case "SERVER_BUSY": return ErrorCode_SERVER_BUSY, nil 
  case "NOT_ALLOWED_ADD_FOLLOW": return ErrorCode_NOT_ALLOWED_ADD_FOLLOW, nil 
  case "INCOMING_FRIEND_REQUEST_LIMIT": return ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_LIMIT": return ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_QUOTA": return ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA, nil 
  case "DUPLICATED": return ErrorCode_DUPLICATED, nil 
  case "BANNED": return ErrorCode_BANNED, nil 
  case "NOT_AN_INVITEE": return ErrorCode_NOT_AN_INVITEE, nil 
  case "NOT_AN_OUTSIDER": return ErrorCode_NOT_AN_OUTSIDER, nil 
  case "EMPTY_GROUP": return ErrorCode_EMPTY_GROUP, nil 
  case "EXCEED_FOLLOW_LIMIT": return ErrorCode_EXCEED_FOLLOW_LIMIT, nil 
  case "UNSUPPORTED_ACCOUNT_TYPE": return ErrorCode_UNSUPPORTED_ACCOUNT_TYPE, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UpdateExtendedProfileAttributeAttr int64
const (
  UpdateExtendedProfileAttributeAttr_BIRTHDAY UpdateExtendedProfileAttributeAttr = 0
)

func (p UpdateExtendedProfileAttributeAttr) String() string {
  switch p {
  case UpdateExtendedProfileAttributeAttr_BIRTHDAY: return "BIRTHDAY"
  }
  return "<UNSET>"
}

func UpdateExtendedProfileAttributeAttrFromString(s string) (UpdateExtendedProfileAttributeAttr, error) {
  switch s {
  case "BIRTHDAY": return UpdateExtendedProfileAttributeAttr_BIRTHDAY, nil 
  }
  return UpdateExtendedProfileAttributeAttr(0), fmt.Errorf("not a valid UpdateExtendedProfileAttributeAttr string")
}


func UpdateExtendedProfileAttributeAttrPtr(v UpdateExtendedProfileAttributeAttr) *UpdateExtendedProfileAttributeAttr { return &v }

func (p UpdateExtendedProfileAttributeAttr) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UpdateExtendedProfileAttributeAttr) UnmarshalText(text []byte) error {
q, err := UpdateExtendedProfileAttributeAttrFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UpdateExtendedProfileAttributeAttr) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UpdateExtendedProfileAttributeAttr(v)
return nil
}

func (p * UpdateExtendedProfileAttributeAttr) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacyLevelType int64
const (
  PrivacyLevelType_PUBLIC PrivacyLevelType = 0
  PrivacyLevelType_PRIVATE PrivacyLevelType = 1
)

func (p PrivacyLevelType) String() string {
  switch p {
  case PrivacyLevelType_PUBLIC: return "PUBLIC"
  case PrivacyLevelType_PRIVATE: return "PRIVATE"
  }
  return "<UNSET>"
}

func PrivacyLevelTypeFromString(s string) (PrivacyLevelType, error) {
  switch s {
  case "PUBLIC": return PrivacyLevelType_PUBLIC, nil 
  case "PRIVATE": return PrivacyLevelType_PRIVATE, nil 
  }
  return PrivacyLevelType(0), fmt.Errorf("not a valid PrivacyLevelType string")
}


func PrivacyLevelTypePtr(v PrivacyLevelType) *PrivacyLevelType { return &v }

func (p PrivacyLevelType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacyLevelType) UnmarshalText(text []byte) error {
q, err := PrivacyLevelTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacyLevelType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacyLevelType(v)
return nil
}

func (p * PrivacyLevelType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Trigger int64
const (
  Trigger_UNKNOWN Trigger = 0
  Trigger_APP_FOREGROUND Trigger = 1
)

func (p Trigger) String() string {
  switch p {
  case Trigger_UNKNOWN: return "UNKNOWN"
  case Trigger_APP_FOREGROUND: return "APP_FOREGROUND"
  }
  return "<UNSET>"
}

func TriggerFromString(s string) (Trigger, error) {
  switch s {
  case "UNKNOWN": return Trigger_UNKNOWN, nil 
  case "APP_FOREGROUND": return Trigger_APP_FOREGROUND, nil 
  }
  return Trigger(0), fmt.Errorf("not a valid Trigger string")
}


func TriggerPtr(v Trigger) *Trigger { return &v }

func (p Trigger) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Trigger) UnmarshalText(text []byte) error {
q, err := TriggerFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Trigger) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Trigger(v)
return nil
}

func (p * Trigger) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NetworkType int64
const (
  NetworkType_UNKNOWN NetworkType = 0
  NetworkType_WIFI NetworkType = 1
  NetworkType_CELLULAR_NETWORK NetworkType = 2
)

func (p NetworkType) String() string {
  switch p {
  case NetworkType_UNKNOWN: return "UNKNOWN"
  case NetworkType_WIFI: return "WIFI"
  case NetworkType_CELLULAR_NETWORK: return "CELLULAR_NETWORK"
  }
  return "<UNSET>"
}

func NetworkTypeFromString(s string) (NetworkType, error) {
  switch s {
  case "UNKNOWN": return NetworkType_UNKNOWN, nil 
  case "WIFI": return NetworkType_WIFI, nil 
  case "CELLULAR_NETWORK": return NetworkType_CELLULAR_NETWORK, nil 
  }
  return NetworkType(0), fmt.Errorf("not a valid NetworkType string")
}


func NetworkTypePtr(v NetworkType) *NetworkType { return &v }

func (p NetworkType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NetworkType) UnmarshalText(text []byte) error {
q, err := NetworkTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NetworkType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NetworkType(v)
return nil
}

func (p * NetworkType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProductType int64
const (
  ProductType_COIN ProductType = 0
  ProductType_CREDIT ProductType = 1
  ProductType_MONTHLY ProductType = 2
)

func (p ProductType) String() string {
  switch p {
  case ProductType_COIN: return "COIN"
  case ProductType_CREDIT: return "CREDIT"
  case ProductType_MONTHLY: return "MONTHLY"
  }
  return "<UNSET>"
}

func ProductTypeFromString(s string) (ProductType, error) {
  switch s {
  case "COIN": return ProductType_COIN, nil 
  case "CREDIT": return ProductType_CREDIT, nil 
  case "MONTHLY": return ProductType_MONTHLY, nil 
  }
  return ProductType(0), fmt.Errorf("not a valid ProductType string")
}


func ProductTypePtr(v ProductType) *ProductType { return &v }

func (p ProductType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProductType) UnmarshalText(text []byte) error {
q, err := ProductTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProductType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProductType(v)
return nil
}

func (p * ProductType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChatType int64
const (
  ChatType_GROUP ChatType = 0
  ChatType_ROOM ChatType = 1
  ChatType_PEER ChatType = 2
)

func (p ChatType) String() string {
  switch p {
  case ChatType_GROUP: return "GROUP"
  case ChatType_ROOM: return "ROOM"
  case ChatType_PEER: return "PEER"
  }
  return "<UNSET>"
}

func ChatTypeFromString(s string) (ChatType, error) {
  switch s {
  case "GROUP": return ChatType_GROUP, nil 
  case "ROOM": return ChatType_ROOM, nil 
  case "PEER": return ChatType_PEER, nil 
  }
  return ChatType(0), fmt.Errorf("not a valid ChatType string")
}


func ChatTypePtr(v ChatType) *ChatType { return &v }

func (p ChatType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatType) UnmarshalText(text []byte) error {
q, err := ChatTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatType(v)
return nil
}

func (p * ChatType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MIDType int64
const (
  MIDType_MID MIDType = 0
  MIDType_PHONE MIDType = 1
  MIDType_EMAIL MIDType = 2
  MIDType_USERID MIDType = 3
  MIDType_PROXIMITY MIDType = 4
  MIDType_GROUP MIDType = 5
  MIDType_USER MIDType = 6
  MIDType_QRCODE MIDType = 7
  MIDType_PROMOTION_BOT MIDType = 8
  MIDType_CONTACT_MESSAGE MIDType = 9
  MIDType_FRIEND_REQUEST MIDType = 10
  MIDType_REPAIR MIDType = 128
  MIDType_FACEBOOK MIDType = 2305
  MIDType_SINA MIDType = 2306
  MIDType_RENREN MIDType = 2307
  MIDType_FEIXIN MIDType = 2308
  MIDType_BBM MIDType = 2309
  MIDType_BEACON MIDType = 11
)

func (p MIDType) String() string {
  switch p {
  case MIDType_MID: return "MID"
  case MIDType_PHONE: return "PHONE"
  case MIDType_EMAIL: return "EMAIL"
  case MIDType_USERID: return "USERID"
  case MIDType_PROXIMITY: return "PROXIMITY"
  case MIDType_GROUP: return "GROUP"
  case MIDType_USER: return "USER"
  case MIDType_QRCODE: return "QRCODE"
  case MIDType_PROMOTION_BOT: return "PROMOTION_BOT"
  case MIDType_CONTACT_MESSAGE: return "CONTACT_MESSAGE"
  case MIDType_FRIEND_REQUEST: return "FRIEND_REQUEST"
  case MIDType_REPAIR: return "REPAIR"
  case MIDType_FACEBOOK: return "FACEBOOK"
  case MIDType_SINA: return "SINA"
  case MIDType_RENREN: return "RENREN"
  case MIDType_FEIXIN: return "FEIXIN"
  case MIDType_BBM: return "BBM"
  case MIDType_BEACON: return "BEACON"
  }
  return "<UNSET>"
}

func MIDTypeFromString(s string) (MIDType, error) {
  switch s {
  case "MID": return MIDType_MID, nil 
  case "PHONE": return MIDType_PHONE, nil 
  case "EMAIL": return MIDType_EMAIL, nil 
  case "USERID": return MIDType_USERID, nil 
  case "PROXIMITY": return MIDType_PROXIMITY, nil 
  case "GROUP": return MIDType_GROUP, nil 
  case "USER": return MIDType_USER, nil 
  case "QRCODE": return MIDType_QRCODE, nil 
  case "PROMOTION_BOT": return MIDType_PROMOTION_BOT, nil 
  case "CONTACT_MESSAGE": return MIDType_CONTACT_MESSAGE, nil 
  case "FRIEND_REQUEST": return MIDType_FRIEND_REQUEST, nil 
  case "REPAIR": return MIDType_REPAIR, nil 
  case "FACEBOOK": return MIDType_FACEBOOK, nil 
  case "SINA": return MIDType_SINA, nil 
  case "RENREN": return MIDType_RENREN, nil 
  case "FEIXIN": return MIDType_FEIXIN, nil 
  case "BBM": return MIDType_BBM, nil 
  case "BEACON": return MIDType_BEACON, nil 
  }
  return MIDType(0), fmt.Errorf("not a valid MIDType string")
}


func MIDTypePtr(v MIDType) *MIDType { return &v }

func (p MIDType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MIDType) UnmarshalText(text []byte) error {
q, err := MIDTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MIDType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MIDType(v)
return nil
}

func (p * MIDType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactStatus int64
const (
  ContactStatus_UNSPECIFIED ContactStatus = 0
  ContactStatus_FRIEND ContactStatus = 1
  ContactStatus_FRIEND_BLOCKED ContactStatus = 2
  ContactStatus_RECOMMEND ContactStatus = 3
  ContactStatus_RECOMMEND_BLOCKED ContactStatus = 4
  ContactStatus_DELETED ContactStatus = 5
  ContactStatus_DELETED_BLOCKED ContactStatus = 6
)

func (p ContactStatus) String() string {
  switch p {
  case ContactStatus_UNSPECIFIED: return "UNSPECIFIED"
  case ContactStatus_FRIEND: return "FRIEND"
  case ContactStatus_FRIEND_BLOCKED: return "FRIEND_BLOCKED"
  case ContactStatus_RECOMMEND: return "RECOMMEND"
  case ContactStatus_RECOMMEND_BLOCKED: return "RECOMMEND_BLOCKED"
  case ContactStatus_DELETED: return "DELETED"
  case ContactStatus_DELETED_BLOCKED: return "DELETED_BLOCKED"
  }
  return "<UNSET>"
}

func ContactStatusFromString(s string) (ContactStatus, error) {
  switch s {
  case "UNSPECIFIED": return ContactStatus_UNSPECIFIED, nil 
  case "FRIEND": return ContactStatus_FRIEND, nil 
  case "FRIEND_BLOCKED": return ContactStatus_FRIEND_BLOCKED, nil 
  case "RECOMMEND": return ContactStatus_RECOMMEND, nil 
  case "RECOMMEND_BLOCKED": return ContactStatus_RECOMMEND_BLOCKED, nil 
  case "DELETED": return ContactStatus_DELETED, nil 
  case "DELETED_BLOCKED": return ContactStatus_DELETED_BLOCKED, nil 
  }
  return ContactStatus(0), fmt.Errorf("not a valid ContactStatus string")
}


func ContactStatusPtr(v ContactStatus) *ContactStatus { return &v }

func (p ContactStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactStatus) UnmarshalText(text []byte) error {
q, err := ContactStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactStatus(v)
return nil
}

func (p * ContactStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactRelation int64
const (
  ContactRelation_ONEWAY ContactRelation = 0
  ContactRelation_BOTH ContactRelation = 1
  ContactRelation_NOT_REGISTERED ContactRelation = 2
)

func (p ContactRelation) String() string {
  switch p {
  case ContactRelation_ONEWAY: return "ONEWAY"
  case ContactRelation_BOTH: return "BOTH"
  case ContactRelation_NOT_REGISTERED: return "NOT_REGISTERED"
  }
  return "<UNSET>"
}

func ContactRelationFromString(s string) (ContactRelation, error) {
  switch s {
  case "ONEWAY": return ContactRelation_ONEWAY, nil 
  case "BOTH": return ContactRelation_BOTH, nil 
  case "NOT_REGISTERED": return ContactRelation_NOT_REGISTERED, nil 
  }
  return ContactRelation(0), fmt.Errorf("not a valid ContactRelation string")
}


func ContactRelationPtr(v ContactRelation) *ContactRelation { return &v }

func (p ContactRelation) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactRelation) UnmarshalText(text []byte) error {
q, err := ContactRelationFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactRelation) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactRelation(v)
return nil
}

func (p * ContactRelation) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FriendRequestStatus int64
const (
  FriendRequestStatus_NONE FriendRequestStatus = 0
  FriendRequestStatus_AVAILABLE FriendRequestStatus = 1
  FriendRequestStatus_ALREADY_REQUESTED FriendRequestStatus = 2
  FriendRequestStatus_UNAVAILABLE FriendRequestStatus = 3
)

func (p FriendRequestStatus) String() string {
  switch p {
  case FriendRequestStatus_NONE: return "NONE"
  case FriendRequestStatus_AVAILABLE: return "AVAILABLE"
  case FriendRequestStatus_ALREADY_REQUESTED: return "ALREADY_REQUESTED"
  case FriendRequestStatus_UNAVAILABLE: return "UNAVAILABLE"
  }
  return "<UNSET>"
}

func FriendRequestStatusFromString(s string) (FriendRequestStatus, error) {
  switch s {
  case "NONE": return FriendRequestStatus_NONE, nil 
  case "AVAILABLE": return FriendRequestStatus_AVAILABLE, nil 
  case "ALREADY_REQUESTED": return FriendRequestStatus_ALREADY_REQUESTED, nil 
  case "UNAVAILABLE": return FriendRequestStatus_UNAVAILABLE, nil 
  }
  return FriendRequestStatus(0), fmt.Errorf("not a valid FriendRequestStatus string")
}


func FriendRequestStatusPtr(v FriendRequestStatus) *FriendRequestStatus { return &v }

func (p FriendRequestStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FriendRequestStatus) UnmarshalText(text []byte) error {
q, err := FriendRequestStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FriendRequestStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FriendRequestStatus(v)
return nil
}

func (p * FriendRequestStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Provider int64
const (
  Provider_UNKNOWN Provider = 0
  Provider_LINE Provider = 1
  Provider_NAVER_KR Provider = 2
  Provider_LINE_PHONE Provider = 3
)

func (p Provider) String() string {
  switch p {
  case Provider_UNKNOWN: return "UNKNOWN"
  case Provider_LINE: return "LINE"
  case Provider_NAVER_KR: return "NAVER_KR"
  case Provider_LINE_PHONE: return "LINE_PHONE"
  }
  return "<UNSET>"
}

func ProviderFromString(s string) (Provider, error) {
  switch s {
  case "UNKNOWN": return Provider_UNKNOWN, nil 
  case "LINE": return Provider_LINE, nil 
  case "NAVER_KR": return Provider_NAVER_KR, nil 
  case "LINE_PHONE": return Provider_LINE_PHONE, nil 
  }
  return Provider(0), fmt.Errorf("not a valid Provider string")
}


func ProviderPtr(v Provider) *Provider { return &v }

func (p Provider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Provider) UnmarshalText(text []byte) error {
q, err := ProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Provider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Provider(v)
return nil
}

func (p * Provider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ResponseType int64
const (
  ResponseType_UNKNOWN ResponseType = 0
  ResponseType_SUCCESS ResponseType = 1
  ResponseType_REQUIRE_SERVER_SIDE_EMAIL ResponseType = 2
  ResponseType_REQUIRE_CLIENT_SIDE_EMAIL ResponseType = 3
)

func (p ResponseType) String() string {
  switch p {
  case ResponseType_UNKNOWN: return "UNKNOWN"
  case ResponseType_SUCCESS: return "SUCCESS"
  case ResponseType_REQUIRE_SERVER_SIDE_EMAIL: return "REQUIRE_SERVER_SIDE_EMAIL"
  case ResponseType_REQUIRE_CLIENT_SIDE_EMAIL: return "REQUIRE_CLIENT_SIDE_EMAIL"
  }
  return "<UNSET>"
}

func ResponseTypeFromString(s string) (ResponseType, error) {
  switch s {
  case "UNKNOWN": return ResponseType_UNKNOWN, nil 
  case "SUCCESS": return ResponseType_SUCCESS, nil 
  case "REQUIRE_SERVER_SIDE_EMAIL": return ResponseType_REQUIRE_SERVER_SIDE_EMAIL, nil 
  case "REQUIRE_CLIENT_SIDE_EMAIL": return ResponseType_REQUIRE_CLIENT_SIDE_EMAIL, nil 
  }
  return ResponseType(0), fmt.Errorf("not a valid ResponseType string")
}


func ResponseTypePtr(v ResponseType) *ResponseType { return &v }

func (p ResponseType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResponseType) UnmarshalText(text []byte) error {
q, err := ResponseTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResponseType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResponseType(v)
return nil
}

func (p * ResponseType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SnSIdTyoe int64
const (
  SnSIdTyoe_FACEBOOK SnSIdTyoe = 1
  SnSIdTyoe_SINA SnSIdTyoe = 2
  SnSIdTyoe_RENREN SnSIdTyoe = 3
  SnSIdTyoe_FEIXIN SnSIdTyoe = 4
  SnSIdTyoe_BBM SnSIdTyoe = 5
  SnSIdTyoe_APPLE SnSIdTyoe = 6
)

func (p SnSIdTyoe) String() string {
  switch p {
  case SnSIdTyoe_FACEBOOK: return "FACEBOOK"
  case SnSIdTyoe_SINA: return "SINA"
  case SnSIdTyoe_RENREN: return "RENREN"
  case SnSIdTyoe_FEIXIN: return "FEIXIN"
  case SnSIdTyoe_BBM: return "BBM"
  case SnSIdTyoe_APPLE: return "APPLE"
  }
  return "<UNSET>"
}

func SnSIdTyoeFromString(s string) (SnSIdTyoe, error) {
  switch s {
  case "FACEBOOK": return SnSIdTyoe_FACEBOOK, nil 
  case "SINA": return SnSIdTyoe_SINA, nil 
  case "RENREN": return SnSIdTyoe_RENREN, nil 
  case "FEIXIN": return SnSIdTyoe_FEIXIN, nil 
  case "BBM": return SnSIdTyoe_BBM, nil 
  case "APPLE": return SnSIdTyoe_APPLE, nil 
  }
  return SnSIdTyoe(0), fmt.Errorf("not a valid SnSIdTyoe string")
}


func SnSIdTyoePtr(v SnSIdTyoe) *SnSIdTyoe { return &v }

func (p SnSIdTyoe) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SnSIdTyoe) UnmarshalText(text []byte) error {
q, err := SnSIdTyoeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SnSIdTyoe) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SnSIdTyoe(v)
return nil
}

func (p * SnSIdTyoe) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountMigrationCheckType int64
const (
  AccountMigrationCheckType_SKIP AccountMigrationCheckType = 0
  AccountMigrationCheckType_PINCODE AccountMigrationCheckType = 1
  AccountMigrationCheckType_SECURITY_CENTER AccountMigrationCheckType = 2
)

func (p AccountMigrationCheckType) String() string {
  switch p {
  case AccountMigrationCheckType_SKIP: return "SKIP"
  case AccountMigrationCheckType_PINCODE: return "PINCODE"
  case AccountMigrationCheckType_SECURITY_CENTER: return "SECURITY_CENTER"
  }
  return "<UNSET>"
}

func AccountMigrationCheckTypeFromString(s string) (AccountMigrationCheckType, error) {
  switch s {
  case "SKIP": return AccountMigrationCheckType_SKIP, nil 
  case "PINCODE": return AccountMigrationCheckType_PINCODE, nil 
  case "SECURITY_CENTER": return AccountMigrationCheckType_SECURITY_CENTER, nil 
  }
  return AccountMigrationCheckType(0), fmt.Errorf("not a valid AccountMigrationCheckType string")
}


func AccountMigrationCheckTypePtr(v AccountMigrationCheckType) *AccountMigrationCheckType { return &v }

func (p AccountMigrationCheckType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountMigrationCheckType) UnmarshalText(text []byte) error {
q, err := AccountMigrationCheckTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountMigrationCheckType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountMigrationCheckType(v)
return nil
}

func (p * AccountMigrationCheckType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DataTypes int64
const (
  DataTypes_UNKNOWN DataTypes = 0
  DataTypes_LOCATION DataTypes = 1
)

func (p DataTypes) String() string {
  switch p {
  case DataTypes_UNKNOWN: return "UNKNOWN"
  case DataTypes_LOCATION: return "LOCATION"
  }
  return "<UNSET>"
}

func DataTypesFromString(s string) (DataTypes, error) {
  switch s {
  case "UNKNOWN": return DataTypes_UNKNOWN, nil 
  case "LOCATION": return DataTypes_LOCATION, nil 
  }
  return DataTypes(0), fmt.Errorf("not a valid DataTypes string")
}


func DataTypesPtr(v DataTypes) *DataTypes { return &v }

func (p DataTypes) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DataTypes) UnmarshalText(text []byte) error {
q, err := DataTypesFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DataTypes) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DataTypes(v)
return nil
}

func (p * DataTypes) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DisplayType int64
const (
  DisplayType_NOT_A_FRIEND DisplayType = 0
  DisplayType_ALWAYS DisplayType = 1
)

func (p DisplayType) String() string {
  switch p {
  case DisplayType_NOT_A_FRIEND: return "NOT_A_FRIEND"
  case DisplayType_ALWAYS: return "ALWAYS"
  }
  return "<UNSET>"
}

func DisplayTypeFromString(s string) (DisplayType, error) {
  switch s {
  case "NOT_A_FRIEND": return DisplayType_NOT_A_FRIEND, nil 
  case "ALWAYS": return DisplayType_ALWAYS, nil 
  }
  return DisplayType(0), fmt.Errorf("not a valid DisplayType string")
}


func DisplayTypePtr(v DisplayType) *DisplayType { return &v }

func (p DisplayType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DisplayType) UnmarshalText(text []byte) error {
q, err := DisplayTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DisplayType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DisplayType(v)
return nil
}

func (p * DisplayType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type HistorysType int64
const (
  HistorysType_OUT HistorysType = 0
  HistorysType_IN HistorysType = 1
  HistorysType_TOLLFREE HistorysType = 2
  HistorysType_RECORD HistorysType = 3
  HistorysType_AD HistorysType = 4
  HistorysType_CS HistorysType = 5
  HistorysType_OA HistorysType = 6
)

func (p HistorysType) String() string {
  switch p {
  case HistorysType_OUT: return "OUT"
  case HistorysType_IN: return "IN"
  case HistorysType_TOLLFREE: return "TOLLFREE"
  case HistorysType_RECORD: return "RECORD"
  case HistorysType_AD: return "AD"
  case HistorysType_CS: return "CS"
  case HistorysType_OA: return "OA"
  }
  return "<UNSET>"
}

func HistorysTypeFromString(s string) (HistorysType, error) {
  switch s {
  case "OUT": return HistorysType_OUT, nil 
  case "IN": return HistorysType_IN, nil 
  case "TOLLFREE": return HistorysType_TOLLFREE, nil 
  case "RECORD": return HistorysType_RECORD, nil 
  case "AD": return HistorysType_AD, nil 
  case "CS": return HistorysType_CS, nil 
  case "OA": return HistorysType_OA, nil 
  }
  return HistorysType(0), fmt.Errorf("not a valid HistorysType string")
}


func HistorysTypePtr(v HistorysType) *HistorysType { return &v }

func (p HistorysType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *HistorysType) UnmarshalText(text []byte) error {
q, err := HistorysTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *HistorysType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = HistorysType(v)
return nil
}

func (p * HistorysType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncReason int64
const (
  SyncReason_UNSPECIFIED SyncReason = 0
  SyncReason_UNKNOWN SyncReason = 1
  SyncReason_INITIALIZATION SyncReason = 2
  SyncReason_OPERATION SyncReason = 3
  SyncReason_FULL_SYNC SyncReason = 4
  SyncReason_AUTO_REPAIR SyncReason = 5
  SyncReason_MANUAL_REPAIR SyncReason = 6
  SyncReason_INTERNAL SyncReason = 7
)

func (p SyncReason) String() string {
  switch p {
  case SyncReason_UNSPECIFIED: return "UNSPECIFIED"
  case SyncReason_UNKNOWN: return "UNKNOWN"
  case SyncReason_INITIALIZATION: return "INITIALIZATION"
  case SyncReason_OPERATION: return "OPERATION"
  case SyncReason_FULL_SYNC: return "FULL_SYNC"
  case SyncReason_AUTO_REPAIR: return "AUTO_REPAIR"
  case SyncReason_MANUAL_REPAIR: return "MANUAL_REPAIR"
  case SyncReason_INTERNAL: return "INTERNAL"
  }
  return "<UNSET>"
}

func SyncReasonFromString(s string) (SyncReason, error) {
  switch s {
  case "UNSPECIFIED": return SyncReason_UNSPECIFIED, nil 
  case "UNKNOWN": return SyncReason_UNKNOWN, nil 
  case "INITIALIZATION": return SyncReason_INITIALIZATION, nil 
  case "OPERATION": return SyncReason_OPERATION, nil 
  case "FULL_SYNC": return SyncReason_FULL_SYNC, nil 
  case "AUTO_REPAIR": return SyncReason_AUTO_REPAIR, nil 
  case "MANUAL_REPAIR": return SyncReason_MANUAL_REPAIR, nil 
  case "INTERNAL": return SyncReason_INTERNAL, nil 
  }
  return SyncReason(0), fmt.Errorf("not a valid SyncReason string")
}


func SyncReasonPtr(v SyncReason) *SyncReason { return &v }

func (p SyncReason) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncReason) UnmarshalText(text []byte) error {
q, err := SyncReasonFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncReason) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncReason(v)
return nil
}

func (p * SyncReason) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CountryGroup int64
const (
  CountryGroup_UNKNOWN CountryGroup = 0
  CountryGroup_EUROPEAN_ECONOMIC_AREA CountryGroup = 1
)

func (p CountryGroup) String() string {
  switch p {
  case CountryGroup_UNKNOWN: return "UNKNOWN"
  case CountryGroup_EUROPEAN_ECONOMIC_AREA: return "EUROPEAN_ECONOMIC_AREA"
  }
  return "<UNSET>"
}

func CountryGroupFromString(s string) (CountryGroup, error) {
  switch s {
  case "UNKNOWN": return CountryGroup_UNKNOWN, nil 
  case "EUROPEAN_ECONOMIC_AREA": return CountryGroup_EUROPEAN_ECONOMIC_AREA, nil 
  }
  return CountryGroup(0), fmt.Errorf("not a valid CountryGroup string")
}


func CountryGroupPtr(v CountryGroup) *CountryGroup { return &v }

func (p CountryGroup) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CountryGroup) UnmarshalText(text []byte) error {
q, err := CountryGroupFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CountryGroup) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CountryGroup(v)
return nil
}

func (p * CountryGroup) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChatRoomAnnouncementType int64
const (
  ChatRoomAnnouncementType_MESSAGE ChatRoomAnnouncementType = 0
  ChatRoomAnnouncementType_NOTE ChatRoomAnnouncementType = 1
  ChatRoomAnnouncementType_CHANNEL ChatRoomAnnouncementType = 2
)

func (p ChatRoomAnnouncementType) String() string {
  switch p {
  case ChatRoomAnnouncementType_MESSAGE: return "MESSAGE"
  case ChatRoomAnnouncementType_NOTE: return "NOTE"
  case ChatRoomAnnouncementType_CHANNEL: return "CHANNEL"
  }
  return "<UNSET>"
}

func ChatRoomAnnouncementTypeFromString(s string) (ChatRoomAnnouncementType, error) {
  switch s {
  case "MESSAGE": return ChatRoomAnnouncementType_MESSAGE, nil 
  case "NOTE": return ChatRoomAnnouncementType_NOTE, nil 
  case "CHANNEL": return ChatRoomAnnouncementType_CHANNEL, nil 
  }
  return ChatRoomAnnouncementType(0), fmt.Errorf("not a valid ChatRoomAnnouncementType string")
}


func ChatRoomAnnouncementTypePtr(v ChatRoomAnnouncementType) *ChatRoomAnnouncementType { return &v }

func (p ChatRoomAnnouncementType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatRoomAnnouncementType) UnmarshalText(text []byte) error {
q, err := ChatRoomAnnouncementTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatRoomAnnouncementType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatRoomAnnouncementType(v)
return nil
}

func (p * ChatRoomAnnouncementType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DeletePermission int64
const (
  DeletePermission_ANYONE_IN_CHAT DeletePermission = 0
  DeletePermission_CREATOR_ONLY DeletePermission = 1
  DeletePermission_NO_ONE DeletePermission = 2
)

func (p DeletePermission) String() string {
  switch p {
  case DeletePermission_ANYONE_IN_CHAT: return "ANYONE_IN_CHAT"
  case DeletePermission_CREATOR_ONLY: return "CREATOR_ONLY"
  case DeletePermission_NO_ONE: return "NO_ONE"
  }
  return "<UNSET>"
}

func DeletePermissionFromString(s string) (DeletePermission, error) {
  switch s {
  case "ANYONE_IN_CHAT": return DeletePermission_ANYONE_IN_CHAT, nil 
  case "CREATOR_ONLY": return DeletePermission_CREATOR_ONLY, nil 
  case "NO_ONE": return DeletePermission_NO_ONE, nil 
  }
  return DeletePermission(0), fmt.Errorf("not a valid DeletePermission string")
}


func DeletePermissionPtr(v DeletePermission) *DeletePermission { return &v }

func (p DeletePermission) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DeletePermission) UnmarshalText(text []byte) error {
q, err := DeletePermissionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DeletePermission) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DeletePermission(v)
return nil
}

func (p * DeletePermission) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ReportCategory int64
const (
  ReportCategory_PROFILE ReportCategory = 0
  ReportCategory_SETTINGS ReportCategory = 1
  ReportCategory_OPS ReportCategory = 2
  ReportCategory_CONTACT ReportCategory = 3
  ReportCategory_RECOMMEND ReportCategory = 4
  ReportCategory_BLOCK ReportCategory = 5
  ReportCategory_GROUP ReportCategory = 6
  ReportCategory_ROOM ReportCategory = 7
  ReportCategory_NOTIFICATION ReportCategory = 8
  ReportCategory_ADDRESS_BOOK ReportCategory = 9
)

func (p ReportCategory) String() string {
  switch p {
  case ReportCategory_PROFILE: return "PROFILE"
  case ReportCategory_SETTINGS: return "SETTINGS"
  case ReportCategory_OPS: return "OPS"
  case ReportCategory_CONTACT: return "CONTACT"
  case ReportCategory_RECOMMEND: return "RECOMMEND"
  case ReportCategory_BLOCK: return "BLOCK"
  case ReportCategory_GROUP: return "GROUP"
  case ReportCategory_ROOM: return "ROOM"
  case ReportCategory_NOTIFICATION: return "NOTIFICATION"
  case ReportCategory_ADDRESS_BOOK: return "ADDRESS_BOOK"
  }
  return "<UNSET>"
}

func ReportCategoryFromString(s string) (ReportCategory, error) {
  switch s {
  case "PROFILE": return ReportCategory_PROFILE, nil 
  case "SETTINGS": return ReportCategory_SETTINGS, nil 
  case "OPS": return ReportCategory_OPS, nil 
  case "CONTACT": return ReportCategory_CONTACT, nil 
  case "RECOMMEND": return ReportCategory_RECOMMEND, nil 
  case "BLOCK": return ReportCategory_BLOCK, nil 
  case "GROUP": return ReportCategory_GROUP, nil 
  case "ROOM": return ReportCategory_ROOM, nil 
  case "NOTIFICATION": return ReportCategory_NOTIFICATION, nil 
  case "ADDRESS_BOOK": return ReportCategory_ADDRESS_BOOK, nil 
  }
  return ReportCategory(0), fmt.Errorf("not a valid ReportCategory string")
}


func ReportCategoryPtr(v ReportCategory) *ReportCategory { return &v }

func (p ReportCategory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ReportCategory) UnmarshalText(text []byte) error {
q, err := ReportCategoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ReportCategory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ReportCategory(v)
return nil
}

func (p * ReportCategory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type RequestsSource int64
const (
  RequestsSource_NA RequestsSource = 0
  RequestsSource_FRIEND_VIEW RequestsSource = 1
  RequestsSource_OFFICIAL_ACCOUNT_VIEW RequestsSource = 2
)

func (p RequestsSource) String() string {
  switch p {
  case RequestsSource_NA: return "NA"
  case RequestsSource_FRIEND_VIEW: return "FRIEND_VIEW"
  case RequestsSource_OFFICIAL_ACCOUNT_VIEW: return "OFFICIAL_ACCOUNT_VIEW"
  }
  return "<UNSET>"
}

func RequestsSourceFromString(s string) (RequestsSource, error) {
  switch s {
  case "NA": return RequestsSource_NA, nil 
  case "FRIEND_VIEW": return RequestsSource_FRIEND_VIEW, nil 
  case "OFFICIAL_ACCOUNT_VIEW": return RequestsSource_OFFICIAL_ACCOUNT_VIEW, nil 
  }
  return RequestsSource(0), fmt.Errorf("not a valid RequestsSource string")
}


func RequestsSourcePtr(v RequestsSource) *RequestsSource { return &v }

func (p RequestsSource) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RequestsSource) UnmarshalText(text []byte) error {
q, err := RequestsSourceFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RequestsSource) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RequestsSource(v)
return nil
}

func (p * RequestsSource) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BotType int64
const (
  BotType_RESERVED BotType = 0
  BotType_OFFICIAL BotType = 1
  BotType_LINE_AT_0 BotType = 2
  BotType_LINE_AT BotType = 3
)

func (p BotType) String() string {
  switch p {
  case BotType_RESERVED: return "RESERVED"
  case BotType_OFFICIAL: return "OFFICIAL"
  case BotType_LINE_AT_0: return "LINE_AT_0"
  case BotType_LINE_AT: return "LINE_AT"
  }
  return "<UNSET>"
}

func BotTypeFromString(s string) (BotType, error) {
  switch s {
  case "RESERVED": return BotType_RESERVED, nil 
  case "OFFICIAL": return BotType_OFFICIAL, nil 
  case "LINE_AT_0": return BotType_LINE_AT_0, nil 
  case "LINE_AT": return BotType_LINE_AT, nil 
  }
  return BotType(0), fmt.Errorf("not a valid BotType string")
}


func BotTypePtr(v BotType) *BotType { return &v }

func (p BotType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BotType) UnmarshalText(text []byte) error {
q, err := BotTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BotType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BotType(v)
return nil
}

func (p * BotType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Direction int64
const (
  Direction_INCOMING Direction = 1
  Direction_OUTGOING Direction = 2
)

func (p Direction) String() string {
  switch p {
  case Direction_INCOMING: return "INCOMING"
  case Direction_OUTGOING: return "OUTGOING"
  }
  return "<UNSET>"
}

func DirectionFromString(s string) (Direction, error) {
  switch s {
  case "INCOMING": return Direction_INCOMING, nil 
  case "OUTGOING": return Direction_OUTGOING, nil 
  }
  return Direction(0), fmt.Errorf("not a valid Direction string")
}


func DirectionPtr(v Direction) *Direction { return &v }

func (p Direction) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Direction) UnmarshalText(text []byte) error {
q, err := DirectionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Direction) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Direction(v)
return nil
}

func (p * Direction) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ApplicationType int64
const (
  ApplicationType_IOS ApplicationType = 16
  ApplicationType_IOS_RC ApplicationType = 17
  ApplicationType_IOS_BETA ApplicationType = 18
  ApplicationType_IOS_ALPHA ApplicationType = 19
  ApplicationType_ANDROID ApplicationType = 32
  ApplicationType_ANDROID_RC ApplicationType = 33
  ApplicationType_ANDROID_BETA ApplicationType = 34
  ApplicationType_ANDROID_ALPHA ApplicationType = 35
  ApplicationType_WAP ApplicationType = 48
  ApplicationType_WAP_RC ApplicationType = 49
  ApplicationType_WAP_BETA ApplicationType = 50
  ApplicationType_WAP_ALPHA ApplicationType = 51
  ApplicationType_BOT ApplicationType = 64
  ApplicationType_BOT_RC ApplicationType = 65
  ApplicationType_BOT_BETA ApplicationType = 66
  ApplicationType_BOT_ALPHA ApplicationType = 67
  ApplicationType_WEB ApplicationType = 80
  ApplicationType_WEB_RC ApplicationType = 81
  ApplicationType_WEB_BETA ApplicationType = 82
  ApplicationType_WEB_ALPHA ApplicationType = 83
  ApplicationType_DESKTOPWIN ApplicationType = 96
  ApplicationType_DESKTOPWIN_RC ApplicationType = 97
  ApplicationType_DESKTOPWIN_BETA ApplicationType = 98
  ApplicationType_DESKTOPWIN_ALPHA ApplicationType = 99
  ApplicationType_DESKTOPMAC ApplicationType = 112
  ApplicationType_DESKTOPMAC_RC ApplicationType = 113
  ApplicationType_DESKTOPMAC_BETA ApplicationType = 114
  ApplicationType_DESKTOPMAC_ALPHA ApplicationType = 115
  ApplicationType_CHANNELGW ApplicationType = 128
  ApplicationType_CHANNELGW_RC ApplicationType = 129
  ApplicationType_CHANNELGW_BETA ApplicationType = 130
  ApplicationType_CHANNELGW_ALPHA ApplicationType = 213
  ApplicationType_CHANNELCP ApplicationType = 144
  ApplicationType_CHANNELCP_RC ApplicationType = 145
  ApplicationType_CHANNELCP_BETA ApplicationType = 146
  ApplicationType_CHANNELCP_ALPHA ApplicationType = 147
  ApplicationType_WINPHONE ApplicationType = 160
  ApplicationType_WINPHONE_RC ApplicationType = 161
  ApplicationType_WINPHONE_BETA ApplicationType = 162
  ApplicationType_WINPHONE_ALPHA ApplicationType = 163
  ApplicationType_BLACKBERRY ApplicationType = 176
  ApplicationType_BLACKBERRY_RC ApplicationType = 177
  ApplicationType_BLACKBERRY_BETA ApplicationType = 178
  ApplicationType_BLACKBERRY_ALPHA ApplicationType = 179
  ApplicationType_WINMETRO ApplicationType = 192
  ApplicationType_WINMETRO_RC ApplicationType = 193
  ApplicationType_WINMETRO_BETA ApplicationType = 194
  ApplicationType_WINMETRO_ALPHA ApplicationType = 195
  ApplicationType_S40 ApplicationType = 208
  ApplicationType_S40_RC ApplicationType = 209
  ApplicationType_S40_BETA ApplicationType = 210
  ApplicationType_S40_ALPHA ApplicationType = 211
  ApplicationType_CHRONO ApplicationType = 224
  ApplicationType_CHRONO_RC ApplicationType = 225
  ApplicationType_CHRONO_BETA ApplicationType = 226
  ApplicationType_CHRONO_ALPHA ApplicationType = 227
  ApplicationType_TIZEN ApplicationType = 256
  ApplicationType_TIZEN_RC ApplicationType = 257
  ApplicationType_TIZEN_BETA ApplicationType = 258
  ApplicationType_TIZEN_ALPHA ApplicationType = 259
  ApplicationType_VIRTUAL ApplicationType = 272
  ApplicationType_FIREFOXOS ApplicationType = 288
  ApplicationType_FIREFOXOS_RC ApplicationType = 289
  ApplicationType_FIREFOXOS_BETA ApplicationType = 290
  ApplicationType_FIREFOXOS_ALPHA ApplicationType = 291
  ApplicationType_IOSIPAD ApplicationType = 304
  ApplicationType_IOSIPAD_RC ApplicationType = 305
  ApplicationType_IOSIPAD_BETA ApplicationType = 306
  ApplicationType_IOSIPAD_ALPHA ApplicationType = 307
  ApplicationType_BIZIOS ApplicationType = 320
  ApplicationType_BIZIOS_RC ApplicationType = 321
  ApplicationType_BIZIOS_BETA ApplicationType = 322
  ApplicationType_BIZIOS_ALPHA ApplicationType = 323
  ApplicationType_BIZANDROID ApplicationType = 336
  ApplicationType_BIZANDROID_RC ApplicationType = 337
  ApplicationType_BIZANDROID_BETA ApplicationType = 338
  ApplicationType_BIZANDROID_ALPHA ApplicationType = 339
  ApplicationType_BIZBOT ApplicationType = 352
  ApplicationType_BIZBOT_RC ApplicationType = 353
  ApplicationType_BIZBOT_BETA ApplicationType = 354
  ApplicationType_BIZBOT_ALPHA ApplicationType = 355
  ApplicationType_CHROMEOS ApplicationType = 368
  ApplicationType_CHROMEOS_RC ApplicationType = 369
  ApplicationType_CHROMEOS_BETA ApplicationType = 370
  ApplicationType_CHROMEOS_ALPHA ApplicationType = 371
  ApplicationType_ANDROIDLITE ApplicationType = 384
  ApplicationType_ANDROIDLITE_RC ApplicationType = 385
  ApplicationType_ANDROIDLITE_BETA ApplicationType = 386
  ApplicationType_ANDROIDLITE_ALPHA ApplicationType = 387
  ApplicationType_WIN10 ApplicationType = 400
  ApplicationType_WIN10_RC ApplicationType = 401
  ApplicationType_WIN10_BETA ApplicationType = 402
  ApplicationType_WIN10_ALPHA ApplicationType = 403
  ApplicationType_BIZWEB ApplicationType = 416
  ApplicationType_BIZWEB_RC ApplicationType = 417
  ApplicationType_BIZWEB_BETA ApplicationType = 418
  ApplicationType_BIZWEB_ALPHA ApplicationType = 419
  ApplicationType_DUMMYPRIMARY ApplicationType = 432
  ApplicationType_DUMMYPRIMARY_RC ApplicationType = 433
  ApplicationType_DUMMYPRIMARY_BETA ApplicationType = 434
  ApplicationType_DUMMYPRIMARY_ALPHA ApplicationType = 435
  ApplicationType_SQUARE ApplicationType = 448
  ApplicationType_SQUARE_RC ApplicationType = 449
  ApplicationType_SQUARE_BETA ApplicationType = 450
  ApplicationType_SQUARE_ALPHA ApplicationType = 451
  ApplicationType_INTERNAL ApplicationType = 464
  ApplicationType_INTERNAL_RC ApplicationType = 465
  ApplicationType_INTERNAL_BETA ApplicationType = 466
  ApplicationType_INTERNAL_ALPHA ApplicationType = 467
  ApplicationType_CLOVAFRIENDS ApplicationType = 480
  ApplicationType_CLOVAFRIENDS_RC ApplicationType = 481
  ApplicationType_CLOVAFRIENDS_BETA ApplicationType = 482
  ApplicationType_CLOVAFRIENDS_ALPHA ApplicationType = 483
  ApplicationType_WATCHOS ApplicationType = 496
  ApplicationType_WATCHOS_RC ApplicationType = 497
  ApplicationType_WATCHOS_BETA ApplicationType = 498
  ApplicationType_WATCHOS_ALPHA ApplicationType = 499
)

func (p ApplicationType) String() string {
  switch p {
  case ApplicationType_IOS: return "IOS"
  case ApplicationType_IOS_RC: return "IOS_RC"
  case ApplicationType_IOS_BETA: return "IOS_BETA"
  case ApplicationType_IOS_ALPHA: return "IOS_ALPHA"
  case ApplicationType_ANDROID: return "ANDROID"
  case ApplicationType_ANDROID_RC: return "ANDROID_RC"
  case ApplicationType_ANDROID_BETA: return "ANDROID_BETA"
  case ApplicationType_ANDROID_ALPHA: return "ANDROID_ALPHA"
  case ApplicationType_WAP: return "WAP"
  case ApplicationType_WAP_RC: return "WAP_RC"
  case ApplicationType_WAP_BETA: return "WAP_BETA"
  case ApplicationType_WAP_ALPHA: return "WAP_ALPHA"
  case ApplicationType_BOT: return "BOT"
  case ApplicationType_BOT_RC: return "BOT_RC"
  case ApplicationType_BOT_BETA: return "BOT_BETA"
  case ApplicationType_BOT_ALPHA: return "BOT_ALPHA"
  case ApplicationType_WEB: return "WEB"
  case ApplicationType_WEB_RC: return "WEB_RC"
  case ApplicationType_WEB_BETA: return "WEB_BETA"
  case ApplicationType_WEB_ALPHA: return "WEB_ALPHA"
  case ApplicationType_DESKTOPWIN: return "DESKTOPWIN"
  case ApplicationType_DESKTOPWIN_RC: return "DESKTOPWIN_RC"
  case ApplicationType_DESKTOPWIN_BETA: return "DESKTOPWIN_BETA"
  case ApplicationType_DESKTOPWIN_ALPHA: return "DESKTOPWIN_ALPHA"
  case ApplicationType_DESKTOPMAC: return "DESKTOPMAC"
  case ApplicationType_DESKTOPMAC_RC: return "DESKTOPMAC_RC"
  case ApplicationType_DESKTOPMAC_BETA: return "DESKTOPMAC_BETA"
  case ApplicationType_DESKTOPMAC_ALPHA: return "DESKTOPMAC_ALPHA"
  case ApplicationType_CHANNELGW: return "CHANNELGW"
  case ApplicationType_CHANNELGW_RC: return "CHANNELGW_RC"
  case ApplicationType_CHANNELGW_BETA: return "CHANNELGW_BETA"
  case ApplicationType_CHANNELGW_ALPHA: return "CHANNELGW_ALPHA"
  case ApplicationType_CHANNELCP: return "CHANNELCP"
  case ApplicationType_CHANNELCP_RC: return "CHANNELCP_RC"
  case ApplicationType_CHANNELCP_BETA: return "CHANNELCP_BETA"
  case ApplicationType_CHANNELCP_ALPHA: return "CHANNELCP_ALPHA"
  case ApplicationType_WINPHONE: return "WINPHONE"
  case ApplicationType_WINPHONE_RC: return "WINPHONE_RC"
  case ApplicationType_WINPHONE_BETA: return "WINPHONE_BETA"
  case ApplicationType_WINPHONE_ALPHA: return "WINPHONE_ALPHA"
  case ApplicationType_BLACKBERRY: return "BLACKBERRY"
  case ApplicationType_BLACKBERRY_RC: return "BLACKBERRY_RC"
  case ApplicationType_BLACKBERRY_BETA: return "BLACKBERRY_BETA"
  case ApplicationType_BLACKBERRY_ALPHA: return "BLACKBERRY_ALPHA"
  case ApplicationType_WINMETRO: return "WINMETRO"
  case ApplicationType_WINMETRO_RC: return "WINMETRO_RC"
  case ApplicationType_WINMETRO_BETA: return "WINMETRO_BETA"
  case ApplicationType_WINMETRO_ALPHA: return "WINMETRO_ALPHA"
  case ApplicationType_S40: return "S40"
  case ApplicationType_S40_RC: return "S40_RC"
  case ApplicationType_S40_BETA: return "S40_BETA"
  case ApplicationType_S40_ALPHA: return "S40_ALPHA"
  case ApplicationType_CHRONO: return "CHRONO"
  case ApplicationType_CHRONO_RC: return "CHRONO_RC"
  case ApplicationType_CHRONO_BETA: return "CHRONO_BETA"
  case ApplicationType_CHRONO_ALPHA: return "CHRONO_ALPHA"
  case ApplicationType_TIZEN: return "TIZEN"
  case ApplicationType_TIZEN_RC: return "TIZEN_RC"
  case ApplicationType_TIZEN_BETA: return "TIZEN_BETA"
  case ApplicationType_TIZEN_ALPHA: return "TIZEN_ALPHA"
  case ApplicationType_VIRTUAL: return "VIRTUAL"
  case ApplicationType_FIREFOXOS: return "FIREFOXOS"
  case ApplicationType_FIREFOXOS_RC: return "FIREFOXOS_RC"
  case ApplicationType_FIREFOXOS_BETA: return "FIREFOXOS_BETA"
  case ApplicationType_FIREFOXOS_ALPHA: return "FIREFOXOS_ALPHA"
  case ApplicationType_IOSIPAD: return "IOSIPAD"
  case ApplicationType_IOSIPAD_RC: return "IOSIPAD_RC"
  case ApplicationType_IOSIPAD_BETA: return "IOSIPAD_BETA"
  case ApplicationType_IOSIPAD_ALPHA: return "IOSIPAD_ALPHA"
  case ApplicationType_BIZIOS: return "BIZIOS"
  case ApplicationType_BIZIOS_RC: return "BIZIOS_RC"
  case ApplicationType_BIZIOS_BETA: return "BIZIOS_BETA"
  case ApplicationType_BIZIOS_ALPHA: return "BIZIOS_ALPHA"
  case ApplicationType_BIZANDROID: return "BIZANDROID"
  case ApplicationType_BIZANDROID_RC: return "BIZANDROID_RC"
  case ApplicationType_BIZANDROID_BETA: return "BIZANDROID_BETA"
  case ApplicationType_BIZANDROID_ALPHA: return "BIZANDROID_ALPHA"
  case ApplicationType_BIZBOT: return "BIZBOT"
  case ApplicationType_BIZBOT_RC: return "BIZBOT_RC"
  case ApplicationType_BIZBOT_BETA: return "BIZBOT_BETA"
  case ApplicationType_BIZBOT_ALPHA: return "BIZBOT_ALPHA"
  case ApplicationType_CHROMEOS: return "CHROMEOS"
  case ApplicationType_CHROMEOS_RC: return "CHROMEOS_RC"
  case ApplicationType_CHROMEOS_BETA: return "CHROMEOS_BETA"
  case ApplicationType_CHROMEOS_ALPHA: return "CHROMEOS_ALPHA"
  case ApplicationType_ANDROIDLITE: return "ANDROIDLITE"
  case ApplicationType_ANDROIDLITE_RC: return "ANDROIDLITE_RC"
  case ApplicationType_ANDROIDLITE_BETA: return "ANDROIDLITE_BETA"
  case ApplicationType_ANDROIDLITE_ALPHA: return "ANDROIDLITE_ALPHA"
  case ApplicationType_WIN10: return "WIN10"
  case ApplicationType_WIN10_RC: return "WIN10_RC"
  case ApplicationType_WIN10_BETA: return "WIN10_BETA"
  case ApplicationType_WIN10_ALPHA: return "WIN10_ALPHA"
  case ApplicationType_BIZWEB: return "BIZWEB"
  case ApplicationType_BIZWEB_RC: return "BIZWEB_RC"
  case ApplicationType_BIZWEB_BETA: return "BIZWEB_BETA"
  case ApplicationType_BIZWEB_ALPHA: return "BIZWEB_ALPHA"
  case ApplicationType_DUMMYPRIMARY: return "DUMMYPRIMARY"
  case ApplicationType_DUMMYPRIMARY_RC: return "DUMMYPRIMARY_RC"
  case ApplicationType_DUMMYPRIMARY_BETA: return "DUMMYPRIMARY_BETA"
  case ApplicationType_DUMMYPRIMARY_ALPHA: return "DUMMYPRIMARY_ALPHA"
  case ApplicationType_SQUARE: return "SQUARE"
  case ApplicationType_SQUARE_RC: return "SQUARE_RC"
  case ApplicationType_SQUARE_BETA: return "SQUARE_BETA"
  case ApplicationType_SQUARE_ALPHA: return "SQUARE_ALPHA"
  case ApplicationType_INTERNAL: return "INTERNAL"
  case ApplicationType_INTERNAL_RC: return "INTERNAL_RC"
  case ApplicationType_INTERNAL_BETA: return "INTERNAL_BETA"
  case ApplicationType_INTERNAL_ALPHA: return "INTERNAL_ALPHA"
  case ApplicationType_CLOVAFRIENDS: return "CLOVAFRIENDS"
  case ApplicationType_CLOVAFRIENDS_RC: return "CLOVAFRIENDS_RC"
  case ApplicationType_CLOVAFRIENDS_BETA: return "CLOVAFRIENDS_BETA"
  case ApplicationType_CLOVAFRIENDS_ALPHA: return "CLOVAFRIENDS_ALPHA"
  case ApplicationType_WATCHOS: return "WATCHOS"
  case ApplicationType_WATCHOS_RC: return "WATCHOS_RC"
  case ApplicationType_WATCHOS_BETA: return "WATCHOS_BETA"
  case ApplicationType_WATCHOS_ALPHA: return "WATCHOS_ALPHA"
  }
  return "<UNSET>"
}

func ApplicationTypeFromString(s string) (ApplicationType, error) {
  switch s {
  case "IOS": return ApplicationType_IOS, nil 
  case "IOS_RC": return ApplicationType_IOS_RC, nil 
  case "IOS_BETA": return ApplicationType_IOS_BETA, nil 
  case "IOS_ALPHA": return ApplicationType_IOS_ALPHA, nil 
  case "ANDROID": return ApplicationType_ANDROID, nil 
  case "ANDROID_RC": return ApplicationType_ANDROID_RC, nil 
  case "ANDROID_BETA": return ApplicationType_ANDROID_BETA, nil 
  case "ANDROID_ALPHA": return ApplicationType_ANDROID_ALPHA, nil 
  case "WAP": return ApplicationType_WAP, nil 
  case "WAP_RC": return ApplicationType_WAP_RC, nil 
  case "WAP_BETA": return ApplicationType_WAP_BETA, nil 
  case "WAP_ALPHA": return ApplicationType_WAP_ALPHA, nil 
  case "BOT": return ApplicationType_BOT, nil 
  case "BOT_RC": return ApplicationType_BOT_RC, nil 
  case "BOT_BETA": return ApplicationType_BOT_BETA, nil 
  case "BOT_ALPHA": return ApplicationType_BOT_ALPHA, nil 
  case "WEB": return ApplicationType_WEB, nil 
  case "WEB_RC": return ApplicationType_WEB_RC, nil 
  case "WEB_BETA": return ApplicationType_WEB_BETA, nil 
  case "WEB_ALPHA": return ApplicationType_WEB_ALPHA, nil 
  case "DESKTOPWIN": return ApplicationType_DESKTOPWIN, nil 
  case "DESKTOPWIN_RC": return ApplicationType_DESKTOPWIN_RC, nil 
  case "DESKTOPWIN_BETA": return ApplicationType_DESKTOPWIN_BETA, nil 
  case "DESKTOPWIN_ALPHA": return ApplicationType_DESKTOPWIN_ALPHA, nil 
  case "DESKTOPMAC": return ApplicationType_DESKTOPMAC, nil 
  case "DESKTOPMAC_RC": return ApplicationType_DESKTOPMAC_RC, nil 
  case "DESKTOPMAC_BETA": return ApplicationType_DESKTOPMAC_BETA, nil 
  case "DESKTOPMAC_ALPHA": return ApplicationType_DESKTOPMAC_ALPHA, nil 
  case "CHANNELGW": return ApplicationType_CHANNELGW, nil 
  case "CHANNELGW_RC": return ApplicationType_CHANNELGW_RC, nil 
  case "CHANNELGW_BETA": return ApplicationType_CHANNELGW_BETA, nil 
  case "CHANNELGW_ALPHA": return ApplicationType_CHANNELGW_ALPHA, nil 
  case "CHANNELCP": return ApplicationType_CHANNELCP, nil 
  case "CHANNELCP_RC": return ApplicationType_CHANNELCP_RC, nil 
  case "CHANNELCP_BETA": return ApplicationType_CHANNELCP_BETA, nil 
  case "CHANNELCP_ALPHA": return ApplicationType_CHANNELCP_ALPHA, nil 
  case "WINPHONE": return ApplicationType_WINPHONE, nil 
  case "WINPHONE_RC": return ApplicationType_WINPHONE_RC, nil 
  case "WINPHONE_BETA": return ApplicationType_WINPHONE_BETA, nil 
  case "WINPHONE_ALPHA": return ApplicationType_WINPHONE_ALPHA, nil 
  case "BLACKBERRY": return ApplicationType_BLACKBERRY, nil 
  case "BLACKBERRY_RC": return ApplicationType_BLACKBERRY_RC, nil 
  case "BLACKBERRY_BETA": return ApplicationType_BLACKBERRY_BETA, nil 
  case "BLACKBERRY_ALPHA": return ApplicationType_BLACKBERRY_ALPHA, nil 
  case "WINMETRO": return ApplicationType_WINMETRO, nil 
  case "WINMETRO_RC": return ApplicationType_WINMETRO_RC, nil 
  case "WINMETRO_BETA": return ApplicationType_WINMETRO_BETA, nil 
  case "WINMETRO_ALPHA": return ApplicationType_WINMETRO_ALPHA, nil 
  case "S40": return ApplicationType_S40, nil 
  case "S40_RC": return ApplicationType_S40_RC, nil 
  case "S40_BETA": return ApplicationType_S40_BETA, nil 
  case "S40_ALPHA": return ApplicationType_S40_ALPHA, nil 
  case "CHRONO": return ApplicationType_CHRONO, nil 
  case "CHRONO_RC": return ApplicationType_CHRONO_RC, nil 
  case "CHRONO_BETA": return ApplicationType_CHRONO_BETA, nil 
  case "CHRONO_ALPHA": return ApplicationType_CHRONO_ALPHA, nil 
  case "TIZEN": return ApplicationType_TIZEN, nil 
  case "TIZEN_RC": return ApplicationType_TIZEN_RC, nil 
  case "TIZEN_BETA": return ApplicationType_TIZEN_BETA, nil 
  case "TIZEN_ALPHA": return ApplicationType_TIZEN_ALPHA, nil 
  case "VIRTUAL": return ApplicationType_VIRTUAL, nil 
  case "FIREFOXOS": return ApplicationType_FIREFOXOS, nil 
  case "FIREFOXOS_RC": return ApplicationType_FIREFOXOS_RC, nil 
  case "FIREFOXOS_BETA": return ApplicationType_FIREFOXOS_BETA, nil 
  case "FIREFOXOS_ALPHA": return ApplicationType_FIREFOXOS_ALPHA, nil 
  case "IOSIPAD": return ApplicationType_IOSIPAD, nil 
  case "IOSIPAD_RC": return ApplicationType_IOSIPAD_RC, nil 
  case "IOSIPAD_BETA": return ApplicationType_IOSIPAD_BETA, nil 
  case "IOSIPAD_ALPHA": return ApplicationType_IOSIPAD_ALPHA, nil 
  case "BIZIOS": return ApplicationType_BIZIOS, nil 
  case "BIZIOS_RC": return ApplicationType_BIZIOS_RC, nil 
  case "BIZIOS_BETA": return ApplicationType_BIZIOS_BETA, nil 
  case "BIZIOS_ALPHA": return ApplicationType_BIZIOS_ALPHA, nil 
  case "BIZANDROID": return ApplicationType_BIZANDROID, nil 
  case "BIZANDROID_RC": return ApplicationType_BIZANDROID_RC, nil 
  case "BIZANDROID_BETA": return ApplicationType_BIZANDROID_BETA, nil 
  case "BIZANDROID_ALPHA": return ApplicationType_BIZANDROID_ALPHA, nil 
  case "BIZBOT": return ApplicationType_BIZBOT, nil 
  case "BIZBOT_RC": return ApplicationType_BIZBOT_RC, nil 
  case "BIZBOT_BETA": return ApplicationType_BIZBOT_BETA, nil 
  case "BIZBOT_ALPHA": return ApplicationType_BIZBOT_ALPHA, nil 
  case "CHROMEOS": return ApplicationType_CHROMEOS, nil 
  case "CHROMEOS_RC": return ApplicationType_CHROMEOS_RC, nil 
  case "CHROMEOS_BETA": return ApplicationType_CHROMEOS_BETA, nil 
  case "CHROMEOS_ALPHA": return ApplicationType_CHROMEOS_ALPHA, nil 
  case "ANDROIDLITE": return ApplicationType_ANDROIDLITE, nil 
  case "ANDROIDLITE_RC": return ApplicationType_ANDROIDLITE_RC, nil 
  case "ANDROIDLITE_BETA": return ApplicationType_ANDROIDLITE_BETA, nil 
  case "ANDROIDLITE_ALPHA": return ApplicationType_ANDROIDLITE_ALPHA, nil 
  case "WIN10": return ApplicationType_WIN10, nil 
  case "WIN10_RC": return ApplicationType_WIN10_RC, nil 
  case "WIN10_BETA": return ApplicationType_WIN10_BETA, nil 
  case "WIN10_ALPHA": return ApplicationType_WIN10_ALPHA, nil 
  case "BIZWEB": return ApplicationType_BIZWEB, nil 
  case "BIZWEB_RC": return ApplicationType_BIZWEB_RC, nil 
  case "BIZWEB_BETA": return ApplicationType_BIZWEB_BETA, nil 
  case "BIZWEB_ALPHA": return ApplicationType_BIZWEB_ALPHA, nil 
  case "DUMMYPRIMARY": return ApplicationType_DUMMYPRIMARY, nil 
  case "DUMMYPRIMARY_RC": return ApplicationType_DUMMYPRIMARY_RC, nil 
  case "DUMMYPRIMARY_BETA": return ApplicationType_DUMMYPRIMARY_BETA, nil 
  case "DUMMYPRIMARY_ALPHA": return ApplicationType_DUMMYPRIMARY_ALPHA, nil 
  case "SQUARE": return ApplicationType_SQUARE, nil 
  case "SQUARE_RC": return ApplicationType_SQUARE_RC, nil 
  case "SQUARE_BETA": return ApplicationType_SQUARE_BETA, nil 
  case "SQUARE_ALPHA": return ApplicationType_SQUARE_ALPHA, nil 
  case "INTERNAL": return ApplicationType_INTERNAL, nil 
  case "INTERNAL_RC": return ApplicationType_INTERNAL_RC, nil 
  case "INTERNAL_BETA": return ApplicationType_INTERNAL_BETA, nil 
  case "INTERNAL_ALPHA": return ApplicationType_INTERNAL_ALPHA, nil 
  case "CLOVAFRIENDS": return ApplicationType_CLOVAFRIENDS, nil 
  case "CLOVAFRIENDS_RC": return ApplicationType_CLOVAFRIENDS_RC, nil 
  case "CLOVAFRIENDS_BETA": return ApplicationType_CLOVAFRIENDS_BETA, nil 
  case "CLOVAFRIENDS_ALPHA": return ApplicationType_CLOVAFRIENDS_ALPHA, nil 
  case "WATCHOS": return ApplicationType_WATCHOS, nil 
  case "WATCHOS_RC": return ApplicationType_WATCHOS_RC, nil 
  case "WATCHOS_BETA": return ApplicationType_WATCHOS_BETA, nil 
  case "WATCHOS_ALPHA": return ApplicationType_WATCHOS_ALPHA, nil 
  }
  return ApplicationType(0), fmt.Errorf("not a valid ApplicationType string")
}


func ApplicationTypePtr(v ApplicationType) *ApplicationType { return &v }

func (p ApplicationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ApplicationType) UnmarshalText(text []byte) error {
q, err := ApplicationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ApplicationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ApplicationType(v)
return nil
}

func (p * ApplicationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CarrierCode int64
const (
  CarrierCode_NOT_SPECIFIED CarrierCode = 0
  CarrierCode_JP_DOCOMO CarrierCode = 1
  CarrierCode_JP_AU CarrierCode = 2
  CarrierCode_JP_SOFTBANK CarrierCode = 3
  CarrierCode_KR_SKT CarrierCode = 17
  CarrierCode_KR_KT CarrierCode = 18
  CarrierCode_KR_LGT CarrierCode = 19
  CarrierCode_JP_DOCOMO_LINE CarrierCode = 4
  CarrierCode_JP_SOFTBANK_LINE CarrierCode = 5
  CarrierCode_JP_AU_LINE CarrierCode = 6
)

func (p CarrierCode) String() string {
  switch p {
  case CarrierCode_NOT_SPECIFIED: return "NOT_SPECIFIED"
  case CarrierCode_JP_DOCOMO: return "JP_DOCOMO"
  case CarrierCode_JP_AU: return "JP_AU"
  case CarrierCode_JP_SOFTBANK: return "JP_SOFTBANK"
  case CarrierCode_KR_SKT: return "KR_SKT"
  case CarrierCode_KR_KT: return "KR_KT"
  case CarrierCode_KR_LGT: return "KR_LGT"
  case CarrierCode_JP_DOCOMO_LINE: return "JP_DOCOMO_LINE"
  case CarrierCode_JP_SOFTBANK_LINE: return "JP_SOFTBANK_LINE"
  case CarrierCode_JP_AU_LINE: return "JP_AU_LINE"
  }
  return "<UNSET>"
}

func CarrierCodeFromString(s string) (CarrierCode, error) {
  switch s {
  case "NOT_SPECIFIED": return CarrierCode_NOT_SPECIFIED, nil 
  case "JP_DOCOMO": return CarrierCode_JP_DOCOMO, nil 
  case "JP_AU": return CarrierCode_JP_AU, nil 
  case "JP_SOFTBANK": return CarrierCode_JP_SOFTBANK, nil 
  case "KR_SKT": return CarrierCode_KR_SKT, nil 
  case "KR_KT": return CarrierCode_KR_KT, nil 
  case "KR_LGT": return CarrierCode_KR_LGT, nil 
  case "JP_DOCOMO_LINE": return CarrierCode_JP_DOCOMO_LINE, nil 
  case "JP_SOFTBANK_LINE": return CarrierCode_JP_SOFTBANK_LINE, nil 
  case "JP_AU_LINE": return CarrierCode_JP_AU_LINE, nil 
  }
  return CarrierCode(0), fmt.Errorf("not a valid CarrierCode string")
}


func CarrierCodePtr(v CarrierCode) *CarrierCode { return &v }

func (p CarrierCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CarrierCode) UnmarshalText(text []byte) error {
q, err := CarrierCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CarrierCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CarrierCode(v)
return nil
}

func (p * CarrierCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MediaType int64
const (
  MediaType_AUDIO MediaType = 1
  MediaType_VIDEO MediaType = 2
  MediaType_LIVE MediaType = 3
)

func (p MediaType) String() string {
  switch p {
  case MediaType_AUDIO: return "AUDIO"
  case MediaType_VIDEO: return "VIDEO"
  case MediaType_LIVE: return "LIVE"
  }
  return "<UNSET>"
}

func MediaTypeFromString(s string) (MediaType, error) {
  switch s {
  case "AUDIO": return MediaType_AUDIO, nil 
  case "VIDEO": return MediaType_VIDEO, nil 
  case "LIVE": return MediaType_LIVE, nil 
  }
  return MediaType(0), fmt.Errorf("not a valid MediaType string")
}


func MediaTypePtr(v MediaType) *MediaType { return &v }

func (p MediaType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MediaType) UnmarshalText(text []byte) error {
q, err := MediaTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MediaType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MediaType(v)
return nil
}

func (p * MediaType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContentType int64
const (
  ContentType_NONE ContentType = 0
  ContentType_IMAGE ContentType = 1
  ContentType_VIDEO ContentType = 2
  ContentType_AUDIO ContentType = 3
  ContentType_HTML ContentType = 4
  ContentType_PDF ContentType = 5
  ContentType_CALL ContentType = 6
  ContentType_STICKER ContentType = 7
  ContentType_PRESENCE ContentType = 8
  ContentType_GIFT ContentType = 9
  ContentType_GROUPBOARD ContentType = 10
  ContentType_APPLINK ContentType = 11
  ContentType_LINK ContentType = 12
  ContentType_CONTACT ContentType = 13
  ContentType_FILE ContentType = 14
  ContentType_LOCATION ContentType = 15
  ContentType_POSTNOTIFICATION ContentType = 16
  ContentType_RICH ContentType = 17
  ContentType_CHATEVENT ContentType = 18
  ContentType_MUSIC ContentType = 19
  ContentType_PAYMENT ContentType = 20
  ContentType_EXTIMAGE ContentType = 21
  ContentType_FLEX ContentType = 22
)

func (p ContentType) String() string {
  switch p {
  case ContentType_NONE: return "NONE"
  case ContentType_IMAGE: return "IMAGE"
  case ContentType_VIDEO: return "VIDEO"
  case ContentType_AUDIO: return "AUDIO"
  case ContentType_HTML: return "HTML"
  case ContentType_PDF: return "PDF"
  case ContentType_CALL: return "CALL"
  case ContentType_STICKER: return "STICKER"
  case ContentType_PRESENCE: return "PRESENCE"
  case ContentType_GIFT: return "GIFT"
  case ContentType_GROUPBOARD: return "GROUPBOARD"
  case ContentType_APPLINK: return "APPLINK"
  case ContentType_LINK: return "LINK"
  case ContentType_CONTACT: return "CONTACT"
  case ContentType_FILE: return "FILE"
  case ContentType_LOCATION: return "LOCATION"
  case ContentType_POSTNOTIFICATION: return "POSTNOTIFICATION"
  case ContentType_RICH: return "RICH"
  case ContentType_CHATEVENT: return "CHATEVENT"
  case ContentType_MUSIC: return "MUSIC"
  case ContentType_PAYMENT: return "PAYMENT"
  case ContentType_EXTIMAGE: return "EXTIMAGE"
  case ContentType_FLEX: return "FLEX"
  }
  return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
  switch s {
  case "NONE": return ContentType_NONE, nil 
  case "IMAGE": return ContentType_IMAGE, nil 
  case "VIDEO": return ContentType_VIDEO, nil 
  case "AUDIO": return ContentType_AUDIO, nil 
  case "HTML": return ContentType_HTML, nil 
  case "PDF": return ContentType_PDF, nil 
  case "CALL": return ContentType_CALL, nil 
  case "STICKER": return ContentType_STICKER, nil 
  case "PRESENCE": return ContentType_PRESENCE, nil 
  case "GIFT": return ContentType_GIFT, nil 
  case "GROUPBOARD": return ContentType_GROUPBOARD, nil 
  case "APPLINK": return ContentType_APPLINK, nil 
  case "LINK": return ContentType_LINK, nil 
  case "CONTACT": return ContentType_CONTACT, nil 
  case "FILE": return ContentType_FILE, nil 
  case "LOCATION": return ContentType_LOCATION, nil 
  case "POSTNOTIFICATION": return ContentType_POSTNOTIFICATION, nil 
  case "RICH": return ContentType_RICH, nil 
  case "CHATEVENT": return ContentType_CHATEVENT, nil 
  case "MUSIC": return ContentType_MUSIC, nil 
  case "PAYMENT": return ContentType_PAYMENT, nil 
  case "EXTIMAGE": return ContentType_EXTIMAGE, nil 
  case "FLEX": return ContentType_FLEX, nil 
  }
  return ContentType(0), fmt.Errorf("not a valid ContentType string")
}


func ContentTypePtr(v ContentType) *ContentType { return &v }

func (p ContentType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContentType) UnmarshalText(text []byte) error {
q, err := ContentTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContentType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContentType(v)
return nil
}

func (p * ContentType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UpdateNotificationType int64
const (
  UpdateNotificationType_APPLE_APNS UpdateNotificationType = 1
  UpdateNotificationType_GOOGLE_C2DM UpdateNotificationType = 2
  UpdateNotificationType_NHN_NNI UpdateNotificationType = 3
  UpdateNotificationType_SKT_AOM UpdateNotificationType = 4
  UpdateNotificationType_MS_MPNS UpdateNotificationType = 5
  UpdateNotificationType_RIM_BIS UpdateNotificationType = 6
  UpdateNotificationType_GOOGLE_GCM UpdateNotificationType = 7
  UpdateNotificationType_NOKIA_NNAPI UpdateNotificationType = 8
  UpdateNotificationType_TIZEN UpdateNotificationType = 9
  UpdateNotificationType_MOZILLA_SIMPLE UpdateNotificationType = 10
  UpdateNotificationType_LINE_BOT UpdateNotificationType = 17
  UpdateNotificationType_LINE_WAP UpdateNotificationType = 18
  UpdateNotificationType_APPLE_APNS_VOIP UpdateNotificationType = 19
  UpdateNotificationType_MS_WNS UpdateNotificationType = 20
  UpdateNotificationType_GOOGLE_FCM UpdateNotificationType = 21
  UpdateNotificationType_CLOVA UpdateNotificationType = 22
  UpdateNotificationType_CLOVA_VOIP UpdateNotificationType = 23
  UpdateNotificationType_HUAWEI_HCM UpdateNotificationType = 24
)

func (p UpdateNotificationType) String() string {
  switch p {
  case UpdateNotificationType_APPLE_APNS: return "APPLE_APNS"
  case UpdateNotificationType_GOOGLE_C2DM: return "GOOGLE_C2DM"
  case UpdateNotificationType_NHN_NNI: return "NHN_NNI"
  case UpdateNotificationType_SKT_AOM: return "SKT_AOM"
  case UpdateNotificationType_MS_MPNS: return "MS_MPNS"
  case UpdateNotificationType_RIM_BIS: return "RIM_BIS"
  case UpdateNotificationType_GOOGLE_GCM: return "GOOGLE_GCM"
  case UpdateNotificationType_NOKIA_NNAPI: return "NOKIA_NNAPI"
  case UpdateNotificationType_TIZEN: return "TIZEN"
  case UpdateNotificationType_MOZILLA_SIMPLE: return "MOZILLA_SIMPLE"
  case UpdateNotificationType_LINE_BOT: return "LINE_BOT"
  case UpdateNotificationType_LINE_WAP: return "LINE_WAP"
  case UpdateNotificationType_APPLE_APNS_VOIP: return "APPLE_APNS_VOIP"
  case UpdateNotificationType_MS_WNS: return "MS_WNS"
  case UpdateNotificationType_GOOGLE_FCM: return "GOOGLE_FCM"
  case UpdateNotificationType_CLOVA: return "CLOVA"
  case UpdateNotificationType_CLOVA_VOIP: return "CLOVA_VOIP"
  case UpdateNotificationType_HUAWEI_HCM: return "HUAWEI_HCM"
  }
  return "<UNSET>"
}

func UpdateNotificationTypeFromString(s string) (UpdateNotificationType, error) {
  switch s {
  case "APPLE_APNS": return UpdateNotificationType_APPLE_APNS, nil 
  case "GOOGLE_C2DM": return UpdateNotificationType_GOOGLE_C2DM, nil 
  case "NHN_NNI": return UpdateNotificationType_NHN_NNI, nil 
  case "SKT_AOM": return UpdateNotificationType_SKT_AOM, nil 
  case "MS_MPNS": return UpdateNotificationType_MS_MPNS, nil 
  case "RIM_BIS": return UpdateNotificationType_RIM_BIS, nil 
  case "GOOGLE_GCM": return UpdateNotificationType_GOOGLE_GCM, nil 
  case "NOKIA_NNAPI": return UpdateNotificationType_NOKIA_NNAPI, nil 
  case "TIZEN": return UpdateNotificationType_TIZEN, nil 
  case "MOZILLA_SIMPLE": return UpdateNotificationType_MOZILLA_SIMPLE, nil 
  case "LINE_BOT": return UpdateNotificationType_LINE_BOT, nil 
  case "LINE_WAP": return UpdateNotificationType_LINE_WAP, nil 
  case "APPLE_APNS_VOIP": return UpdateNotificationType_APPLE_APNS_VOIP, nil 
  case "MS_WNS": return UpdateNotificationType_MS_WNS, nil 
  case "GOOGLE_FCM": return UpdateNotificationType_GOOGLE_FCM, nil 
  case "CLOVA": return UpdateNotificationType_CLOVA, nil 
  case "CLOVA_VOIP": return UpdateNotificationType_CLOVA_VOIP, nil 
  case "HUAWEI_HCM": return UpdateNotificationType_HUAWEI_HCM, nil 
  }
  return UpdateNotificationType(0), fmt.Errorf("not a valid UpdateNotificationType string")
}


func UpdateNotificationTypePtr(v UpdateNotificationType) *UpdateNotificationType { return &v }

func (p UpdateNotificationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UpdateNotificationType) UnmarshalText(text []byte) error {
q, err := UpdateNotificationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UpdateNotificationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UpdateNotificationType(v)
return nil
}

func (p * UpdateNotificationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type VerificationResult_ int64
const (
  VerificationResult__FAILED VerificationResult_ = 0
  VerificationResult__OK_NOT_REGISTERED_YET VerificationResult_ = 1
  VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE VerificationResult_ = 2
  VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE VerificationResult_ = 3
)

func (p VerificationResult_) String() string {
  switch p {
  case VerificationResult__FAILED: return "FAILED"
  case VerificationResult__OK_NOT_REGISTERED_YET: return "OK_NOT_REGISTERED_YET"
  case VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE: return "OK_REGISTERED_WITH_SAME_DEVICE"
  case VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE: return "OK_REGISTERED_WITH_ANOTHER_DEVICE"
  }
  return "<UNSET>"
}

func VerificationResult_FromString(s string) (VerificationResult_, error) {
  switch s {
  case "FAILED": return VerificationResult__FAILED, nil 
  case "OK_NOT_REGISTERED_YET": return VerificationResult__OK_NOT_REGISTERED_YET, nil 
  case "OK_REGISTERED_WITH_SAME_DEVICE": return VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE, nil 
  case "OK_REGISTERED_WITH_ANOTHER_DEVICE": return VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE, nil 
  }
  return VerificationResult_(0), fmt.Errorf("not a valid VerificationResult_ string")
}


func VerificationResult_Ptr(v VerificationResult_) *VerificationResult_ { return &v }

func (p VerificationResult_) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *VerificationResult_) UnmarshalText(text []byte) error {
q, err := VerificationResult_FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *VerificationResult_) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = VerificationResult_(v)
return nil
}

func (p * VerificationResult_) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ToType int64
const (
  ToType_USER ToType = 0
  ToType_ROOM ToType = 1
  ToType_GROUP ToType = 2
  ToType_SQUARE ToType = 3
  ToType_SQUARE_CHAT ToType = 4
  ToType_SQUARE_MEMBER ToType = 5
  ToType_BOT ToType = 6
)

func (p ToType) String() string {
  switch p {
  case ToType_USER: return "USER"
  case ToType_ROOM: return "ROOM"
  case ToType_GROUP: return "GROUP"
  case ToType_SQUARE: return "SQUARE"
  case ToType_SQUARE_CHAT: return "SQUARE_CHAT"
  case ToType_SQUARE_MEMBER: return "SQUARE_MEMBER"
  case ToType_BOT: return "BOT"
  }
  return "<UNSET>"
}

func ToTypeFromString(s string) (ToType, error) {
  switch s {
  case "USER": return ToType_USER, nil 
  case "ROOM": return ToType_ROOM, nil 
  case "GROUP": return ToType_GROUP, nil 
  case "SQUARE": return ToType_SQUARE, nil 
  case "SQUARE_CHAT": return ToType_SQUARE_CHAT, nil 
  case "SQUARE_MEMBER": return ToType_SQUARE_MEMBER, nil 
  case "BOT": return ToType_BOT, nil 
  }
  return ToType(0), fmt.Errorf("not a valid ToType string")
}


func ToTypePtr(v ToType) *ToType { return &v }

func (p ToType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ToType) UnmarshalText(text []byte) error {
q, err := ToTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ToType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ToType(v)
return nil
}

func (p * ToType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LocationProvider int64
const (
  LocationProvider_GOOGLE LocationProvider = 0
  LocationProvider_BAIDU LocationProvider = 1
  LocationProvider_FOURSQUARE LocationProvider = 2
)

func (p LocationProvider) String() string {
  switch p {
  case LocationProvider_GOOGLE: return "GOOGLE"
  case LocationProvider_BAIDU: return "BAIDU"
  case LocationProvider_FOURSQUARE: return "FOURSQUARE"
  }
  return "<UNSET>"
}

func LocationProviderFromString(s string) (LocationProvider, error) {
  switch s {
  case "GOOGLE": return LocationProvider_GOOGLE, nil 
  case "BAIDU": return LocationProvider_BAIDU, nil 
  case "FOURSQUARE": return LocationProvider_FOURSQUARE, nil 
  }
  return LocationProvider(0), fmt.Errorf("not a valid LocationProvider string")
}


func LocationProviderPtr(v LocationProvider) *LocationProvider { return &v }

func (p LocationProvider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LocationProvider) UnmarshalText(text []byte) error {
q, err := LocationProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LocationProvider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LocationProvider(v)
return nil
}

func (p * LocationProvider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MessageRelationType int64
const (
  MessageRelationType_FORWARD MessageRelationType = 0
  MessageRelationType_AUTO_REPLY MessageRelationType = 1
  MessageRelationType_SUBORDINATE MessageRelationType = 2
  MessageRelationType_REPLY MessageRelationType = 3
)

func (p MessageRelationType) String() string {
  switch p {
  case MessageRelationType_FORWARD: return "FORWARD"
  case MessageRelationType_AUTO_REPLY: return "AUTO_REPLY"
  case MessageRelationType_SUBORDINATE: return "SUBORDINATE"
  case MessageRelationType_REPLY: return "REPLY"
  }
  return "<UNSET>"
}

func MessageRelationTypeFromString(s string) (MessageRelationType, error) {
  switch s {
  case "FORWARD": return MessageRelationType_FORWARD, nil 
  case "AUTO_REPLY": return MessageRelationType_AUTO_REPLY, nil 
  case "SUBORDINATE": return MessageRelationType_SUBORDINATE, nil 
  case "REPLY": return MessageRelationType_REPLY, nil 
  }
  return MessageRelationType(0), fmt.Errorf("not a valid MessageRelationType string")
}


func MessageRelationTypePtr(v MessageRelationType) *MessageRelationType { return &v }

func (p MessageRelationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageRelationType) UnmarshalText(text []byte) error {
q, err := MessageRelationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageRelationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageRelationType(v)
return nil
}

func (p * MessageRelationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type RelatedMessageServiceCode int64
const (
  RelatedMessageServiceCode_UNKNOWN RelatedMessageServiceCode = 0
  RelatedMessageServiceCode_TALK RelatedMessageServiceCode = 1
  RelatedMessageServiceCode_SQUARE RelatedMessageServiceCode = 2
)

func (p RelatedMessageServiceCode) String() string {
  switch p {
  case RelatedMessageServiceCode_UNKNOWN: return "UNKNOWN"
  case RelatedMessageServiceCode_TALK: return "TALK"
  case RelatedMessageServiceCode_SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func RelatedMessageServiceCodeFromString(s string) (RelatedMessageServiceCode, error) {
  switch s {
  case "UNKNOWN": return RelatedMessageServiceCode_UNKNOWN, nil 
  case "TALK": return RelatedMessageServiceCode_TALK, nil 
  case "SQUARE": return RelatedMessageServiceCode_SQUARE, nil 
  }
  return RelatedMessageServiceCode(0), fmt.Errorf("not a valid RelatedMessageServiceCode string")
}


func RelatedMessageServiceCodePtr(v RelatedMessageServiceCode) *RelatedMessageServiceCode { return &v }

func (p RelatedMessageServiceCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RelatedMessageServiceCode) UnmarshalText(text []byte) error {
q, err := RelatedMessageServiceCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RelatedMessageServiceCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RelatedMessageServiceCode(v)
return nil
}

func (p * RelatedMessageServiceCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AppExtensionType int64
const (
  AppExtensionType_SIRI AppExtensionType = 1
  AppExtensionType_GOOGLE_ASSISTANT AppExtensionType = 2
)

func (p AppExtensionType) String() string {
  switch p {
  case AppExtensionType_SIRI: return "SIRI"
  case AppExtensionType_GOOGLE_ASSISTANT: return "GOOGLE_ASSISTANT"
  }
  return "<UNSET>"
}

func AppExtensionTypeFromString(s string) (AppExtensionType, error) {
  switch s {
  case "SIRI": return AppExtensionType_SIRI, nil 
  case "GOOGLE_ASSISTANT": return AppExtensionType_GOOGLE_ASSISTANT, nil 
  }
  return AppExtensionType(0), fmt.Errorf("not a valid AppExtensionType string")
}


func AppExtensionTypePtr(v AppExtensionType) *AppExtensionType { return &v }

func (p AppExtensionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AppExtensionType) UnmarshalText(text []byte) error {
q, err := AppExtensionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AppExtensionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AppExtensionType(v)
return nil
}

func (p * AppExtensionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProtoCall int64
const (
  ProtoCall_STANDARD ProtoCall = 1
  ProtoCall_CONSTELLA ProtoCall = 2
)

func (p ProtoCall) String() string {
  switch p {
  case ProtoCall_STANDARD: return "STANDARD"
  case ProtoCall_CONSTELLA: return "CONSTELLA"
  }
  return "<UNSET>"
}

func ProtoCallFromString(s string) (ProtoCall, error) {
  switch s {
  case "STANDARD": return ProtoCall_STANDARD, nil 
  case "CONSTELLA": return ProtoCall_CONSTELLA, nil 
  }
  return ProtoCall(0), fmt.Errorf("not a valid ProtoCall string")
}


func ProtoCallPtr(v ProtoCall) *ProtoCall { return &v }

func (p ProtoCall) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProtoCall) UnmarshalText(text []byte) error {
q, err := ProtoCallFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProtoCall) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProtoCall(v)
return nil
}

func (p * ProtoCall) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Attr int64
const (
  Attr_ALL Attr = 511
  Attr_EMAIL Attr = 1
  Attr_DISPLAY_NAME Attr = 2
  Attr_PHONETIC_NAME Attr = 4
  Attr_PICTURE Attr = 8
  Attr_STATUS_MESSAGE Attr = 16
  Attr_ALLOW_SEARCH_BY_USERID Attr = 32
  Attr_ALLOW_SEARCH_BY_EMAIL Attr = 64
  Attr_BUDDY_STATUS Attr = 128
  Attr_MUSIC_PROFILE Attr = 256
  Attr_AVATAR_PROFILE Attr = 512
)

func (p Attr) String() string {
  switch p {
  case Attr_ALL: return "ALL"
  case Attr_EMAIL: return "EMAIL"
  case Attr_DISPLAY_NAME: return "DISPLAY_NAME"
  case Attr_PHONETIC_NAME: return "PHONETIC_NAME"
  case Attr_PICTURE: return "PICTURE"
  case Attr_STATUS_MESSAGE: return "STATUS_MESSAGE"
  case Attr_ALLOW_SEARCH_BY_USERID: return "ALLOW_SEARCH_BY_USERID"
  case Attr_ALLOW_SEARCH_BY_EMAIL: return "ALLOW_SEARCH_BY_EMAIL"
  case Attr_BUDDY_STATUS: return "BUDDY_STATUS"
  case Attr_MUSIC_PROFILE: return "MUSIC_PROFILE"
  case Attr_AVATAR_PROFILE: return "AVATAR_PROFILE"
  }
  return "<UNSET>"
}

func AttrFromString(s string) (Attr, error) {
  switch s {
  case "ALL": return Attr_ALL, nil 
  case "EMAIL": return Attr_EMAIL, nil 
  case "DISPLAY_NAME": return Attr_DISPLAY_NAME, nil 
  case "PHONETIC_NAME": return Attr_PHONETIC_NAME, nil 
  case "PICTURE": return Attr_PICTURE, nil 
  case "STATUS_MESSAGE": return Attr_STATUS_MESSAGE, nil 
  case "ALLOW_SEARCH_BY_USERID": return Attr_ALLOW_SEARCH_BY_USERID, nil 
  case "ALLOW_SEARCH_BY_EMAIL": return Attr_ALLOW_SEARCH_BY_EMAIL, nil 
  case "BUDDY_STATUS": return Attr_BUDDY_STATUS, nil 
  case "MUSIC_PROFILE": return Attr_MUSIC_PROFILE, nil 
  case "AVATAR_PROFILE": return Attr_AVATAR_PROFILE, nil 
  }
  return Attr(0), fmt.Errorf("not a valid Attr string")
}


func AttrPtr(v Attr) *Attr { return &v }

func (p Attr) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Attr) UnmarshalText(text []byte) error {
q, err := AttrFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Attr) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Attr(v)
return nil
}

func (p * Attr) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FeatureType int64
const (
  FeatureType_OBS_VIDEO FeatureType = 1
  FeatureType_OBS_GENERAL FeatureType = 2
  FeatureType_OBS_RINGBACK_TONE FeatureType = 3
)

func (p FeatureType) String() string {
  switch p {
  case FeatureType_OBS_VIDEO: return "OBS_VIDEO"
  case FeatureType_OBS_GENERAL: return "OBS_GENERAL"
  case FeatureType_OBS_RINGBACK_TONE: return "OBS_RINGBACK_TONE"
  }
  return "<UNSET>"
}

func FeatureTypeFromString(s string) (FeatureType, error) {
  switch s {
  case "OBS_VIDEO": return FeatureType_OBS_VIDEO, nil 
  case "OBS_GENERAL": return FeatureType_OBS_GENERAL, nil 
  case "OBS_RINGBACK_TONE": return FeatureType_OBS_RINGBACK_TONE, nil 
  }
  return FeatureType(0), fmt.Errorf("not a valid FeatureType string")
}


func FeatureTypePtr(v FeatureType) *FeatureType { return &v }

func (p FeatureType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FeatureType) UnmarshalText(text []byte) error {
q, err := FeatureTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FeatureType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FeatureType(v)
return nil
}

func (p * FeatureType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OpType int64
const (
  OpType_END_OF_OPERATION OpType = 0
  OpType_UPDATE_PROFILE OpType = 1
  OpType_UPDATE_SETTINGS OpType = 36
  OpType_NOTIFIED_UPDATE_PROFILE OpType = 2
  OpType_REGISTER_USERID OpType = 3
  OpType_ADD_CONTACT OpType = 4
  OpType_NOTIFIED_ADD_CONTACT OpType = 5
  OpType_BLOCK_CONTACT OpType = 6
  OpType_UNBLOCK_CONTACT OpType = 7
  OpType_NOTIFIED_RECOMMEND_CONTACT OpType = 8
  OpType_CREATE_GROUP OpType = 9
  OpType_UPDATE_GROUP OpType = 10
  OpType_NOTIFIED_UPDATE_GROUP OpType = 11
  OpType_INVITE_INTO_GROUP OpType = 12
  OpType_NOTIFIED_INVITE_INTO_GROUP OpType = 13
  OpType_CANCEL_INVITATION_GROUP OpType = 31
  OpType_NOTIFIED_CANCEL_INVITATION_GROUP OpType = 32
  OpType_LEAVE_GROUP OpType = 14
  OpType_NOTIFIED_LEAVE_GROUP OpType = 15
  OpType_ACCEPT_GROUP_INVITATION OpType = 16
  OpType_NOTIFIED_ACCEPT_GROUP_INVITATION OpType = 17
  OpType_REJECT_GROUP_INVITATION OpType = 34
  OpType_NOTIFIED_REJECT_GROUP_INVITATION OpType = 35
  OpType_KICKOUT__fromGROUP OpType = 18
  OpType_NOTIFIED_KICKOUT__fromGROUP OpType = 19
  OpType_CREATE_ROOM OpType = 20
  OpType_INVITE_INTO_ROOM OpType = 21
  OpType_NOTIFIED_INVITE_INTO_ROOM OpType = 22
  OpType_LEAVE_ROOM OpType = 23
  OpType_NOTIFIED_LEAVE_ROOM OpType = 24
  OpType_SEND_MESSAGE OpType = 25
  OpType_RECEIVE_MESSAGE OpType = 26
  OpType_SEND_MESSAGE_RECEIPT OpType = 27
  OpType_RECEIVE_MESSAGE_RECEIPT OpType = 28
  OpType_SEND_CONTENT_RECEIPT OpType = 29
  OpType_SEND_CHAT_CHECKED OpType = 40
  OpType_SEND_CHAT_REMOVED OpType = 41
  OpType_RECEIVE_ANNOUNCEMENT OpType = 30
  OpType_INVITE_VIA_EMAIL OpType = 38
  OpType_NOTIFIED_REGISTER_USER OpType = 37
  OpType_NOTIFIED_UNREGISTER_USER OpType = 33
  OpType_NOTIFIED_REQUEST_RECOVERY OpType = 39
  OpType_NOTIFIED_FORCE_SYNC OpType = 42
  OpType_SEND_CONTENT OpType = 43
  OpType_SEND_MESSAGE_MYHOME OpType = 44
  OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW OpType = 45
  OpType_REMOVE_ALL_MESSAGES OpType = 46
  OpType_NOTIFIED_UPDATE_PURCHASES OpType = 47
  OpType_DUMMY OpType = 48
  OpType_UPDATE_CONTACT OpType = 49
  OpType_NOTIFIED_RECEIVED_CALL OpType = 50
  OpType_CANCEL_CALL OpType = 51
  OpType_NOTIFIED_REDIRECT OpType = 52
  OpType_NOTIFIED_CHANNEL_SYNC OpType = 53
  OpType_FAILED_SEND_MESSAGE OpType = 54
  OpType_NOTIFIED_READ_MESSAGE OpType = 55
  OpType_FAILED_EMAIL_CONFIRMATION OpType = 56
  OpType_NOTIFIED_PUSH_NOTICENTER_ITEM OpType = 59
  OpType_NOTIFIED_CHAT_CONTENT OpType = 58
  OpType_NOTIFIED_JOIN_CHAT OpType = 60
  OpType_NOTIFIED_LEAVE_CHAT OpType = 61
  OpType_NOTIFIED_TYPING OpType = 62
  OpType_FRIEND_REQUEST_ACCEPTED OpType = 63
  OpType_DESTROY_MESSAGE OpType = 64
  OpType_NOTIFIED_DESTROY_MESSAGE OpType = 65
  OpType_UPDATE_PUBLICKEYCHAIN OpType = 66
  OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN OpType = 67
  OpType_NOTIFIED_BLOCK_CONTACT OpType = 68
  OpType_NOTIFIED_UNBLOCK_CONTACT OpType = 69
  OpType_UPDATE_GROUPPREFERENCE OpType = 70
  OpType_NOTIFIED_PAYMENT_EVENT OpType = 71
  OpType_REGISTER_E2EE_PUBLICKEY OpType = 72
  OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ OpType = 73
  OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP OpType = 74
  OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ OpType = 75
  OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP OpType = 76
  OpType_NOTIFIED_E2EE_KEY_UPDATE OpType = 77
  OpType_NOTIFIED_BUDDY_UPDATE_PROFILE OpType = 78
  OpType_NOTIFIED_UPDATE_LINEAT_TABS OpType = 79
  OpType_UPDATE_ROOM OpType = 80
  OpType_NOTIFIED_BEACON_DETECTED OpType = 81
  OpType_UPDATE_EXTENDED_PROFILE OpType = 82
  OpType_ADD_FOLLOW OpType = 83
  OpType_NOTIFIED_ADD_FOLLOW OpType = 84
  OpType_DELETE_FOLLOW OpType = 85
  OpType_NOTIFIED_DELETE_FOLLOW OpType = 86
  OpType_UPDATE_TIMELINE_SETTINGS OpType = 87
  OpType_NOTIFIED_FRIEND_REQUEST OpType = 88
  OpType_UPDATE_RINGBACK_TONE OpType = 89
  OpType_NOTIFIED_POSTBACK OpType = 90
  OpType_RECEIVE_READ_WATERMARK OpType = 91
  OpType_NOTIFIED_MESSAGE_DELIVERED OpType = 92
  OpType_NOTIFIED_UPDATE_CHAT_BAR OpType = 93
  OpType_NOTIFIED_CHATAPP_INSTALLED OpType = 94
  OpType_NOTIFIED_CHATAPP_UPDATED OpType = 95
  OpType_NOTIFIED_CHATAPP_NEW_MARK OpType = 96
  OpType_NOTIFIED_CHATAPP_DELETED OpType = 97
  OpType_NOTIFIED_CHATAPP_SYNC OpType = 98
  OpType_NOTIFIED_UPDATE_MESSAGE OpType = 99
  OpType_UPDATE_CHATROOMBGM OpType = 100
  OpType_NOTIFIED_UPDATE_CHATROOMBGM OpType = 101
  OpType_UPDATE_RINGTONE OpType = 102
  OpType_UPDATE_USER_SETTINGS OpType = 118
  OpType_NOTIFIED_UPDATE_STATUS_BAR OpType = 119
  OpType_CREATE_CHAT OpType = 120
  OpType_UPDATE_CHAT OpType = 121
  OpType_NOTIFIED_UPDATE_CHAT OpType = 122
  OpType_INVITE_INTO_CHAT OpType = 123
  OpType_NOTIFIED_INVITE_INTO_CHAT OpType = 124
  OpType_CANCEL_CHAT_INVITATION OpType = 125
  OpType_NOTIFIED_CANCEL_CHAT_INVITATION OpType = 126
  OpType_DELETE_SELF__fromCHAT OpType = 127
  OpType_NOTIFIED_DELETE_SELF__fromCHAT OpType = 128
  OpType_ACCEPT_CHAT_INVITATION OpType = 129
  OpType_NOTIFIED_ACCEPT_CHAT_INVITATION OpType = 130
  OpType_REJECT_CHAT_INVITATION OpType = 131
  OpType_DELETE_OTHER__fromCHAT OpType = 132
  OpType_NOTIFIED_DELETE_OTHER__fromCHAT OpType = 133
)

func (p OpType) String() string {
  switch p {
  case OpType_END_OF_OPERATION: return "END_OF_OPERATION"
  case OpType_UPDATE_PROFILE: return "UPDATE_PROFILE"
  case OpType_UPDATE_SETTINGS: return "UPDATE_SETTINGS"
  case OpType_NOTIFIED_UPDATE_PROFILE: return "NOTIFIED_UPDATE_PROFILE"
  case OpType_REGISTER_USERID: return "REGISTER_USERID"
  case OpType_ADD_CONTACT: return "ADD_CONTACT"
  case OpType_NOTIFIED_ADD_CONTACT: return "NOTIFIED_ADD_CONTACT"
  case OpType_BLOCK_CONTACT: return "BLOCK_CONTACT"
  case OpType_UNBLOCK_CONTACT: return "UNBLOCK_CONTACT"
  case OpType_NOTIFIED_RECOMMEND_CONTACT: return "NOTIFIED_RECOMMEND_CONTACT"
  case OpType_CREATE_GROUP: return "CREATE_GROUP"
  case OpType_UPDATE_GROUP: return "UPDATE_GROUP"
  case OpType_NOTIFIED_UPDATE_GROUP: return "NOTIFIED_UPDATE_GROUP"
  case OpType_INVITE_INTO_GROUP: return "INVITE_INTO_GROUP"
  case OpType_NOTIFIED_INVITE_INTO_GROUP: return "NOTIFIED_INVITE_INTO_GROUP"
  case OpType_CANCEL_INVITATION_GROUP: return "CANCEL_INVITATION_GROUP"
  case OpType_NOTIFIED_CANCEL_INVITATION_GROUP: return "NOTIFIED_CANCEL_INVITATION_GROUP"
  case OpType_LEAVE_GROUP: return "LEAVE_GROUP"
  case OpType_NOTIFIED_LEAVE_GROUP: return "NOTIFIED_LEAVE_GROUP"
  case OpType_ACCEPT_GROUP_INVITATION: return "ACCEPT_GROUP_INVITATION"
  case OpType_NOTIFIED_ACCEPT_GROUP_INVITATION: return "NOTIFIED_ACCEPT_GROUP_INVITATION"
  case OpType_REJECT_GROUP_INVITATION: return "REJECT_GROUP_INVITATION"
  case OpType_NOTIFIED_REJECT_GROUP_INVITATION: return "NOTIFIED_REJECT_GROUP_INVITATION"
  case OpType_KICKOUT__fromGROUP: return "KICKOUT__fromGROUP"
  case OpType_NOTIFIED_KICKOUT__fromGROUP: return "NOTIFIED_KICKOUT__fromGROUP"
  case OpType_CREATE_ROOM: return "CREATE_ROOM"
  case OpType_INVITE_INTO_ROOM: return "INVITE_INTO_ROOM"
  case OpType_NOTIFIED_INVITE_INTO_ROOM: return "NOTIFIED_INVITE_INTO_ROOM"
  case OpType_LEAVE_ROOM: return "LEAVE_ROOM"
  case OpType_NOTIFIED_LEAVE_ROOM: return "NOTIFIED_LEAVE_ROOM"
  case OpType_SEND_MESSAGE: return "SEND_MESSAGE"
  case OpType_RECEIVE_MESSAGE: return "RECEIVE_MESSAGE"
  case OpType_SEND_MESSAGE_RECEIPT: return "SEND_MESSAGE_RECEIPT"
  case OpType_RECEIVE_MESSAGE_RECEIPT: return "RECEIVE_MESSAGE_RECEIPT"
  case OpType_SEND_CONTENT_RECEIPT: return "SEND_CONTENT_RECEIPT"
  case OpType_SEND_CHAT_CHECKED: return "SEND_CHAT_CHECKED"
  case OpType_SEND_CHAT_REMOVED: return "SEND_CHAT_REMOVED"
  case OpType_RECEIVE_ANNOUNCEMENT: return "RECEIVE_ANNOUNCEMENT"
  case OpType_INVITE_VIA_EMAIL: return "INVITE_VIA_EMAIL"
  case OpType_NOTIFIED_REGISTER_USER: return "NOTIFIED_REGISTER_USER"
  case OpType_NOTIFIED_UNREGISTER_USER: return "NOTIFIED_UNREGISTER_USER"
  case OpType_NOTIFIED_REQUEST_RECOVERY: return "NOTIFIED_REQUEST_RECOVERY"
  case OpType_NOTIFIED_FORCE_SYNC: return "NOTIFIED_FORCE_SYNC"
  case OpType_SEND_CONTENT: return "SEND_CONTENT"
  case OpType_SEND_MESSAGE_MYHOME: return "SEND_MESSAGE_MYHOME"
  case OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW: return "NOTIFIED_UPDATE_CONTENT_PREVIEW"
  case OpType_REMOVE_ALL_MESSAGES: return "REMOVE_ALL_MESSAGES"
  case OpType_NOTIFIED_UPDATE_PURCHASES: return "NOTIFIED_UPDATE_PURCHASES"
  case OpType_DUMMY: return "DUMMY"
  case OpType_UPDATE_CONTACT: return "UPDATE_CONTACT"
  case OpType_NOTIFIED_RECEIVED_CALL: return "NOTIFIED_RECEIVED_CALL"
  case OpType_CANCEL_CALL: return "CANCEL_CALL"
  case OpType_NOTIFIED_REDIRECT: return "NOTIFIED_REDIRECT"
  case OpType_NOTIFIED_CHANNEL_SYNC: return "NOTIFIED_CHANNEL_SYNC"
  case OpType_FAILED_SEND_MESSAGE: return "FAILED_SEND_MESSAGE"
  case OpType_NOTIFIED_READ_MESSAGE: return "NOTIFIED_READ_MESSAGE"
  case OpType_FAILED_EMAIL_CONFIRMATION: return "FAILED_EMAIL_CONFIRMATION"
  case OpType_NOTIFIED_PUSH_NOTICENTER_ITEM: return "NOTIFIED_PUSH_NOTICENTER_ITEM"
  case OpType_NOTIFIED_CHAT_CONTENT: return "NOTIFIED_CHAT_CONTENT"
  case OpType_NOTIFIED_JOIN_CHAT: return "NOTIFIED_JOIN_CHAT"
  case OpType_NOTIFIED_LEAVE_CHAT: return "NOTIFIED_LEAVE_CHAT"
  case OpType_NOTIFIED_TYPING: return "NOTIFIED_TYPING"
  case OpType_FRIEND_REQUEST_ACCEPTED: return "FRIEND_REQUEST_ACCEPTED"
  case OpType_DESTROY_MESSAGE: return "DESTROY_MESSAGE"
  case OpType_NOTIFIED_DESTROY_MESSAGE: return "NOTIFIED_DESTROY_MESSAGE"
  case OpType_UPDATE_PUBLICKEYCHAIN: return "UPDATE_PUBLICKEYCHAIN"
  case OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN: return "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
  case OpType_NOTIFIED_BLOCK_CONTACT: return "NOTIFIED_BLOCK_CONTACT"
  case OpType_NOTIFIED_UNBLOCK_CONTACT: return "NOTIFIED_UNBLOCK_CONTACT"
  case OpType_UPDATE_GROUPPREFERENCE: return "UPDATE_GROUPPREFERENCE"
  case OpType_NOTIFIED_PAYMENT_EVENT: return "NOTIFIED_PAYMENT_EVENT"
  case OpType_REGISTER_E2EE_PUBLICKEY: return "REGISTER_E2EE_PUBLICKEY"
  case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ: return "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
  case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP: return "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
  case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ: return "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
  case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP: return "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
  case OpType_NOTIFIED_E2EE_KEY_UPDATE: return "NOTIFIED_E2EE_KEY_UPDATE"
  case OpType_NOTIFIED_BUDDY_UPDATE_PROFILE: return "NOTIFIED_BUDDY_UPDATE_PROFILE"
  case OpType_NOTIFIED_UPDATE_LINEAT_TABS: return "NOTIFIED_UPDATE_LINEAT_TABS"
  case OpType_UPDATE_ROOM: return "UPDATE_ROOM"
  case OpType_NOTIFIED_BEACON_DETECTED: return "NOTIFIED_BEACON_DETECTED"
  case OpType_UPDATE_EXTENDED_PROFILE: return "UPDATE_EXTENDED_PROFILE"
  case OpType_ADD_FOLLOW: return "ADD_FOLLOW"
  case OpType_NOTIFIED_ADD_FOLLOW: return "NOTIFIED_ADD_FOLLOW"
  case OpType_DELETE_FOLLOW: return "DELETE_FOLLOW"
  case OpType_NOTIFIED_DELETE_FOLLOW: return "NOTIFIED_DELETE_FOLLOW"
  case OpType_UPDATE_TIMELINE_SETTINGS: return "UPDATE_TIMELINE_SETTINGS"
  case OpType_NOTIFIED_FRIEND_REQUEST: return "NOTIFIED_FRIEND_REQUEST"
  case OpType_UPDATE_RINGBACK_TONE: return "UPDATE_RINGBACK_TONE"
  case OpType_NOTIFIED_POSTBACK: return "NOTIFIED_POSTBACK"
  case OpType_RECEIVE_READ_WATERMARK: return "RECEIVE_READ_WATERMARK"
  case OpType_NOTIFIED_MESSAGE_DELIVERED: return "NOTIFIED_MESSAGE_DELIVERED"
  case OpType_NOTIFIED_UPDATE_CHAT_BAR: return "NOTIFIED_UPDATE_CHAT_BAR"
  case OpType_NOTIFIED_CHATAPP_INSTALLED: return "NOTIFIED_CHATAPP_INSTALLED"
  case OpType_NOTIFIED_CHATAPP_UPDATED: return "NOTIFIED_CHATAPP_UPDATED"
  case OpType_NOTIFIED_CHATAPP_NEW_MARK: return "NOTIFIED_CHATAPP_NEW_MARK"
  case OpType_NOTIFIED_CHATAPP_DELETED: return "NOTIFIED_CHATAPP_DELETED"
  case OpType_NOTIFIED_CHATAPP_SYNC: return "NOTIFIED_CHATAPP_SYNC"
  case OpType_NOTIFIED_UPDATE_MESSAGE: return "NOTIFIED_UPDATE_MESSAGE"
  case OpType_UPDATE_CHATROOMBGM: return "UPDATE_CHATROOMBGM"
  case OpType_NOTIFIED_UPDATE_CHATROOMBGM: return "NOTIFIED_UPDATE_CHATROOMBGM"
  case OpType_UPDATE_RINGTONE: return "UPDATE_RINGTONE"
  case OpType_UPDATE_USER_SETTINGS: return "UPDATE_USER_SETTINGS"
  case OpType_NOTIFIED_UPDATE_STATUS_BAR: return "NOTIFIED_UPDATE_STATUS_BAR"
  case OpType_CREATE_CHAT: return "CREATE_CHAT"
  case OpType_UPDATE_CHAT: return "UPDATE_CHAT"
  case OpType_NOTIFIED_UPDATE_CHAT: return "NOTIFIED_UPDATE_CHAT"
  case OpType_INVITE_INTO_CHAT: return "INVITE_INTO_CHAT"
  case OpType_NOTIFIED_INVITE_INTO_CHAT: return "NOTIFIED_INVITE_INTO_CHAT"
  case OpType_CANCEL_CHAT_INVITATION: return "CANCEL_CHAT_INVITATION"
  case OpType_NOTIFIED_CANCEL_CHAT_INVITATION: return "NOTIFIED_CANCEL_CHAT_INVITATION"
  case OpType_DELETE_SELF__fromCHAT: return "DELETE_SELF__fromCHAT"
  case OpType_NOTIFIED_DELETE_SELF__fromCHAT: return "NOTIFIED_DELETE_SELF__fromCHAT"
  case OpType_ACCEPT_CHAT_INVITATION: return "ACCEPT_CHAT_INVITATION"
  case OpType_NOTIFIED_ACCEPT_CHAT_INVITATION: return "NOTIFIED_ACCEPT_CHAT_INVITATION"
  case OpType_REJECT_CHAT_INVITATION: return "REJECT_CHAT_INVITATION"
  case OpType_DELETE_OTHER__fromCHAT: return "DELETE_OTHER__fromCHAT"
  case OpType_NOTIFIED_DELETE_OTHER__fromCHAT: return "NOTIFIED_DELETE_OTHER__fromCHAT"
  }
  return "<UNSET>"
}

func OpTypeFromString(s string) (OpType, error) {
  switch s {
  case "END_OF_OPERATION": return OpType_END_OF_OPERATION, nil 
  case "UPDATE_PROFILE": return OpType_UPDATE_PROFILE, nil 
  case "UPDATE_SETTINGS": return OpType_UPDATE_SETTINGS, nil 
  case "NOTIFIED_UPDATE_PROFILE": return OpType_NOTIFIED_UPDATE_PROFILE, nil 
  case "REGISTER_USERID": return OpType_REGISTER_USERID, nil 
  case "ADD_CONTACT": return OpType_ADD_CONTACT, nil 
  case "NOTIFIED_ADD_CONTACT": return OpType_NOTIFIED_ADD_CONTACT, nil 
  case "BLOCK_CONTACT": return OpType_BLOCK_CONTACT, nil 
  case "UNBLOCK_CONTACT": return OpType_UNBLOCK_CONTACT, nil 
  case "NOTIFIED_RECOMMEND_CONTACT": return OpType_NOTIFIED_RECOMMEND_CONTACT, nil 
  case "CREATE_GROUP": return OpType_CREATE_GROUP, nil 
  case "UPDATE_GROUP": return OpType_UPDATE_GROUP, nil 
  case "NOTIFIED_UPDATE_GROUP": return OpType_NOTIFIED_UPDATE_GROUP, nil 
  case "INVITE_INTO_GROUP": return OpType_INVITE_INTO_GROUP, nil 
  case "NOTIFIED_INVITE_INTO_GROUP": return OpType_NOTIFIED_INVITE_INTO_GROUP, nil 
  case "CANCEL_INVITATION_GROUP": return OpType_CANCEL_INVITATION_GROUP, nil 
  case "NOTIFIED_CANCEL_INVITATION_GROUP": return OpType_NOTIFIED_CANCEL_INVITATION_GROUP, nil 
  case "LEAVE_GROUP": return OpType_LEAVE_GROUP, nil 
  case "NOTIFIED_LEAVE_GROUP": return OpType_NOTIFIED_LEAVE_GROUP, nil 
  case "ACCEPT_GROUP_INVITATION": return OpType_ACCEPT_GROUP_INVITATION, nil 
  case "NOTIFIED_ACCEPT_GROUP_INVITATION": return OpType_NOTIFIED_ACCEPT_GROUP_INVITATION, nil 
  case "REJECT_GROUP_INVITATION": return OpType_REJECT_GROUP_INVITATION, nil 
  case "NOTIFIED_REJECT_GROUP_INVITATION": return OpType_NOTIFIED_REJECT_GROUP_INVITATION, nil 
  case "KICKOUT__fromGROUP": return OpType_KICKOUT__fromGROUP, nil 
  case "NOTIFIED_KICKOUT__fromGROUP": return OpType_NOTIFIED_KICKOUT__fromGROUP, nil 
  case "CREATE_ROOM": return OpType_CREATE_ROOM, nil 
  case "INVITE_INTO_ROOM": return OpType_INVITE_INTO_ROOM, nil 
  case "NOTIFIED_INVITE_INTO_ROOM": return OpType_NOTIFIED_INVITE_INTO_ROOM, nil 
  case "LEAVE_ROOM": return OpType_LEAVE_ROOM, nil 
  case "NOTIFIED_LEAVE_ROOM": return OpType_NOTIFIED_LEAVE_ROOM, nil 
  case "SEND_MESSAGE": return OpType_SEND_MESSAGE, nil 
  case "RECEIVE_MESSAGE": return OpType_RECEIVE_MESSAGE, nil 
  case "SEND_MESSAGE_RECEIPT": return OpType_SEND_MESSAGE_RECEIPT, nil 
  case "RECEIVE_MESSAGE_RECEIPT": return OpType_RECEIVE_MESSAGE_RECEIPT, nil 
  case "SEND_CONTENT_RECEIPT": return OpType_SEND_CONTENT_RECEIPT, nil 
  case "SEND_CHAT_CHECKED": return OpType_SEND_CHAT_CHECKED, nil 
  case "SEND_CHAT_REMOVED": return OpType_SEND_CHAT_REMOVED, nil 
  case "RECEIVE_ANNOUNCEMENT": return OpType_RECEIVE_ANNOUNCEMENT, nil 
  case "INVITE_VIA_EMAIL": return OpType_INVITE_VIA_EMAIL, nil 
  case "NOTIFIED_REGISTER_USER": return OpType_NOTIFIED_REGISTER_USER, nil 
  case "NOTIFIED_UNREGISTER_USER": return OpType_NOTIFIED_UNREGISTER_USER, nil 
  case "NOTIFIED_REQUEST_RECOVERY": return OpType_NOTIFIED_REQUEST_RECOVERY, nil 
  case "NOTIFIED_FORCE_SYNC": return OpType_NOTIFIED_FORCE_SYNC, nil 
  case "SEND_CONTENT": return OpType_SEND_CONTENT, nil 
  case "SEND_MESSAGE_MYHOME": return OpType_SEND_MESSAGE_MYHOME, nil 
  case "NOTIFIED_UPDATE_CONTENT_PREVIEW": return OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil 
  case "REMOVE_ALL_MESSAGES": return OpType_REMOVE_ALL_MESSAGES, nil 
  case "NOTIFIED_UPDATE_PURCHASES": return OpType_NOTIFIED_UPDATE_PURCHASES, nil 
  case "DUMMY": return OpType_DUMMY, nil 
  case "UPDATE_CONTACT": return OpType_UPDATE_CONTACT, nil 
  case "NOTIFIED_RECEIVED_CALL": return OpType_NOTIFIED_RECEIVED_CALL, nil 
  case "CANCEL_CALL": return OpType_CANCEL_CALL, nil 
  case "NOTIFIED_REDIRECT": return OpType_NOTIFIED_REDIRECT, nil 
  case "NOTIFIED_CHANNEL_SYNC": return OpType_NOTIFIED_CHANNEL_SYNC, nil 
  case "FAILED_SEND_MESSAGE": return OpType_FAILED_SEND_MESSAGE, nil 
  case "NOTIFIED_READ_MESSAGE": return OpType_NOTIFIED_READ_MESSAGE, nil 
  case "FAILED_EMAIL_CONFIRMATION": return OpType_FAILED_EMAIL_CONFIRMATION, nil 
  case "NOTIFIED_PUSH_NOTICENTER_ITEM": return OpType_NOTIFIED_PUSH_NOTICENTER_ITEM, nil 
  case "NOTIFIED_CHAT_CONTENT": return OpType_NOTIFIED_CHAT_CONTENT, nil 
  case "NOTIFIED_JOIN_CHAT": return OpType_NOTIFIED_JOIN_CHAT, nil 
  case "NOTIFIED_LEAVE_CHAT": return OpType_NOTIFIED_LEAVE_CHAT, nil 
  case "NOTIFIED_TYPING": return OpType_NOTIFIED_TYPING, nil 
  case "FRIEND_REQUEST_ACCEPTED": return OpType_FRIEND_REQUEST_ACCEPTED, nil 
  case "DESTROY_MESSAGE": return OpType_DESTROY_MESSAGE, nil 
  case "NOTIFIED_DESTROY_MESSAGE": return OpType_NOTIFIED_DESTROY_MESSAGE, nil 
  case "UPDATE_PUBLICKEYCHAIN": return OpType_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_UPDATE_PUBLICKEYCHAIN": return OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_BLOCK_CONTACT": return OpType_NOTIFIED_BLOCK_CONTACT, nil 
  case "NOTIFIED_UNBLOCK_CONTACT": return OpType_NOTIFIED_UNBLOCK_CONTACT, nil 
  case "UPDATE_GROUPPREFERENCE": return OpType_UPDATE_GROUPPREFERENCE, nil 
  case "NOTIFIED_PAYMENT_EVENT": return OpType_NOTIFIED_PAYMENT_EVENT, nil 
  case "REGISTER_E2EE_PUBLICKEY": return OpType_REGISTER_E2EE_PUBLICKEY, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP, nil 
  case "NOTIFIED_E2EE_KEY_UPDATE": return OpType_NOTIFIED_E2EE_KEY_UPDATE, nil 
  case "NOTIFIED_BUDDY_UPDATE_PROFILE": return OpType_NOTIFIED_BUDDY_UPDATE_PROFILE, nil 
  case "NOTIFIED_UPDATE_LINEAT_TABS": return OpType_NOTIFIED_UPDATE_LINEAT_TABS, nil 
  case "UPDATE_ROOM": return OpType_UPDATE_ROOM, nil 
  case "NOTIFIED_BEACON_DETECTED": return OpType_NOTIFIED_BEACON_DETECTED, nil 
  case "UPDATE_EXTENDED_PROFILE": return OpType_UPDATE_EXTENDED_PROFILE, nil 
  case "ADD_FOLLOW": return OpType_ADD_FOLLOW, nil 
  case "NOTIFIED_ADD_FOLLOW": return OpType_NOTIFIED_ADD_FOLLOW, nil 
  case "DELETE_FOLLOW": return OpType_DELETE_FOLLOW, nil 
  case "NOTIFIED_DELETE_FOLLOW": return OpType_NOTIFIED_DELETE_FOLLOW, nil 
  case "UPDATE_TIMELINE_SETTINGS": return OpType_UPDATE_TIMELINE_SETTINGS, nil 
  case "NOTIFIED_FRIEND_REQUEST": return OpType_NOTIFIED_FRIEND_REQUEST, nil 
  case "UPDATE_RINGBACK_TONE": return OpType_UPDATE_RINGBACK_TONE, nil 
  case "NOTIFIED_POSTBACK": return OpType_NOTIFIED_POSTBACK, nil 
  case "RECEIVE_READ_WATERMARK": return OpType_RECEIVE_READ_WATERMARK, nil 
  case "NOTIFIED_MESSAGE_DELIVERED": return OpType_NOTIFIED_MESSAGE_DELIVERED, nil 
  case "NOTIFIED_UPDATE_CHAT_BAR": return OpType_NOTIFIED_UPDATE_CHAT_BAR, nil 
  case "NOTIFIED_CHATAPP_INSTALLED": return OpType_NOTIFIED_CHATAPP_INSTALLED, nil 
  case "NOTIFIED_CHATAPP_UPDATED": return OpType_NOTIFIED_CHATAPP_UPDATED, nil 
  case "NOTIFIED_CHATAPP_NEW_MARK": return OpType_NOTIFIED_CHATAPP_NEW_MARK, nil 
  case "NOTIFIED_CHATAPP_DELETED": return OpType_NOTIFIED_CHATAPP_DELETED, nil 
  case "NOTIFIED_CHATAPP_SYNC": return OpType_NOTIFIED_CHATAPP_SYNC, nil 
  case "NOTIFIED_UPDATE_MESSAGE": return OpType_NOTIFIED_UPDATE_MESSAGE, nil 
  case "UPDATE_CHATROOMBGM": return OpType_UPDATE_CHATROOMBGM, nil 
  case "NOTIFIED_UPDATE_CHATROOMBGM": return OpType_NOTIFIED_UPDATE_CHATROOMBGM, nil 
  case "UPDATE_RINGTONE": return OpType_UPDATE_RINGTONE, nil 
  case "UPDATE_USER_SETTINGS": return OpType_UPDATE_USER_SETTINGS, nil 
  case "NOTIFIED_UPDATE_STATUS_BAR": return OpType_NOTIFIED_UPDATE_STATUS_BAR, nil 
  case "CREATE_CHAT": return OpType_CREATE_CHAT, nil 
  case "UPDATE_CHAT": return OpType_UPDATE_CHAT, nil 
  case "NOTIFIED_UPDATE_CHAT": return OpType_NOTIFIED_UPDATE_CHAT, nil 
  case "INVITE_INTO_CHAT": return OpType_INVITE_INTO_CHAT, nil 
  case "NOTIFIED_INVITE_INTO_CHAT": return OpType_NOTIFIED_INVITE_INTO_CHAT, nil 
  case "CANCEL_CHAT_INVITATION": return OpType_CANCEL_CHAT_INVITATION, nil 
  case "NOTIFIED_CANCEL_CHAT_INVITATION": return OpType_NOTIFIED_CANCEL_CHAT_INVITATION, nil 
  case "DELETE_SELF__fromCHAT": return OpType_DELETE_SELF__fromCHAT, nil 
  case "NOTIFIED_DELETE_SELF__fromCHAT": return OpType_NOTIFIED_DELETE_SELF__fromCHAT, nil 
  case "ACCEPT_CHAT_INVITATION": return OpType_ACCEPT_CHAT_INVITATION, nil 
  case "NOTIFIED_ACCEPT_CHAT_INVITATION": return OpType_NOTIFIED_ACCEPT_CHAT_INVITATION, nil 
  case "REJECT_CHAT_INVITATION": return OpType_REJECT_CHAT_INVITATION, nil 
  case "DELETE_OTHER__fromCHAT": return OpType_DELETE_OTHER__fromCHAT, nil 
  case "NOTIFIED_DELETE_OTHER__fromCHAT": return OpType_NOTIFIED_DELETE_OTHER__fromCHAT, nil 
  }
  return OpType(0), fmt.Errorf("not a valid OpType string")
}


func OpTypePtr(v OpType) *OpType { return &v }

func (p OpType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OpType) UnmarshalText(text []byte) error {
q, err := OpTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OpType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OpType(v)
return nil
}

func (p * OpType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OpStatus int64
const (
  OpStatus_NORMAL OpStatus = 0
  OpStatus_ALERT_DISABLED OpStatus = 1
  OpStatus_ALWAYS OpStatus = 2
)

func (p OpStatus) String() string {
  switch p {
  case OpStatus_NORMAL: return "NORMAL"
  case OpStatus_ALERT_DISABLED: return "ALERT_DISABLED"
  case OpStatus_ALWAYS: return "ALWAYS"
  }
  return "<UNSET>"
}

func OpStatusFromString(s string) (OpStatus, error) {
  switch s {
  case "NORMAL": return OpStatus_NORMAL, nil 
  case "ALERT_DISABLED": return OpStatus_ALERT_DISABLED, nil 
  case "ALWAYS": return OpStatus_ALWAYS, nil 
  }
  return OpStatus(0), fmt.Errorf("not a valid OpStatus string")
}


func OpStatusPtr(v OpStatus) *OpStatus { return &v }

func (p OpStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OpStatus) UnmarshalText(text []byte) error {
q, err := OpStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OpStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OpStatus(v)
return nil
}

func (p * OpStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactFlag int64
const (
  ContactFlag_CONTACT_SETTING_NOTIFICATION_DISABLE ContactFlag = 1
  ContactFlag_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE ContactFlag = 2
  ContactFlag_CONTACT_SETTING_CONTACT_HIDE ContactFlag = 4
  ContactFlag_CONTACT_SETTING_FAVORITE ContactFlag = 8
  ContactFlag_CONTACT_SETTING_DELETE ContactFlag = 16
)

func (p ContactFlag) String() string {
  switch p {
  case ContactFlag_CONTACT_SETTING_NOTIFICATION_DISABLE: return "CONTACT_SETTING_NOTIFICATION_DISABLE"
  case ContactFlag_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE: return "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
  case ContactFlag_CONTACT_SETTING_CONTACT_HIDE: return "CONTACT_SETTING_CONTACT_HIDE"
  case ContactFlag_CONTACT_SETTING_FAVORITE: return "CONTACT_SETTING_FAVORITE"
  case ContactFlag_CONTACT_SETTING_DELETE: return "CONTACT_SETTING_DELETE"
  }
  return "<UNSET>"
}

func ContactFlagFromString(s string) (ContactFlag, error) {
  switch s {
  case "CONTACT_SETTING_NOTIFICATION_DISABLE": return ContactFlag_CONTACT_SETTING_NOTIFICATION_DISABLE, nil 
  case "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE": return ContactFlag_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, nil 
  case "CONTACT_SETTING_CONTACT_HIDE": return ContactFlag_CONTACT_SETTING_CONTACT_HIDE, nil 
  case "CONTACT_SETTING_FAVORITE": return ContactFlag_CONTACT_SETTING_FAVORITE, nil 
  case "CONTACT_SETTING_DELETE": return ContactFlag_CONTACT_SETTING_DELETE, nil 
  }
  return ContactFlag(0), fmt.Errorf("not a valid ContactFlag string")
}


func ContactFlagPtr(v ContactFlag) *ContactFlag { return &v }

func (p ContactFlag) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactFlag) UnmarshalText(text []byte) error {
q, err := ContactFlagFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactFlag) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactFlag(v)
return nil
}

func (p * ContactFlag) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type IdentityProvider int64
const (
  IdentityProvider_UNKNOWN IdentityProvider = 0
  IdentityProvider_LINE IdentityProvider = 1
  IdentityProvider_NAVER_KR IdentityProvider = 2
  IdentityProvider_LINE_PHONE IdentityProvider = 3
)

func (p IdentityProvider) String() string {
  switch p {
  case IdentityProvider_UNKNOWN: return "UNKNOWN"
  case IdentityProvider_LINE: return "LINE"
  case IdentityProvider_NAVER_KR: return "NAVER_KR"
  case IdentityProvider_LINE_PHONE: return "LINE_PHONE"
  }
  return "<UNSET>"
}

func IdentityProviderFromString(s string) (IdentityProvider, error) {
  switch s {
  case "UNKNOWN": return IdentityProvider_UNKNOWN, nil 
  case "LINE": return IdentityProvider_LINE, nil 
  case "NAVER_KR": return IdentityProvider_NAVER_KR, nil 
  case "LINE_PHONE": return IdentityProvider_LINE_PHONE, nil 
  }
  return IdentityProvider(0), fmt.Errorf("not a valid IdentityProvider string")
}


func IdentityProviderPtr(v IdentityProvider) *IdentityProvider { return &v }

func (p IdentityProvider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IdentityProvider) UnmarshalText(text []byte) error {
q, err := IdentityProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IdentityProvider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IdentityProvider(v)
return nil
}

func (p * IdentityProvider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SnsType int64
const (
  SnsType_FACEBOOK SnsType = 1
  SnsType_SINA SnsType = 2
  SnsType_RENREN SnsType = 3
  SnsType_FEIXIN SnsType = 4
  SnsType_BBM SnsType = 5
  SnsType_APPLE SnsType = 6
)

func (p SnsType) String() string {
  switch p {
  case SnsType_FACEBOOK: return "FACEBOOK"
  case SnsType_SINA: return "SINA"
  case SnsType_RENREN: return "RENREN"
  case SnsType_FEIXIN: return "FEIXIN"
  case SnsType_BBM: return "BBM"
  case SnsType_APPLE: return "APPLE"
  }
  return "<UNSET>"
}

func SnsTypeFromString(s string) (SnsType, error) {
  switch s {
  case "FACEBOOK": return SnsType_FACEBOOK, nil 
  case "SINA": return SnsType_SINA, nil 
  case "RENREN": return SnsType_RENREN, nil 
  case "FEIXIN": return SnsType_FEIXIN, nil 
  case "BBM": return SnsType_BBM, nil 
  case "APPLE": return SnsType_APPLE, nil 
  }
  return SnsType(0), fmt.Errorf("not a valid SnsType string")
}


func SnsTypePtr(v SnsType) *SnsType { return &v }

func (p SnsType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SnsType) UnmarshalText(text []byte) error {
q, err := SnsTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SnsType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SnsType(v)
return nil
}

func (p * SnsType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EmailConfirmationStatus int64
const (
  EmailConfirmationStatus_NOT_SPECIFIED EmailConfirmationStatus = 0
  EmailConfirmationStatus_NOT_YET EmailConfirmationStatus = 1
  EmailConfirmationStatus_DONE EmailConfirmationStatus = 2
  EmailConfirmationStatus_NEED_ENFORCED_INPUT EmailConfirmationStatus = 3
)

func (p EmailConfirmationStatus) String() string {
  switch p {
  case EmailConfirmationStatus_NOT_SPECIFIED: return "NOT_SPECIFIED"
  case EmailConfirmationStatus_NOT_YET: return "NOT_YET"
  case EmailConfirmationStatus_DONE: return "DONE"
  case EmailConfirmationStatus_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func EmailConfirmationStatusFromString(s string) (EmailConfirmationStatus, error) {
  switch s {
  case "NOT_SPECIFIED": return EmailConfirmationStatus_NOT_SPECIFIED, nil 
  case "NOT_YET": return EmailConfirmationStatus_NOT_YET, nil 
  case "DONE": return EmailConfirmationStatus_DONE, nil 
  case "NEED_ENFORCED_INPUT": return EmailConfirmationStatus_NEED_ENFORCED_INPUT, nil 
  }
  return EmailConfirmationStatus(0), fmt.Errorf("not a valid EmailConfirmationStatus string")
}


func EmailConfirmationStatusPtr(v EmailConfirmationStatus) *EmailConfirmationStatus { return &v }

func (p EmailConfirmationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EmailConfirmationStatus) UnmarshalText(text []byte) error {
q, err := EmailConfirmationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EmailConfirmationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EmailConfirmationStatus(v)
return nil
}

func (p * EmailConfirmationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountMigrationPincodeType int64
const (
  AccountMigrationPincodeType_NOT_AUTHENTICATED AccountMigrationPincodeType = 0
  AccountMigrationPincodeType_NOT_SET AccountMigrationPincodeType = 1
  AccountMigrationPincodeType_SET AccountMigrationPincodeType = 2
  AccountMigrationPincodeType_NEED_ENFORCED_INPU AccountMigrationPincodeType = 3
)

func (p AccountMigrationPincodeType) String() string {
  switch p {
  case AccountMigrationPincodeType_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case AccountMigrationPincodeType_NOT_SET: return "NOT_SET"
  case AccountMigrationPincodeType_SET: return "SET"
  case AccountMigrationPincodeType_NEED_ENFORCED_INPU: return "NEED_ENFORCED_INPU"
  }
  return "<UNSET>"
}

func AccountMigrationPincodeTypeFromString(s string) (AccountMigrationPincodeType, error) {
  switch s {
  case "NOT_AUTHENTICATED": return AccountMigrationPincodeType_NOT_AUTHENTICATED, nil 
  case "NOT_SET": return AccountMigrationPincodeType_NOT_SET, nil 
  case "SET": return AccountMigrationPincodeType_SET, nil 
  case "NEED_ENFORCED_INPU": return AccountMigrationPincodeType_NEED_ENFORCED_INPU, nil 
  }
  return AccountMigrationPincodeType(0), fmt.Errorf("not a valid AccountMigrationPincodeType string")
}


func AccountMigrationPincodeTypePtr(v AccountMigrationPincodeType) *AccountMigrationPincodeType { return &v }

func (p AccountMigrationPincodeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountMigrationPincodeType) UnmarshalText(text []byte) error {
q, err := AccountMigrationPincodeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountMigrationPincodeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountMigrationPincodeType(v)
return nil
}

func (p * AccountMigrationPincodeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SecurityCenterSettingsType int64
const (
  SecurityCenterSettingsType_NOT_AUTHENTICATED SecurityCenterSettingsType = 0
  SecurityCenterSettingsType_NOT_SET SecurityCenterSettingsType = 1
  SecurityCenterSettingsType_SET SecurityCenterSettingsType = 2
  SecurityCenterSettingsType_NEED_ENFORCED_INPUT SecurityCenterSettingsType = 3
)

func (p SecurityCenterSettingsType) String() string {
  switch p {
  case SecurityCenterSettingsType_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case SecurityCenterSettingsType_NOT_SET: return "NOT_SET"
  case SecurityCenterSettingsType_SET: return "SET"
  case SecurityCenterSettingsType_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func SecurityCenterSettingsTypeFromString(s string) (SecurityCenterSettingsType, error) {
  switch s {
  case "NOT_AUTHENTICATED": return SecurityCenterSettingsType_NOT_AUTHENTICATED, nil 
  case "NOT_SET": return SecurityCenterSettingsType_NOT_SET, nil 
  case "SET": return SecurityCenterSettingsType_SET, nil 
  case "NEED_ENFORCED_INPUT": return SecurityCenterSettingsType_NEED_ENFORCED_INPUT, nil 
  }
  return SecurityCenterSettingsType(0), fmt.Errorf("not a valid SecurityCenterSettingsType string")
}


func SecurityCenterSettingsTypePtr(v SecurityCenterSettingsType) *SecurityCenterSettingsType { return &v }

func (p SecurityCenterSettingsType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SecurityCenterSettingsType) UnmarshalText(text []byte) error {
q, err := SecurityCenterSettingsTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SecurityCenterSettingsType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SecurityCenterSettingsType(v)
return nil
}

func (p * SecurityCenterSettingsType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CustomMode int64
const (
  CustomMode_PROMOTION_FRIENDS_INVITE CustomMode = 1
  CustomMode_CAPABILITY_SERVER_SIDE_SMS CustomMode = 2
  CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION CustomMode = 3
)

func (p CustomMode) String() string {
  switch p {
  case CustomMode_PROMOTION_FRIENDS_INVITE: return "PROMOTION_FRIENDS_INVITE"
  case CustomMode_CAPABILITY_SERVER_SIDE_SMS: return "CAPABILITY_SERVER_SIDE_SMS"
  case CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION: return "LINE_CLIENT_ANALYTICS_CONFIGURATION"
  }
  return "<UNSET>"
}

func CustomModeFromString(s string) (CustomMode, error) {
  switch s {
  case "PROMOTION_FRIENDS_INVITE": return CustomMode_PROMOTION_FRIENDS_INVITE, nil 
  case "CAPABILITY_SERVER_SIDE_SMS": return CustomMode_CAPABILITY_SERVER_SIDE_SMS, nil 
  case "LINE_CLIENT_ANALYTICS_CONFIGURATION": return CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION, nil 
  }
  return CustomMode(0), fmt.Errorf("not a valid CustomMode string")
}


func CustomModePtr(v CustomMode) *CustomMode { return &v }

func (p CustomMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CustomMode) UnmarshalText(text []byte) error {
q, err := CustomModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CustomMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CustomMode(v)
return nil
}

func (p * CustomMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SettingsAttributes int64
const (
  SettingsAttributes_NOTIFICATION_ENABLE SettingsAttributes = 0
  SettingsAttributes_NOTIFICATION_MUTE_EXPIRATION SettingsAttributes = 1
  SettingsAttributes_NOTIFICATION_NEW_MESSAGE SettingsAttributes = 2
  SettingsAttributes_NOTIFICATION_GROUP_INVITATION SettingsAttributes = 3
  SettingsAttributes_NOTIFICATION_SHOW_MESSAGE SettingsAttributes = 4
  SettingsAttributes_NOTIFICATION_INCOMING_CALL SettingsAttributes = 5
  SettingsAttributes_NOTIFICATION_SOUND_MESSAGE SettingsAttributes = 8
  SettingsAttributes_NOTIFICATION_SOUND_GROUP SettingsAttributes = 9
  SettingsAttributes_NOTIFICATION_DISABLED_WITH_SUB SettingsAttributes = 16
  SettingsAttributes_NOTIFICATION_PAYMENT SettingsAttributes = 17
  SettingsAttributes_NOTIFICATION_MENTION SettingsAttributes = 40
  SettingsAttributes_NOTIFICATION_THUMBNAIL SettingsAttributes = 45
  SettingsAttributes_PRIVACY_SYNC_CONTACTS SettingsAttributes = 6
  SettingsAttributes_PRIVACY_SEARCH_BY_PHONE_NUMBER SettingsAttributes = 7
  SettingsAttributes_PRIVACY_SEARCH_BY_USERID SettingsAttributes = 13
  SettingsAttributes_PRIVACY_SEARCH_BY_EMAIL SettingsAttributes = 14
  SettingsAttributes_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS SettingsAttributes = 51
  SettingsAttributes_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN SettingsAttributes = 21
  SettingsAttributes_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME SettingsAttributes = 23
  SettingsAttributes_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME SettingsAttributes = 35
  SettingsAttributes_PRIVACY_PROFILE_HISTORY SettingsAttributes = 57
  SettingsAttributes_PRIVACY_STATUS_MESSAGE_HISTORY SettingsAttributes = 54
  SettingsAttributes_PRIVACY_ALLOW_FRIEND_REQUEST SettingsAttributes = 30
  SettingsAttributes_PRIVACY_RECV_MESSAGES__fromNOT_FRIEND SettingsAttributes = 25
  SettingsAttributes_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL SettingsAttributes = 26
  SettingsAttributes_PRIVACY_AGREE_USE_PAIDCALL SettingsAttributes = 27
  SettingsAttributes_PRIVACY_AGE_RESULT SettingsAttributes = 60
  SettingsAttributes_PRIVACY_AGE_RESULT_RECEIVED SettingsAttributes = 61
  SettingsAttributes_PRIVACY_ALLOW_FOLLOW SettingsAttributes = 63
  SettingsAttributes_PRIVACY_SHOW_FOLLOW_LIST SettingsAttributes = 64
  SettingsAttributes_CONTACT_MY_TICKET SettingsAttributes = 10
  SettingsAttributes_IDENTITY_PROVIDER SettingsAttributes = 11
  SettingsAttributes_IDENTITY_IDENTIFIER SettingsAttributes = 12
  SettingsAttributes_SNS_ACCOUNT SettingsAttributes = 19
  SettingsAttributes_PHONE_REGISTRATION SettingsAttributes = 20
  SettingsAttributes_PREFERENCE_LOCALE SettingsAttributes = 15
  SettingsAttributes_CUSTOM_MODE SettingsAttributes = 22
  SettingsAttributes_EMAIL_CONFIRMATION_STATUS SettingsAttributes = 24
  SettingsAttributes_ACCOUNT_MIGRATION_PINCODE SettingsAttributes = 28
  SettingsAttributes_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE SettingsAttributes = 29
  SettingsAttributes_SECURITY_CENTER_SETTINGS SettingsAttributes = 18
  SettingsAttributes_E2EE_ENABLE SettingsAttributes = 33
  SettingsAttributes_HITOKOTO_BACKUP_REQUESTED SettingsAttributes = 34
  SettingsAttributes_CONTACT_ALLOW_FOLLOWING SettingsAttributes = 36
  SettingsAttributes_PRIVACY_ALLOW_NEARBY SettingsAttributes = 37
  SettingsAttributes_AGREEMENT_NEARBY SettingsAttributes = 38
  SettingsAttributes_AGREEMENT_SQUARE SettingsAttributes = 39
  SettingsAttributes_ALLOW_UNREGISTRATION_SECONDARY_DEVICE SettingsAttributes = 41
  SettingsAttributes_AGREEMENT_BOT_USE SettingsAttributes = 42
  SettingsAttributes_AGREEMENT_SHAKE_FUNCTION SettingsAttributes = 43
  SettingsAttributes_AGREEMENT_MOBILE_CONTACT_NAME SettingsAttributes = 44
  SettingsAttributes_AGREEMENT_SOUND_TO_TEXT SettingsAttributes = 46
  SettingsAttributes_AGREEMENT_PRIVACY_POLICY_VERSION SettingsAttributes = 47
  SettingsAttributes_AGREEMENT_AD_BY_WEB_ACCESS SettingsAttributes = 48
  SettingsAttributes_AGREEMENT_PHONE_NUMBER_MATCHING SettingsAttributes = 49
  SettingsAttributes_AGREEMENT_COMMUNICATION_INFO SettingsAttributes = 50
  SettingsAttributes_AGREEMENT_THINGS_WIRELESS_COMMUNICATION SettingsAttributes = 52
  SettingsAttributes_AGREEMENT_GDPR SettingsAttributes = 53
  SettingsAttributes_AGREEMENT_PROVIDE_LOCATION SettingsAttributes = 55
  SettingsAttributes_AGREEMENT_BEACON SettingsAttributes = 56
  SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST SettingsAttributes = 58
  SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION SettingsAttributes = 59
  SettingsAttributes_AGREEMENT_OCR_IMAGE_COLLECTION SettingsAttributes = 62
)

func (p SettingsAttributes) String() string {
  switch p {
  case SettingsAttributes_NOTIFICATION_ENABLE: return "NOTIFICATION_ENABLE"
  case SettingsAttributes_NOTIFICATION_MUTE_EXPIRATION: return "NOTIFICATION_MUTE_EXPIRATION"
  case SettingsAttributes_NOTIFICATION_NEW_MESSAGE: return "NOTIFICATION_NEW_MESSAGE"
  case SettingsAttributes_NOTIFICATION_GROUP_INVITATION: return "NOTIFICATION_GROUP_INVITATION"
  case SettingsAttributes_NOTIFICATION_SHOW_MESSAGE: return "NOTIFICATION_SHOW_MESSAGE"
  case SettingsAttributes_NOTIFICATION_INCOMING_CALL: return "NOTIFICATION_INCOMING_CALL"
  case SettingsAttributes_NOTIFICATION_SOUND_MESSAGE: return "NOTIFICATION_SOUND_MESSAGE"
  case SettingsAttributes_NOTIFICATION_SOUND_GROUP: return "NOTIFICATION_SOUND_GROUP"
  case SettingsAttributes_NOTIFICATION_DISABLED_WITH_SUB: return "NOTIFICATION_DISABLED_WITH_SUB"
  case SettingsAttributes_NOTIFICATION_PAYMENT: return "NOTIFICATION_PAYMENT"
  case SettingsAttributes_NOTIFICATION_MENTION: return "NOTIFICATION_MENTION"
  case SettingsAttributes_NOTIFICATION_THUMBNAIL: return "NOTIFICATION_THUMBNAIL"
  case SettingsAttributes_PRIVACY_SYNC_CONTACTS: return "PRIVACY_SYNC_CONTACTS"
  case SettingsAttributes_PRIVACY_SEARCH_BY_PHONE_NUMBER: return "PRIVACY_SEARCH_BY_PHONE_NUMBER"
  case SettingsAttributes_PRIVACY_SEARCH_BY_USERID: return "PRIVACY_SEARCH_BY_USERID"
  case SettingsAttributes_PRIVACY_SEARCH_BY_EMAIL: return "PRIVACY_SEARCH_BY_EMAIL"
  case SettingsAttributes_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS: return "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS"
  case SettingsAttributes_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN: return "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
  case SettingsAttributes_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME: return "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
  case SettingsAttributes_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME: return "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME"
  case SettingsAttributes_PRIVACY_PROFILE_HISTORY: return "PRIVACY_PROFILE_HISTORY"
  case SettingsAttributes_PRIVACY_STATUS_MESSAGE_HISTORY: return "PRIVACY_STATUS_MESSAGE_HISTORY"
  case SettingsAttributes_PRIVACY_ALLOW_FRIEND_REQUEST: return "PRIVACY_ALLOW_FRIEND_REQUEST"
  case SettingsAttributes_PRIVACY_RECV_MESSAGES__fromNOT_FRIEND: return "PRIVACY_RECV_MESSAGES__fromNOT_FRIEND"
  case SettingsAttributes_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL: return "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
  case SettingsAttributes_PRIVACY_AGREE_USE_PAIDCALL: return "PRIVACY_AGREE_USE_PAIDCALL"
  case SettingsAttributes_PRIVACY_AGE_RESULT: return "PRIVACY_AGE_RESULT"
  case SettingsAttributes_PRIVACY_AGE_RESULT_RECEIVED: return "PRIVACY_AGE_RESULT_RECEIVED"
  case SettingsAttributes_PRIVACY_ALLOW_FOLLOW: return "PRIVACY_ALLOW_FOLLOW"
  case SettingsAttributes_PRIVACY_SHOW_FOLLOW_LIST: return "PRIVACY_SHOW_FOLLOW_LIST"
  case SettingsAttributes_CONTACT_MY_TICKET: return "CONTACT_MY_TICKET"
  case SettingsAttributes_IDENTITY_PROVIDER: return "IDENTITY_PROVIDER"
  case SettingsAttributes_IDENTITY_IDENTIFIER: return "IDENTITY_IDENTIFIER"
  case SettingsAttributes_SNS_ACCOUNT: return "SNS_ACCOUNT"
  case SettingsAttributes_PHONE_REGISTRATION: return "PHONE_REGISTRATION"
  case SettingsAttributes_PREFERENCE_LOCALE: return "PREFERENCE_LOCALE"
  case SettingsAttributes_CUSTOM_MODE: return "CUSTOM_MODE"
  case SettingsAttributes_EMAIL_CONFIRMATION_STATUS: return "EMAIL_CONFIRMATION_STATUS"
  case SettingsAttributes_ACCOUNT_MIGRATION_PINCODE: return "ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributes_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE: return "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributes_SECURITY_CENTER_SETTINGS: return "SECURITY_CENTER_SETTINGS"
  case SettingsAttributes_E2EE_ENABLE: return "E2EE_ENABLE"
  case SettingsAttributes_HITOKOTO_BACKUP_REQUESTED: return "HITOKOTO_BACKUP_REQUESTED"
  case SettingsAttributes_CONTACT_ALLOW_FOLLOWING: return "CONTACT_ALLOW_FOLLOWING"
  case SettingsAttributes_PRIVACY_ALLOW_NEARBY: return "PRIVACY_ALLOW_NEARBY"
  case SettingsAttributes_AGREEMENT_NEARBY: return "AGREEMENT_NEARBY"
  case SettingsAttributes_AGREEMENT_SQUARE: return "AGREEMENT_SQUARE"
  case SettingsAttributes_ALLOW_UNREGISTRATION_SECONDARY_DEVICE: return "ALLOW_UNREGISTRATION_SECONDARY_DEVICE"
  case SettingsAttributes_AGREEMENT_BOT_USE: return "AGREEMENT_BOT_USE"
  case SettingsAttributes_AGREEMENT_SHAKE_FUNCTION: return "AGREEMENT_SHAKE_FUNCTION"
  case SettingsAttributes_AGREEMENT_MOBILE_CONTACT_NAME: return "AGREEMENT_MOBILE_CONTACT_NAME"
  case SettingsAttributes_AGREEMENT_SOUND_TO_TEXT: return "AGREEMENT_SOUND_TO_TEXT"
  case SettingsAttributes_AGREEMENT_PRIVACY_POLICY_VERSION: return "AGREEMENT_PRIVACY_POLICY_VERSION"
  case SettingsAttributes_AGREEMENT_AD_BY_WEB_ACCESS: return "AGREEMENT_AD_BY_WEB_ACCESS"
  case SettingsAttributes_AGREEMENT_PHONE_NUMBER_MATCHING: return "AGREEMENT_PHONE_NUMBER_MATCHING"
  case SettingsAttributes_AGREEMENT_COMMUNICATION_INFO: return "AGREEMENT_COMMUNICATION_INFO"
  case SettingsAttributes_AGREEMENT_THINGS_WIRELESS_COMMUNICATION: return "AGREEMENT_THINGS_WIRELESS_COMMUNICATION"
  case SettingsAttributes_AGREEMENT_GDPR: return "AGREEMENT_GDPR"
  case SettingsAttributes_AGREEMENT_PROVIDE_LOCATION: return "AGREEMENT_PROVIDE_LOCATION"
  case SettingsAttributes_AGREEMENT_BEACON: return "AGREEMENT_BEACON"
  case SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST: return "AGREEMENT_CONTENTS_SUGGEST"
  case SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION: return "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION"
  case SettingsAttributes_AGREEMENT_OCR_IMAGE_COLLECTION: return "AGREEMENT_OCR_IMAGE_COLLECTION"
  }
  return "<UNSET>"
}

func SettingsAttributesFromString(s string) (SettingsAttributes, error) {
  switch s {
  case "NOTIFICATION_ENABLE": return SettingsAttributes_NOTIFICATION_ENABLE, nil 
  case "NOTIFICATION_MUTE_EXPIRATION": return SettingsAttributes_NOTIFICATION_MUTE_EXPIRATION, nil 
  case "NOTIFICATION_NEW_MESSAGE": return SettingsAttributes_NOTIFICATION_NEW_MESSAGE, nil 
  case "NOTIFICATION_GROUP_INVITATION": return SettingsAttributes_NOTIFICATION_GROUP_INVITATION, nil 
  case "NOTIFICATION_SHOW_MESSAGE": return SettingsAttributes_NOTIFICATION_SHOW_MESSAGE, nil 
  case "NOTIFICATION_INCOMING_CALL": return SettingsAttributes_NOTIFICATION_INCOMING_CALL, nil 
  case "NOTIFICATION_SOUND_MESSAGE": return SettingsAttributes_NOTIFICATION_SOUND_MESSAGE, nil 
  case "NOTIFICATION_SOUND_GROUP": return SettingsAttributes_NOTIFICATION_SOUND_GROUP, nil 
  case "NOTIFICATION_DISABLED_WITH_SUB": return SettingsAttributes_NOTIFICATION_DISABLED_WITH_SUB, nil 
  case "NOTIFICATION_PAYMENT": return SettingsAttributes_NOTIFICATION_PAYMENT, nil 
  case "NOTIFICATION_MENTION": return SettingsAttributes_NOTIFICATION_MENTION, nil 
  case "NOTIFICATION_THUMBNAIL": return SettingsAttributes_NOTIFICATION_THUMBNAIL, nil 
  case "PRIVACY_SYNC_CONTACTS": return SettingsAttributes_PRIVACY_SYNC_CONTACTS, nil 
  case "PRIVACY_SEARCH_BY_PHONE_NUMBER": return SettingsAttributes_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil 
  case "PRIVACY_SEARCH_BY_USERID": return SettingsAttributes_PRIVACY_SEARCH_BY_USERID, nil 
  case "PRIVACY_SEARCH_BY_EMAIL": return SettingsAttributes_PRIVACY_SEARCH_BY_EMAIL, nil 
  case "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS": return SettingsAttributes_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS, nil 
  case "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": return SettingsAttributes_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil 
  case "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": return SettingsAttributes_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil 
  case "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": return SettingsAttributes_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, nil 
  case "PRIVACY_PROFILE_HISTORY": return SettingsAttributes_PRIVACY_PROFILE_HISTORY, nil 
  case "PRIVACY_STATUS_MESSAGE_HISTORY": return SettingsAttributes_PRIVACY_STATUS_MESSAGE_HISTORY, nil 
  case "PRIVACY_ALLOW_FRIEND_REQUEST": return SettingsAttributes_PRIVACY_ALLOW_FRIEND_REQUEST, nil 
  case "PRIVACY_RECV_MESSAGES__fromNOT_FRIEND": return SettingsAttributes_PRIVACY_RECV_MESSAGES__fromNOT_FRIEND, nil 
  case "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": return SettingsAttributes_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, nil 
  case "PRIVACY_AGREE_USE_PAIDCALL": return SettingsAttributes_PRIVACY_AGREE_USE_PAIDCALL, nil 
  case "PRIVACY_AGE_RESULT": return SettingsAttributes_PRIVACY_AGE_RESULT, nil 
  case "PRIVACY_AGE_RESULT_RECEIVED": return SettingsAttributes_PRIVACY_AGE_RESULT_RECEIVED, nil 
  case "PRIVACY_ALLOW_FOLLOW": return SettingsAttributes_PRIVACY_ALLOW_FOLLOW, nil 
  case "PRIVACY_SHOW_FOLLOW_LIST": return SettingsAttributes_PRIVACY_SHOW_FOLLOW_LIST, nil 
  case "CONTACT_MY_TICKET": return SettingsAttributes_CONTACT_MY_TICKET, nil 
  case "IDENTITY_PROVIDER": return SettingsAttributes_IDENTITY_PROVIDER, nil 
  case "IDENTITY_IDENTIFIER": return SettingsAttributes_IDENTITY_IDENTIFIER, nil 
  case "SNS_ACCOUNT": return SettingsAttributes_SNS_ACCOUNT, nil 
  case "PHONE_REGISTRATION": return SettingsAttributes_PHONE_REGISTRATION, nil 
  case "PREFERENCE_LOCALE": return SettingsAttributes_PREFERENCE_LOCALE, nil 
  case "CUSTOM_MODE": return SettingsAttributes_CUSTOM_MODE, nil 
  case "EMAIL_CONFIRMATION_STATUS": return SettingsAttributes_EMAIL_CONFIRMATION_STATUS, nil 
  case "ACCOUNT_MIGRATION_PINCODE": return SettingsAttributes_ACCOUNT_MIGRATION_PINCODE, nil 
  case "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": return SettingsAttributes_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, nil 
  case "SECURITY_CENTER_SETTINGS": return SettingsAttributes_SECURITY_CENTER_SETTINGS, nil 
  case "E2EE_ENABLE": return SettingsAttributes_E2EE_ENABLE, nil 
  case "HITOKOTO_BACKUP_REQUESTED": return SettingsAttributes_HITOKOTO_BACKUP_REQUESTED, nil 
  case "CONTACT_ALLOW_FOLLOWING": return SettingsAttributes_CONTACT_ALLOW_FOLLOWING, nil 
  case "PRIVACY_ALLOW_NEARBY": return SettingsAttributes_PRIVACY_ALLOW_NEARBY, nil 
  case "AGREEMENT_NEARBY": return SettingsAttributes_AGREEMENT_NEARBY, nil 
  case "AGREEMENT_SQUARE": return SettingsAttributes_AGREEMENT_SQUARE, nil 
  case "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": return SettingsAttributes_ALLOW_UNREGISTRATION_SECONDARY_DEVICE, nil 
  case "AGREEMENT_BOT_USE": return SettingsAttributes_AGREEMENT_BOT_USE, nil 
  case "AGREEMENT_SHAKE_FUNCTION": return SettingsAttributes_AGREEMENT_SHAKE_FUNCTION, nil 
  case "AGREEMENT_MOBILE_CONTACT_NAME": return SettingsAttributes_AGREEMENT_MOBILE_CONTACT_NAME, nil 
  case "AGREEMENT_SOUND_TO_TEXT": return SettingsAttributes_AGREEMENT_SOUND_TO_TEXT, nil 
  case "AGREEMENT_PRIVACY_POLICY_VERSION": return SettingsAttributes_AGREEMENT_PRIVACY_POLICY_VERSION, nil 
  case "AGREEMENT_AD_BY_WEB_ACCESS": return SettingsAttributes_AGREEMENT_AD_BY_WEB_ACCESS, nil 
  case "AGREEMENT_PHONE_NUMBER_MATCHING": return SettingsAttributes_AGREEMENT_PHONE_NUMBER_MATCHING, nil 
  case "AGREEMENT_COMMUNICATION_INFO": return SettingsAttributes_AGREEMENT_COMMUNICATION_INFO, nil 
  case "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": return SettingsAttributes_AGREEMENT_THINGS_WIRELESS_COMMUNICATION, nil 
  case "AGREEMENT_GDPR": return SettingsAttributes_AGREEMENT_GDPR, nil 
  case "AGREEMENT_PROVIDE_LOCATION": return SettingsAttributes_AGREEMENT_PROVIDE_LOCATION, nil 
  case "AGREEMENT_BEACON": return SettingsAttributes_AGREEMENT_BEACON, nil 
  case "AGREEMENT_CONTENTS_SUGGEST": return SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST, nil 
  case "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": return SettingsAttributes_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION, nil 
  case "AGREEMENT_OCR_IMAGE_COLLECTION": return SettingsAttributes_AGREEMENT_OCR_IMAGE_COLLECTION, nil 
  }
  return SettingsAttributes(0), fmt.Errorf("not a valid SettingsAttributes string")
}


func SettingsAttributesPtr(v SettingsAttributes) *SettingsAttributes { return &v }

func (p SettingsAttributes) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SettingsAttributes) UnmarshalText(text []byte) error {
q, err := SettingsAttributesFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SettingsAttributes) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SettingsAttributes(v)
return nil
}

func (p * SettingsAttributes) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChatAttribute int64
const (
  ChatAttribute_NAME ChatAttribute = 1
  ChatAttribute_PICTURE_STATUS ChatAttribute = 2
  ChatAttribute_PREVENTED_JOIN_BY_TICKET ChatAttribute = 4
  ChatAttribute_NOTIFICATION_SETTING ChatAttribute = 8
  ChatAttribute_INVITATION_TICKET ChatAttribute = 16
  ChatAttribute_FAVORITE_TIMESTAMP ChatAttribute = 32
  ChatAttribute_CHAT_TYPE ChatAttribute = 64
)

func (p ChatAttribute) String() string {
  switch p {
  case ChatAttribute_NAME: return "NAME"
  case ChatAttribute_PICTURE_STATUS: return "PICTURE_STATUS"
  case ChatAttribute_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case ChatAttribute_NOTIFICATION_SETTING: return "NOTIFICATION_SETTING"
  case ChatAttribute_INVITATION_TICKET: return "INVITATION_TICKET"
  case ChatAttribute_FAVORITE_TIMESTAMP: return "FAVORITE_TIMESTAMP"
  case ChatAttribute_CHAT_TYPE: return "CHAT_TYPE"
  }
  return "<UNSET>"
}

func ChatAttributeFromString(s string) (ChatAttribute, error) {
  switch s {
  case "NAME": return ChatAttribute_NAME, nil 
  case "PICTURE_STATUS": return ChatAttribute_PICTURE_STATUS, nil 
  case "PREVENTED_JOIN_BY_TICKET": return ChatAttribute_PREVENTED_JOIN_BY_TICKET, nil 
  case "NOTIFICATION_SETTING": return ChatAttribute_NOTIFICATION_SETTING, nil 
  case "INVITATION_TICKET": return ChatAttribute_INVITATION_TICKET, nil 
  case "FAVORITE_TIMESTAMP": return ChatAttribute_FAVORITE_TIMESTAMP, nil 
  case "CHAT_TYPE": return ChatAttribute_CHAT_TYPE, nil 
  }
  return ChatAttribute(0), fmt.Errorf("not a valid ChatAttribute string")
}


func ChatAttributePtr(v ChatAttribute) *ChatAttribute { return &v }

func (p ChatAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatAttribute) UnmarshalText(text []byte) error {
q, err := ChatAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatAttribute(v)
return nil
}

func (p * ChatAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type TalkException struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewTalkException() *TalkException {
  return &TalkException{}
}


func (p *TalkException) GetCode() ErrorCode {
  return p.Code
}

func (p *TalkException) GetReason() string {
  return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *TalkException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *TalkException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *TalkException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.ParameterMap[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TalkException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TalkException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *TalkException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *TalkException) Equals(other *TalkException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Reason != other.Reason { return false }
  if len(p.ParameterMap) != len(other.ParameterMap) { return false }
  for k, _tgt := range p.ParameterMap {
    _src2 := other.ParameterMap[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *TalkException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
  return p.String()
}

func (TalkException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*TalkException)(nil)

// Attributes:
//  - Year
//  - YearPrivacyLevelType
//  - YearEnabled
//  - Day
//  - DayPrivacyLevelType
//  - DayEnabled
type ExtendedProfileBirthday struct {
  Year string `thrift:"year,1" db:"year" json:"year"`
  YearPrivacyLevelType PrivacyLevelType `thrift:"yearPrivacyLevelType,2" db:"yearPrivacyLevelType" json:"yearPrivacyLevelType"`
  YearEnabled bool `thrift:"yearEnabled,3" db:"yearEnabled" json:"yearEnabled"`
  // unused field # 4
  Day string `thrift:"day,5" db:"day" json:"day"`
  DayPrivacyLevelType PrivacyLevelType `thrift:"dayPrivacyLevelType,6" db:"dayPrivacyLevelType" json:"dayPrivacyLevelType"`
  DayEnabled bool `thrift:"dayEnabled,7" db:"dayEnabled" json:"dayEnabled"`
}

func NewExtendedProfileBirthday() *ExtendedProfileBirthday {
  return &ExtendedProfileBirthday{}
}


func (p *ExtendedProfileBirthday) GetYear() string {
  return p.Year
}

func (p *ExtendedProfileBirthday) GetYearPrivacyLevelType() PrivacyLevelType {
  return p.YearPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetYearEnabled() bool {
  return p.YearEnabled
}

func (p *ExtendedProfileBirthday) GetDay() string {
  return p.Day
}

func (p *ExtendedProfileBirthday) GetDayPrivacyLevelType() PrivacyLevelType {
  return p.DayPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetDayEnabled() bool {
  return p.DayEnabled
}
func (p *ExtendedProfileBirthday) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Year = v
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PrivacyLevelType(v)
  p.YearPrivacyLevelType = temp
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.YearEnabled = v
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Day = v
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := PrivacyLevelType(v)
  p.DayPrivacyLevelType = temp
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DayEnabled = v
}
  return nil
}

func (p *ExtendedProfileBirthday) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExtendedProfileBirthday"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtendedProfileBirthday) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "year", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:year: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Year)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.year (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:year: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "yearPrivacyLevelType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:yearPrivacyLevelType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.YearPrivacyLevelType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yearPrivacyLevelType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:yearPrivacyLevelType: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "yearEnabled", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yearEnabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.YearEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yearEnabled (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yearEnabled: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "day", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:day: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:day: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dayPrivacyLevelType", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dayPrivacyLevelType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DayPrivacyLevelType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dayPrivacyLevelType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dayPrivacyLevelType: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dayEnabled", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dayEnabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DayEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dayEnabled (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dayEnabled: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) Equals(other *ExtendedProfileBirthday) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Year != other.Year { return false }
  if p.YearPrivacyLevelType != other.YearPrivacyLevelType { return false }
  if p.YearEnabled != other.YearEnabled { return false }
  if p.Day != other.Day { return false }
  if p.DayPrivacyLevelType != other.DayPrivacyLevelType { return false }
  if p.DayEnabled != other.DayEnabled { return false }
  return true
}

func (p *ExtendedProfileBirthday) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtendedProfileBirthday(%+v)", *p)
}

// Attributes:
//  - Birthday
type ExtendedProfile struct {
  Birthday *ExtendedProfileBirthday `thrift:"birthday,1" db:"birthday" json:"birthday"`
}

func NewExtendedProfile() *ExtendedProfile {
  return &ExtendedProfile{}
}

var ExtendedProfile_Birthday_DEFAULT *ExtendedProfileBirthday
func (p *ExtendedProfile) GetBirthday() *ExtendedProfileBirthday {
  if !p.IsSetBirthday() {
    return ExtendedProfile_Birthday_DEFAULT
  }
return p.Birthday
}
func (p *ExtendedProfile) IsSetBirthday() bool {
  return p.Birthday != nil
}

func (p *ExtendedProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtendedProfile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Birthday = &ExtendedProfileBirthday{}
  if err := p.Birthday.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Birthday), err)
  }
  return nil
}

func (p *ExtendedProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExtendedProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtendedProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "birthday", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:birthday: ", p), err) }
  if err := p.Birthday.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Birthday), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:birthday: ", p), err) }
  return err
}

func (p *ExtendedProfile) Equals(other *ExtendedProfile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Birthday.Equals(other.Birthday) { return false }
  return true
}

func (p *ExtendedProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtendedProfile(%+v)", *p)
}

// Attributes:
//  - RadiusMeters
//  - RadiusConfidence
type GeolocationAccurac struct {
  RadiusMeters float64 `thrift:"radiusMeters,1" db:"radiusMeters" json:"radiusMeters"`
  RadiusConfidence float64 `thrift:"radiusConfidence,2" db:"radiusConfidence" json:"radiusConfidence"`
}

func NewGeolocationAccurac() *GeolocationAccurac {
  return &GeolocationAccurac{}
}


func (p *GeolocationAccurac) GetRadiusMeters() float64 {
  return p.RadiusMeters
}

func (p *GeolocationAccurac) GetRadiusConfidence() float64 {
  return p.RadiusConfidence
}
func (p *GeolocationAccurac) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GeolocationAccurac)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RadiusMeters = v
}
  return nil
}

func (p *GeolocationAccurac)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RadiusConfidence = v
}
  return nil
}

func (p *GeolocationAccurac) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GeolocationAccurac"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GeolocationAccurac) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusMeters", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:radiusMeters: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusMeters (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:radiusMeters: ", p), err) }
  return err
}

func (p *GeolocationAccurac) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusConfidence", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:radiusConfidence: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusConfidence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusConfidence (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:radiusConfidence: ", p), err) }
  return err
}

func (p *GeolocationAccurac) Equals(other *GeolocationAccurac) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RadiusMeters != other.RadiusMeters { return false }
  if p.RadiusConfidence != other.RadiusConfidence { return false }
  return true
}

func (p *GeolocationAccurac) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GeolocationAccurac(%+v)", *p)
}

// Attributes:
//  - RadiusMeters
//  - RadiusConfidence
type GeolocationAccuracy struct {
  RadiusMeters float64 `thrift:"radiusMeters,1" db:"radiusMeters" json:"radiusMeters"`
  RadiusConfidence float64 `thrift:"radiusConfidence,2" db:"radiusConfidence" json:"radiusConfidence"`
}

func NewGeolocationAccuracy() *GeolocationAccuracy {
  return &GeolocationAccuracy{}
}


func (p *GeolocationAccuracy) GetRadiusMeters() float64 {
  return p.RadiusMeters
}

func (p *GeolocationAccuracy) GetRadiusConfidence() float64 {
  return p.RadiusConfidence
}
func (p *GeolocationAccuracy) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GeolocationAccuracy)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RadiusMeters = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RadiusConfidence = v
}
  return nil
}

func (p *GeolocationAccuracy) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GeolocationAccuracy"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GeolocationAccuracy) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusMeters", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:radiusMeters: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusMeters (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:radiusMeters: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusConfidence", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:radiusConfidence: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusConfidence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusConfidence (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:radiusConfidence: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) Equals(other *GeolocationAccuracy) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RadiusMeters != other.RadiusMeters { return false }
  if p.RadiusConfidence != other.RadiusConfidence { return false }
  return true
}

func (p *GeolocationAccuracy) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GeolocationAccuracy(%+v)", *p)
}

// Attributes:
//  - Longitude
//  - Latitude
//  - Accuracy
type Geolocation struct {
  Longitude float64 `thrift:"longitude,1" db:"longitude" json:"longitude"`
  Latitude float64 `thrift:"latitude,2" db:"latitude" json:"latitude"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,3" db:"accuracy" json:"accuracy"`
}

func NewGeolocation() *Geolocation {
  return &Geolocation{}
}


func (p *Geolocation) GetLongitude() float64 {
  return p.Longitude
}

func (p *Geolocation) GetLatitude() float64 {
  return p.Latitude
}
var Geolocation_Accuracy_DEFAULT *GeolocationAccuracy
func (p *Geolocation) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return Geolocation_Accuracy_DEFAULT
  }
return p.Accuracy
}
func (p *Geolocation) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *Geolocation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Geolocation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *Geolocation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *Geolocation)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *Geolocation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Geolocation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Geolocation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "longitude", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:longitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:longitude: ", p), err) }
  return err
}

func (p *Geolocation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "latitude", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latitude: ", p), err) }
  return err
}

func (p *Geolocation) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accuracy", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accuracy: ", p), err) }
  if err := p.Accuracy.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accuracy: ", p), err) }
  return err
}

func (p *Geolocation) Equals(other *Geolocation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Longitude != other.Longitude { return false }
  if p.Latitude != other.Latitude { return false }
  if !p.Accuracy.Equals(other.Accuracy) { return false }
  return true
}

func (p *Geolocation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Geolocation(%+v)", *p)
}

// Attributes:
//  - NetworkType
type ClientNetworkStatus struct {
  NetworkType NetworkType `thrift:"networkType,1" db:"networkType" json:"networkType"`
}

func NewClientNetworkStatus() *ClientNetworkStatus {
  return &ClientNetworkStatus{}
}


func (p *ClientNetworkStatus) GetNetworkType() NetworkType {
  return p.NetworkType
}
func (p *ClientNetworkStatus) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClientNetworkStatus)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NetworkType(v)
  p.NetworkType = temp
}
  return nil
}

func (p *ClientNetworkStatus) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClientNetworkStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientNetworkStatus) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "networkType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:networkType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NetworkType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:networkType: ", p), err) }
  return err
}

func (p *ClientNetworkStatus) Equals(other *ClientNetworkStatus) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NetworkType != other.NetworkType { return false }
  return true
}

func (p *ClientNetworkStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientNetworkStatus(%+v)", *p)
}

// Attributes:
//  - ProductType
//  - ProductName
//  - Unit
//  - LimitedPaidBalance
//  - LimitedFreeBalance
//  - UnlimitedPaidBalance
//  - UnlimitedFreeBalance
//  - StartTime
//  - EndTime
//  - AutopayEnabled
type PaidCallBalance struct {
  ProductType ProductType `thrift:"productType,1" db:"productType" json:"productType"`
  ProductName string `thrift:"productName,2" db:"productName" json:"productName"`
  Unit string `thrift:"unit,3" db:"unit" json:"unit"`
  LimitedPaidBalance int32 `thrift:"limitedPaidBalance,4" db:"limitedPaidBalance" json:"limitedPaidBalance"`
  LimitedFreeBalance int32 `thrift:"limitedFreeBalance,5" db:"limitedFreeBalance" json:"limitedFreeBalance"`
  UnlimitedPaidBalance int32 `thrift:"unlimitedPaidBalance,6" db:"unlimitedPaidBalance" json:"unlimitedPaidBalance"`
  UnlimitedFreeBalance int32 `thrift:"unlimitedFreeBalance,7" db:"unlimitedFreeBalance" json:"unlimitedFreeBalance"`
  StartTime int64 `thrift:"startTime,8" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,9" db:"endTime" json:"endTime"`
  AutopayEnabled bool `thrift:"autopayEnabled,10" db:"autopayEnabled" json:"autopayEnabled"`
}

func NewPaidCallBalance() *PaidCallBalance {
  return &PaidCallBalance{}
}


func (p *PaidCallBalance) GetProductType() ProductType {
  return p.ProductType
}

func (p *PaidCallBalance) GetProductName() string {
  return p.ProductName
}

func (p *PaidCallBalance) GetUnit() string {
  return p.Unit
}

func (p *PaidCallBalance) GetLimitedPaidBalance() int32 {
  return p.LimitedPaidBalance
}

func (p *PaidCallBalance) GetLimitedFreeBalance() int32 {
  return p.LimitedFreeBalance
}

func (p *PaidCallBalance) GetUnlimitedPaidBalance() int32 {
  return p.UnlimitedPaidBalance
}

func (p *PaidCallBalance) GetUnlimitedFreeBalance() int32 {
  return p.UnlimitedFreeBalance
}

func (p *PaidCallBalance) GetStartTime() int64 {
  return p.StartTime
}

func (p *PaidCallBalance) GetEndTime() int64 {
  return p.EndTime
}

func (p *PaidCallBalance) GetAutopayEnabled() bool {
  return p.AutopayEnabled
}
func (p *PaidCallBalance) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaidCallBalance)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ProductType(v)
  p.ProductType = temp
}
  return nil
}

func (p *PaidCallBalance)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductName = v
}
  return nil
}

func (p *PaidCallBalance)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Unit = v
}
  return nil
}

func (p *PaidCallBalance)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LimitedPaidBalance = v
}
  return nil
}

func (p *PaidCallBalance)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LimitedFreeBalance = v
}
  return nil
}

func (p *PaidCallBalance)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UnlimitedPaidBalance = v
}
  return nil
}

func (p *PaidCallBalance)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UnlimitedFreeBalance = v
}
  return nil
}

func (p *PaidCallBalance)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *PaidCallBalance)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *PaidCallBalance)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.AutopayEnabled = v
}
  return nil
}

func (p *PaidCallBalance) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PaidCallBalance"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaidCallBalance) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "productType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ProductType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productType: ", p), err) }
  return err
}

func (p *PaidCallBalance) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "productName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ProductName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productName: ", p), err) }
  return err
}

func (p *PaidCallBalance) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unit", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unit: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Unit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unit: ", p), err) }
  return err
}

func (p *PaidCallBalance) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limitedPaidBalance", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limitedPaidBalance: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LimitedPaidBalance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limitedPaidBalance (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limitedPaidBalance: ", p), err) }
  return err
}

func (p *PaidCallBalance) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limitedFreeBalance", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limitedFreeBalance: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LimitedFreeBalance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limitedFreeBalance (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limitedFreeBalance: ", p), err) }
  return err
}

func (p *PaidCallBalance) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unlimitedPaidBalance", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:unlimitedPaidBalance: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UnlimitedPaidBalance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unlimitedPaidBalance (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:unlimitedPaidBalance: ", p), err) }
  return err
}

func (p *PaidCallBalance) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unlimitedFreeBalance", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:unlimitedFreeBalance: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UnlimitedFreeBalance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unlimitedFreeBalance (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:unlimitedFreeBalance: ", p), err) }
  return err
}

func (p *PaidCallBalance) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:startTime: ", p), err) }
  return err
}

func (p *PaidCallBalance) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:endTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:endTime: ", p), err) }
  return err
}

func (p *PaidCallBalance) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "autopayEnabled", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:autopayEnabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AutopayEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.autopayEnabled (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:autopayEnabled: ", p), err) }
  return err
}

func (p *PaidCallBalance) Equals(other *PaidCallBalance) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ProductType != other.ProductType { return false }
  if p.ProductName != other.ProductName { return false }
  if p.Unit != other.Unit { return false }
  if p.LimitedPaidBalance != other.LimitedPaidBalance { return false }
  if p.LimitedFreeBalance != other.LimitedFreeBalance { return false }
  if p.UnlimitedPaidBalance != other.UnlimitedPaidBalance { return false }
  if p.UnlimitedFreeBalance != other.UnlimitedFreeBalance { return false }
  if p.StartTime != other.StartTime { return false }
  if p.EndTime != other.EndTime { return false }
  if p.AutopayEnabled != other.AutopayEnabled { return false }
  return true
}

func (p *PaidCallBalance) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaidCallBalance(%+v)", *p)
}

// Attributes:
//  - Creator
//  - PreventedJoinByTicket
//  - InvitationTicket
//  - MemberMids
//  - InviteeMids
type GroupExtra struct {
  Creator string `thrift:"creator,1" db:"creator" json:"creator"`
  PreventedJoinByTicket bool `thrift:"preventedJoinByTicket,2" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
  InvitationTicket string `thrift:"invitationTicket,3" db:"invitationTicket" json:"invitationTicket"`
  MemberMids map[string]int64 `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
  InviteeMids map[string]int64 `thrift:"inviteeMids,5" db:"inviteeMids" json:"inviteeMids"`
}

func NewGroupExtra() *GroupExtra {
  return &GroupExtra{}
}


func (p *GroupExtra) GetCreator() string {
  return p.Creator
}

func (p *GroupExtra) GetPreventedJoinByTicket() bool {
  return p.PreventedJoinByTicket
}

func (p *GroupExtra) GetInvitationTicket() string {
  return p.InvitationTicket
}

func (p *GroupExtra) GetMemberMids() map[string]int64 {
  return p.MemberMids
}

func (p *GroupExtra) GetInviteeMids() map[string]int64 {
  return p.InviteeMids
}
func (p *GroupExtra) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupExtra)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Creator = v
}
  return nil
}

func (p *GroupExtra)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PreventedJoinByTicket = v
}
  return nil
}

func (p *GroupExtra)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InvitationTicket = v
}
  return nil
}

func (p *GroupExtra)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.MemberMids =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.MemberMids[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GroupExtra)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.InviteeMids =  tMap
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
var _val6 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val6 = v
}
    p.InviteeMids[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GroupExtra) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GroupExtra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupExtra) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creator: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Creator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creator (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creator: ", p), err) }
  return err
}

func (p *GroupExtra) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preventedJoinByTicket", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:preventedJoinByTicket: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreventedJoinByTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:preventedJoinByTicket: ", p), err) }
  return err
}

func (p *GroupExtra) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "invitationTicket", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitationTicket: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.InvitationTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitationTicket: ", p), err) }
  return err
}

func (p *GroupExtra) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err) }
  return err
}

func (p *GroupExtra) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inviteeMids", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inviteeMids: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.InviteeMids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.InviteeMids {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inviteeMids: ", p), err) }
  return err
}

func (p *GroupExtra) Equals(other *GroupExtra) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Creator != other.Creator { return false }
  if p.PreventedJoinByTicket != other.PreventedJoinByTicket { return false }
  if p.InvitationTicket != other.InvitationTicket { return false }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for k, _tgt := range p.MemberMids {
    _src7 := other.MemberMids[k]
    if _tgt != _src7 { return false }
  }
  if len(p.InviteeMids) != len(other.InviteeMids) { return false }
  for k, _tgt := range p.InviteeMids {
    _src8 := other.InviteeMids[k]
    if _tgt != _src8 { return false }
  }
  return true
}

func (p *GroupExtra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupExtra(%+v)", *p)
}

type PeerExtra struct {
}

func NewPeerExtra() *PeerExtra {
  return &PeerExtra{}
}

func (p *PeerExtra) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PeerExtra) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PeerExtra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PeerExtra) Equals(other *PeerExtra) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *PeerExtra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PeerExtra(%+v)", *p)
}

// Attributes:
//  - GroupExtra
//  - PeerExtra
type Extra struct {
  GroupExtra *GroupExtra `thrift:"groupExtra,1" db:"groupExtra" json:"groupExtra"`
  PeerExtra *PeerExtra `thrift:"peerExtra,2" db:"peerExtra" json:"peerExtra"`
}

func NewExtra() *Extra {
  return &Extra{}
}

var Extra_GroupExtra_DEFAULT *GroupExtra
func (p *Extra) GetGroupExtra() *GroupExtra {
  if !p.IsSetGroupExtra() {
    return Extra_GroupExtra_DEFAULT
  }
return p.GroupExtra
}
var Extra_PeerExtra_DEFAULT *PeerExtra
func (p *Extra) GetPeerExtra() *PeerExtra {
  if !p.IsSetPeerExtra() {
    return Extra_PeerExtra_DEFAULT
  }
return p.PeerExtra
}
func (p *Extra) IsSetGroupExtra() bool {
  return p.GroupExtra != nil
}

func (p *Extra) IsSetPeerExtra() bool {
  return p.PeerExtra != nil
}

func (p *Extra) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Extra)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.GroupExtra = &GroupExtra{}
  if err := p.GroupExtra.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupExtra), err)
  }
  return nil
}

func (p *Extra)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.PeerExtra = &PeerExtra{}
  if err := p.PeerExtra.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PeerExtra), err)
  }
  return nil
}

func (p *Extra) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Extra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Extra) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupExtra", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupExtra: ", p), err) }
  if err := p.GroupExtra.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupExtra), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupExtra: ", p), err) }
  return err
}

func (p *Extra) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "peerExtra", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:peerExtra: ", p), err) }
  if err := p.PeerExtra.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PeerExtra), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:peerExtra: ", p), err) }
  return err
}

func (p *Extra) Equals(other *Extra) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.GroupExtra.Equals(other.GroupExtra) { return false }
  if !p.PeerExtra.Equals(other.PeerExtra) { return false }
  return true
}

func (p *Extra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Extra(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Type
//  - Name
//  - TargetUserMids
//  - PicturePath
type CreateChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Type ChatType `thrift:"type,2" db:"type" json:"type"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  TargetUserMids []string `thrift:"targetUserMids,4" db:"targetUserMids" json:"targetUserMids"`
  PicturePath string `thrift:"picturePath,5" db:"picturePath" json:"picturePath"`
}

func NewCreateChatRequest() *CreateChatRequest {
  return &CreateChatRequest{}
}


func (p *CreateChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *CreateChatRequest) GetType() ChatType {
  return p.Type
}

func (p *CreateChatRequest) GetName() string {
  return p.Name
}

func (p *CreateChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}

func (p *CreateChatRequest) GetPicturePath() string {
  return p.PicturePath
}
func (p *CreateChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *CreateChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ChatType(v)
  p.Type = temp
}
  return nil
}

func (p *CreateChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CreateChatRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem9)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *CreateChatRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *CreateChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetUserMids: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:picturePath: ", p), err) }
  return err
}

func (p *CreateChatRequest) Equals(other *CreateChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.Type != other.Type { return false }
  if p.Name != other.Name { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src10 := other.TargetUserMids[i]
    if _tgt != _src10 { return false }
  }
  if p.PicturePath != other.PicturePath { return false }
  return true
}

func (p *CreateChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateChatRequest(%+v)", *p)
}

// Attributes:
//  - Type
//  - ChatMid
//  - CreatedTime
//  - NotificationDisabled
//  - FavoriteTimestamp
//  - ChatName
//  - PicturePath
//  - Extra
type Chat struct {
  Type ChatType `thrift:"type,1" db:"type" json:"type"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  CreatedTime int64 `thrift:"createdTime,3" db:"createdTime" json:"createdTime"`
  NotificationDisabled bool `thrift:"notificationDisabled,4" db:"notificationDisabled" json:"notificationDisabled"`
  FavoriteTimestamp int64 `thrift:"favoriteTimestamp,5" db:"favoriteTimestamp" json:"favoriteTimestamp"`
  ChatName string `thrift:"chatName,6" db:"chatName" json:"chatName"`
  PicturePath string `thrift:"picturePath,7" db:"picturePath" json:"picturePath"`
  Extra *Extra `thrift:"extra,8" db:"extra" json:"extra"`
}

func NewChat() *Chat {
  return &Chat{}
}


func (p *Chat) GetType() ChatType {
  return p.Type
}

func (p *Chat) GetChatMid() string {
  return p.ChatMid
}

func (p *Chat) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Chat) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *Chat) GetFavoriteTimestamp() int64 {
  return p.FavoriteTimestamp
}

func (p *Chat) GetChatName() string {
  return p.ChatName
}

func (p *Chat) GetPicturePath() string {
  return p.PicturePath
}
var Chat_Extra_DEFAULT *Extra
func (p *Chat) GetExtra() *Extra {
  if !p.IsSetExtra() {
    return Chat_Extra_DEFAULT
  }
return p.Extra
}
func (p *Chat) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *Chat) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Chat)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ChatType(v)
  p.Type = temp
}
  return nil
}

func (p *Chat)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *Chat)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Chat)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Chat)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FavoriteTimestamp = v
}
  return nil
}

func (p *Chat)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ChatName = v
}
  return nil
}

func (p *Chat)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Chat)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Extra = &Extra{}
  if err := p.Extra.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extra), err)
  }
  return nil
}

func (p *Chat) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Chat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Chat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *Chat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *Chat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createdTime: ", p), err) }
  return err
}

func (p *Chat) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabled", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notificationDisabled: ", p), err) }
  return err
}

func (p *Chat) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "favoriteTimestamp", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:favoriteTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FavoriteTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:favoriteTimestamp: ", p), err) }
  return err
}

func (p *Chat) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chatName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chatName: ", p), err) }
  return err
}

func (p *Chat) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:picturePath: ", p), err) }
  return err
}

func (p *Chat) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "extra", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extra: ", p), err) }
  if err := p.Extra.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extra), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extra: ", p), err) }
  return err
}

func (p *Chat) Equals(other *Chat) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.NotificationDisabled != other.NotificationDisabled { return false }
  if p.FavoriteTimestamp != other.FavoriteTimestamp { return false }
  if p.ChatName != other.ChatName { return false }
  if p.PicturePath != other.PicturePath { return false }
  if !p.Extra.Equals(other.Extra) { return false }
  return true
}

func (p *Chat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Chat(%+v)", *p)
}

// Attributes:
//  - Chat
type CreateChatResponse struct {
  Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewCreateChatResponse() *CreateChatResponse {
  return &CreateChatResponse{}
}

var CreateChatResponse_Chat_DEFAULT *Chat
func (p *CreateChatResponse) GetChat() *Chat {
  if !p.IsSetChat() {
    return CreateChatResponse_Chat_DEFAULT
  }
return p.Chat
}
func (p *CreateChatResponse) IsSetChat() bool {
  return p.Chat != nil
}

func (p *CreateChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateChatResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *CreateChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateChatResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err) }
  if err := p.Chat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err) }
  return err
}

func (p *CreateChatResponse) Equals(other *CreateChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Chat.Equals(other.Chat) { return false }
  return true
}

func (p *CreateChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateChatResponse(%+v)", *p)
}

// Attributes:
//  - Version
//  - UpdatedMillis
//  - Thumbnail
type AvatarProfile struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  UpdatedMillis int64 `thrift:"updatedMillis,2" db:"updatedMillis" json:"updatedMillis"`
  Thumbnail string `thrift:"thumbnail,3" db:"thumbnail" json:"thumbnail"`
}

func NewAvatarProfile() *AvatarProfile {
  return &AvatarProfile{}
}


func (p *AvatarProfile) GetVersion() string {
  return p.Version
}

func (p *AvatarProfile) GetUpdatedMillis() int64 {
  return p.UpdatedMillis
}

func (p *AvatarProfile) GetThumbnail() string {
  return p.Thumbnail
}
func (p *AvatarProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AvatarProfile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *AvatarProfile)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UpdatedMillis = v
}
  return nil
}

func (p *AvatarProfile)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Thumbnail = v
}
  return nil
}

func (p *AvatarProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AvatarProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AvatarProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *AvatarProfile) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updatedMillis", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updatedMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UpdatedMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedMillis (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updatedMillis: ", p), err) }
  return err
}

func (p *AvatarProfile) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnail", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:thumbnail: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Thumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnail (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:thumbnail: ", p), err) }
  return err
}

func (p *AvatarProfile) Equals(other *AvatarProfile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.UpdatedMillis != other.UpdatedMillis { return false }
  if p.Thumbnail != other.Thumbnail { return false }
  return true
}

func (p *AvatarProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AvatarProfile(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Type
//  - Status
//  - Relation
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - DisplayNameOverridden
//  - FavoriteTime
//  - CapableVoiceCall
//  - CapableVideoCall
//  - CapableMyhome
//  - CapableBuddy
//  - Attributes
//  - Settings
//  - PicturePath
//  - RecommendParams
//  - FriendRequestStatus
//  - MusicProfile
//  - SvideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
type Contact struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Type MIDType `thrift:"type,10" db:"type" json:"type"`
  Status ContactStatus `thrift:"status,11" db:"status" json:"status"`
  // unused fields # 12 to 20
  Relation ContactRelation `thrift:"relation,21" db:"relation" json:"relation"`
  DisplayName string `thrift:"displayName,22" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,23" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,24" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,25" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,26" db:"statusMessage" json:"statusMessage"`
  DisplayNameOverridden string `thrift:"displayNameOverridden,27" db:"displayNameOverridden" json:"displayNameOverridden"`
  FavoriteTime int64 `thrift:"favoriteTime,28" db:"favoriteTime" json:"favoriteTime"`
  // unused fields # 29 to 30
  CapableVoiceCall bool `thrift:"capableVoiceCall,31" db:"capableVoiceCall" json:"capableVoiceCall"`
  CapableVideoCall bool `thrift:"capableVideoCall,32" db:"capableVideoCall" json:"capableVideoCall"`
  CapableMyhome bool `thrift:"capableMyhome,33" db:"capableMyhome" json:"capableMyhome"`
  CapableBuddy bool `thrift:"capableBuddy,34" db:"capableBuddy" json:"capableBuddy"`
  Attributes int32 `thrift:"attributes,35" db:"attributes" json:"attributes"`
  Settings int64 `thrift:"settings,36" db:"settings" json:"settings"`
  PicturePath string `thrift:"picturePath,37" db:"picturePath" json:"picturePath"`
  RecommendParams string `thrift:"recommendParams,38" db:"recommendParams" json:"recommendParams"`
  FriendRequestStatus FriendRequestStatus `thrift:"friendRequestStatus,39" db:"friendRequestStatus" json:"friendRequestStatus"`
  MusicProfile string `thrift:"musicProfile,40" db:"musicProfile" json:"musicProfile"`
  // unused field # 41
  SvideoProfile string `thrift:"svideoProfile,42" db:"svideoProfile" json:"svideoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,43" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
  AvatarProfile *AvatarProfile `thrift:"avatarProfile,44" db:"avatarProfile" json:"avatarProfile"`
}

func NewContact() *Contact {
  return &Contact{}
}


func (p *Contact) GetMid() string {
  return p.Mid
}

func (p *Contact) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Contact) GetType() MIDType {
  return p.Type
}

func (p *Contact) GetStatus() ContactStatus {
  return p.Status
}

func (p *Contact) GetRelation() ContactRelation {
  return p.Relation
}

func (p *Contact) GetDisplayName() string {
  return p.DisplayName
}

func (p *Contact) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *Contact) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Contact) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *Contact) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *Contact) GetDisplayNameOverridden() string {
  return p.DisplayNameOverridden
}

func (p *Contact) GetFavoriteTime() int64 {
  return p.FavoriteTime
}

func (p *Contact) GetCapableVoiceCall() bool {
  return p.CapableVoiceCall
}

func (p *Contact) GetCapableVideoCall() bool {
  return p.CapableVideoCall
}

func (p *Contact) GetCapableMyhome() bool {
  return p.CapableMyhome
}

func (p *Contact) GetCapableBuddy() bool {
  return p.CapableBuddy
}

func (p *Contact) GetAttributes() int32 {
  return p.Attributes
}

func (p *Contact) GetSettings() int64 {
  return p.Settings
}

func (p *Contact) GetPicturePath() string {
  return p.PicturePath
}

func (p *Contact) GetRecommendParams() string {
  return p.RecommendParams
}

func (p *Contact) GetFriendRequestStatus() FriendRequestStatus {
  return p.FriendRequestStatus
}

func (p *Contact) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *Contact) GetSvideoProfile() string {
  return p.SvideoProfile
}

func (p *Contact) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
var Contact_AvatarProfile_DEFAULT *AvatarProfile
func (p *Contact) GetAvatarProfile() *AvatarProfile {
  if !p.IsSetAvatarProfile() {
    return Contact_AvatarProfile_DEFAULT
  }
return p.AvatarProfile
}
func (p *Contact) IsSetAvatarProfile() bool {
  return p.AvatarProfile != nil
}

func (p *Contact) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Contact)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Contact)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Contact)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := MIDType(v)
  p.Type = temp
}
  return nil
}

func (p *Contact)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := ContactStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Contact)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  temp := ContactRelation(v)
  p.Relation = temp
}
  return nil
}

func (p *Contact)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Contact)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *Contact)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Contact)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *Contact)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *Contact)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.DisplayNameOverridden = v
}
  return nil
}

func (p *Contact)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.FavoriteTime = v
}
  return nil
}

func (p *Contact)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.CapableVoiceCall = v
}
  return nil
}

func (p *Contact)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.CapableVideoCall = v
}
  return nil
}

func (p *Contact)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.CapableMyhome = v
}
  return nil
}

func (p *Contact)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.CapableBuddy = v
}
  return nil
}

func (p *Contact)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.Attributes = v
}
  return nil
}

func (p *Contact)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.Settings = v
}
  return nil
}

func (p *Contact)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Contact)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.RecommendParams = v
}
  return nil
}

func (p *Contact)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  temp := FriendRequestStatus(v)
  p.FriendRequestStatus = temp
}
  return nil
}

func (p *Contact)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *Contact)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.SvideoProfile = v
}
  return nil
}

func (p *Contact)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.StatusMessageContentMetadata[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Contact)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  p.AvatarProfile = &AvatarProfile{}
  if err := p.AvatarProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
  }
  return nil
}

func (p *Contact) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Contact"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Contact) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Contact) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Contact) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err) }
  return err
}

func (p *Contact) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:status: ", p), err) }
  return err
}

func (p *Contact) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relation", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relation: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Relation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relation (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relation: ", p), err) }
  return err
}

func (p *Contact) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:displayName: ", p), err) }
  return err
}

func (p *Contact) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneticName", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:phoneticName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:phoneticName: ", p), err) }
  return err
}

func (p *Contact) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:pictureStatus: ", p), err) }
  return err
}

func (p *Contact) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnailUrl", thrift.STRING, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:thumbnailUrl: ", p), err) }
  return err
}

func (p *Contact) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessage", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:statusMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:statusMessage: ", p), err) }
  return err
}

func (p *Contact) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayNameOverridden", thrift.STRING, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:displayNameOverridden: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayNameOverridden)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayNameOverridden (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:displayNameOverridden: ", p), err) }
  return err
}

func (p *Contact) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "favoriteTime", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:favoriteTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FavoriteTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTime (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:favoriteTime: ", p), err) }
  return err
}

func (p *Contact) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableVoiceCall", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:capableVoiceCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableVoiceCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVoiceCall (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:capableVoiceCall: ", p), err) }
  return err
}

func (p *Contact) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableVideoCall", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:capableVideoCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableVideoCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVideoCall (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:capableVideoCall: ", p), err) }
  return err
}

func (p *Contact) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableMyhome", thrift.BOOL, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:capableMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:capableMyhome: ", p), err) }
  return err
}

func (p *Contact) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableBuddy", thrift.BOOL, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:capableBuddy: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableBuddy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableBuddy (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:capableBuddy: ", p), err) }
  return err
}

func (p *Contact) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributes", thrift.I32, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:attributes: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Attributes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attributes (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:attributes: ", p), err) }
  return err
}

func (p *Contact) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "settings", thrift.I64, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:settings: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Settings)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settings (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:settings: ", p), err) }
  return err
}

func (p *Contact) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:picturePath: ", p), err) }
  return err
}

func (p *Contact) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendParams", thrift.STRING, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:recommendParams: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RecommendParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendParams (38) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:recommendParams: ", p), err) }
  return err
}

func (p *Contact) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "friendRequestStatus", thrift.I32, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:friendRequestStatus: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FriendRequestStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.friendRequestStatus (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:friendRequestStatus: ", p), err) }
  return err
}

func (p *Contact) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "musicProfile", thrift.STRING, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:musicProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:musicProfile: ", p), err) }
  return err
}

func (p *Contact) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "svideoProfile", thrift.STRING, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:svideoProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SvideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.svideoProfile (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:svideoProfile: ", p), err) }
  return err
}

func (p *Contact) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessageContentMetadata", thrift.MAP, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *Contact) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avatarProfile", thrift.STRUCT, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:avatarProfile: ", p), err) }
  if err := p.AvatarProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:avatarProfile: ", p), err) }
  return err
}

func (p *Contact) Equals(other *Contact) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.Type != other.Type { return false }
  if p.Status != other.Status { return false }
  if p.Relation != other.Relation { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PhoneticName != other.PhoneticName { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  if p.ThumbnailUrl != other.ThumbnailUrl { return false }
  if p.StatusMessage != other.StatusMessage { return false }
  if p.DisplayNameOverridden != other.DisplayNameOverridden { return false }
  if p.FavoriteTime != other.FavoriteTime { return false }
  if p.CapableVoiceCall != other.CapableVoiceCall { return false }
  if p.CapableVideoCall != other.CapableVideoCall { return false }
  if p.CapableMyhome != other.CapableMyhome { return false }
  if p.CapableBuddy != other.CapableBuddy { return false }
  if p.Attributes != other.Attributes { return false }
  if p.Settings != other.Settings { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.RecommendParams != other.RecommendParams { return false }
  if p.FriendRequestStatus != other.FriendRequestStatus { return false }
  if p.MusicProfile != other.MusicProfile { return false }
  if p.SvideoProfile != other.SvideoProfile { return false }
  if len(p.StatusMessageContentMetadata) != len(other.StatusMessageContentMetadata) { return false }
  for k, _tgt := range p.StatusMessageContentMetadata {
    _src13 := other.StatusMessageContentMetadata[k]
    if _tgt != _src13 { return false }
  }
  if !p.AvatarProfile.Equals(other.AvatarProfile) { return false }
  return true
}

func (p *Contact) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Contact(%+v)", *p)
}

// Attributes:
//  - ID
//  - ExpirationTime
//  - MaxUseCount
type Ticket struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  ExpirationTime int64 `thrift:"expirationTime,2" db:"expirationTime" json:"expirationTime"`
  MaxUseCount int32 `thrift:"maxUseCount,3" db:"maxUseCount" json:"maxUseCount"`
}

func NewTicket() *Ticket {
  return &Ticket{}
}


func (p *Ticket) GetID() string {
  return p.ID
}

func (p *Ticket) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *Ticket) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *Ticket) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Ticket)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Ticket)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *Ticket)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *Ticket) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ticket"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ticket) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Ticket) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expirationTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:expirationTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:expirationTime: ", p), err) }
  return err
}

func (p *Ticket) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxUseCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxUseCount: ", p), err) }
  return err
}

func (p *Ticket) Equals(other *Ticket) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.ExpirationTime != other.ExpirationTime { return false }
  if p.MaxUseCount != other.MaxUseCount { return false }
  return true
}

func (p *Ticket) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ticket(%+v)", *p)
}

// Attributes:
//  - Mid
//  - EMid
type FollowMid struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  EMid string `thrift:"eMid,2" db:"eMid" json:"eMid"`
}

func NewFollowMid() *FollowMid {
  return &FollowMid{}
}


func (p *FollowMid) GetMid() string {
  return p.Mid
}

func (p *FollowMid) GetEMid() string {
  return p.EMid
}
func (p *FollowMid) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowMid)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *FollowMid)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *FollowMid) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowMid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowMid) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *FollowMid) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eMid: ", p), err) }
  return err
}

func (p *FollowMid) Equals(other *FollowMid) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.EMid != other.EMid { return false }
  return true
}

func (p *FollowMid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowMid(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - Cursor
type GetFollowersRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
}

func NewGetFollowersRequest() *GetFollowersRequest {
  return &GetFollowersRequest{}
}

var GetFollowersRequest_FollowMid_DEFAULT *FollowMid
func (p *GetFollowersRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return GetFollowersRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}

func (p *GetFollowersRequest) GetCursor() string {
  return p.Cursor
}
func (p *GetFollowersRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *GetFollowersRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowersRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *GetFollowersRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowersRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowersRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowersRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *GetFollowersRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowersRequest) Equals(other *GetFollowersRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  if p.Cursor != other.Cursor { return false }
  return true
}

func (p *GetFollowersRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowersRequest(%+v)", *p)
}

// Attributes:
//  - IconType
type FollowBuddyDetail struct {
  IconType int32 `thrift:"iconType,1" db:"iconType" json:"iconType"`
}

func NewFollowBuddyDetail() *FollowBuddyDetail {
  return &FollowBuddyDetail{}
}


func (p *FollowBuddyDetail) GetIconType() int32 {
  return p.IconType
}
func (p *FollowBuddyDetail) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowBuddyDetail)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IconType = v
}
  return nil
}

func (p *FollowBuddyDetail) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowBuddyDetail"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowBuddyDetail) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iconType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iconType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IconType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iconType: ", p), err) }
  return err
}

func (p *FollowBuddyDetail) Equals(other *FollowBuddyDetail) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IconType != other.IconType { return false }
  return true
}

func (p *FollowBuddyDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowBuddyDetail(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - DisplayName
//  - PicturePath
//  - Following
//  - AllowFollow
//  - FollowBuddyDetail
type FollowProfile struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  PicturePath string `thrift:"picturePath,3" db:"picturePath" json:"picturePath"`
  Following bool `thrift:"following,4" db:"following" json:"following"`
  AllowFollow bool `thrift:"allowFollow,5" db:"allowFollow" json:"allowFollow"`
  FollowBuddyDetail *FollowBuddyDetail `thrift:"followBuddyDetail,6" db:"followBuddyDetail" json:"followBuddyDetail"`
}

func NewFollowProfile() *FollowProfile {
  return &FollowProfile{}
}

var FollowProfile_FollowMid_DEFAULT *FollowMid
func (p *FollowProfile) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return FollowProfile_FollowMid_DEFAULT
  }
return p.FollowMid
}

func (p *FollowProfile) GetDisplayName() string {
  return p.DisplayName
}

func (p *FollowProfile) GetPicturePath() string {
  return p.PicturePath
}

func (p *FollowProfile) GetFollowing() bool {
  return p.Following
}

func (p *FollowProfile) GetAllowFollow() bool {
  return p.AllowFollow
}
var FollowProfile_FollowBuddyDetail_DEFAULT *FollowBuddyDetail
func (p *FollowProfile) GetFollowBuddyDetail() *FollowBuddyDetail {
  if !p.IsSetFollowBuddyDetail() {
    return FollowProfile_FollowBuddyDetail_DEFAULT
  }
return p.FollowBuddyDetail
}
func (p *FollowProfile) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *FollowProfile) IsSetFollowBuddyDetail() bool {
  return p.FollowBuddyDetail != nil
}

func (p *FollowProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowProfile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *FollowProfile)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *FollowProfile)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *FollowProfile)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Following = v
}
  return nil
}

func (p *FollowProfile)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AllowFollow = v
}
  return nil
}

func (p *FollowProfile)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowBuddyDetail = &FollowBuddyDetail{}
  if err := p.FollowBuddyDetail.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowBuddyDetail), err)
  }
  return nil
}

func (p *FollowProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *FollowProfile) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *FollowProfile) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:picturePath: ", p), err) }
  return err
}

func (p *FollowProfile) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "following", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:following: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Following)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.following (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:following: ", p), err) }
  return err
}

func (p *FollowProfile) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowFollow", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:allowFollow: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowFollow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowFollow (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:allowFollow: ", p), err) }
  return err
}

func (p *FollowProfile) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followBuddyDetail", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:followBuddyDetail: ", p), err) }
  if err := p.FollowBuddyDetail.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowBuddyDetail), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:followBuddyDetail: ", p), err) }
  return err
}

func (p *FollowProfile) Equals(other *FollowProfile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.Following != other.Following { return false }
  if p.AllowFollow != other.AllowFollow { return false }
  if !p.FollowBuddyDetail.Equals(other.FollowBuddyDetail) { return false }
  return true
}

func (p *FollowProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowProfile(%+v)", *p)
}

// Attributes:
//  - Profiles
//  - Cursor
//  - FollowingCount
//  - FollowerCount
type GetFollowersResponse struct {
  Profiles []*FollowProfile `thrift:"profiles,1" db:"profiles" json:"profiles"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
  FollowingCount int64 `thrift:"followingCount,3" db:"followingCount" json:"followingCount"`
  FollowerCount int64 `thrift:"followerCount,4" db:"followerCount" json:"followerCount"`
}

func NewGetFollowersResponse() *GetFollowersResponse {
  return &GetFollowersResponse{}
}


func (p *GetFollowersResponse) GetProfiles() []*FollowProfile {
  return p.Profiles
}

func (p *GetFollowersResponse) GetCursor() string {
  return p.Cursor
}

func (p *GetFollowersResponse) GetFollowingCount() int64 {
  return p.FollowingCount
}

func (p *GetFollowersResponse) GetFollowerCount() int64 {
  return p.FollowerCount
}
func (p *GetFollowersResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowersResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FollowProfile, 0, size)
  p.Profiles =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &FollowProfile{}
    if err := _elem14.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Profiles = append(p.Profiles, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetFollowersResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowersResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FollowingCount = v
}
  return nil
}

func (p *GetFollowersResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FollowerCount = v
}
  return nil
}

func (p *GetFollowersResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowersResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowersResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profiles", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profiles: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Profiles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Profiles {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profiles: ", p), err) }
  return err
}

func (p *GetFollowersResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowersResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followingCount", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followingCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FollowingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followingCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followingCount: ", p), err) }
  return err
}

func (p *GetFollowersResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followerCount", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:followerCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FollowerCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followerCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:followerCount: ", p), err) }
  return err
}

func (p *GetFollowersResponse) Equals(other *GetFollowersResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Profiles) != len(other.Profiles) { return false }
  for i, _tgt := range p.Profiles {
    _src15 := other.Profiles[i]
    if !_tgt.Equals(_src15) { return false }
  }
  if p.Cursor != other.Cursor { return false }
  if p.FollowingCount != other.FollowingCount { return false }
  if p.FollowerCount != other.FollowerCount { return false }
  return true
}

func (p *GetFollowersResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowersResponse(%+v)", *p)
}

// Attributes:
//  - Version
//  - KeyId
//  - KeyData
//  - CreatedTime
type E2EEPublicKey struct {
  Version int32 `thrift:"version,1" db:"version" json:"version"`
  KeyId int32 `thrift:"keyId,2" db:"keyId" json:"keyId"`
  // unused field # 3
  KeyData []byte `thrift:"keyData,4" db:"keyData" json:"keyData"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
}

func NewE2EEPublicKey() *E2EEPublicKey {
  return &E2EEPublicKey{}
}


func (p *E2EEPublicKey) GetVersion() int32 {
  return p.Version
}

func (p *E2EEPublicKey) GetKeyId() int32 {
  return p.KeyId
}

func (p *E2EEPublicKey) GetKeyData() []byte {
  return p.KeyData
}

func (p *E2EEPublicKey) GetCreatedTime() int64 {
  return p.CreatedTime
}
func (p *E2EEPublicKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EEPublicKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyId = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeyData = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *E2EEPublicKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "E2EEPublicKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EEPublicKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyId: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyData", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyData: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.KeyData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyData: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *E2EEPublicKey) Equals(other *E2EEPublicKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.KeyId != other.KeyId { return false }
  if bytes.Compare(p.KeyData, other.KeyData) != 0 { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  return true
}

func (p *E2EEPublicKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EEPublicKey(%+v)", *p)
}

// Attributes:
//  - MetaData
//  - ForceRegistration
//  - VerificationCode
type IdentifierConfirmationRequest struct {
  MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
  ForceRegistration bool `thrift:"forceRegistration,2" db:"forceRegistration" json:"forceRegistration"`
  VerificationCode string `thrift:"verificationCode,3" db:"verificationCode" json:"verificationCode"`
}

func NewIdentifierConfirmationRequest() *IdentifierConfirmationRequest {
  return &IdentifierConfirmationRequest{}
}


func (p *IdentifierConfirmationRequest) GetMetaData() map[string]string {
  return p.MetaData
}

func (p *IdentifierConfirmationRequest) GetForceRegistration() bool {
  return p.ForceRegistration
}

func (p *IdentifierConfirmationRequest) GetVerificationCode() string {
  return p.VerificationCode
}
func (p *IdentifierConfirmationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdentifierConfirmationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key16 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key16 = v
}
var _val17 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val17 = v
}
    p.MetaData[_key16] = _val17
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *IdentifierConfirmationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ForceRegistration = v
}
  return nil
}

func (p *IdentifierConfirmationRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VerificationCode = v
}
  return nil
}

func (p *IdentifierConfirmationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdentifierConfirmationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdentifierConfirmationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err) }
  return err
}

func (p *IdentifierConfirmationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "forceRegistration", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:forceRegistration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ForceRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.forceRegistration (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:forceRegistration: ", p), err) }
  return err
}

func (p *IdentifierConfirmationRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verificationCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verificationCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VerificationCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verificationCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verificationCode: ", p), err) }
  return err
}

func (p *IdentifierConfirmationRequest) Equals(other *IdentifierConfirmationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src18 := other.MetaData[k]
    if _tgt != _src18 { return false }
  }
  if p.ForceRegistration != other.ForceRegistration { return false }
  if p.VerificationCode != other.VerificationCode { return false }
  return true
}

func (p *IdentifierConfirmationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdentifierConfirmationRequest(%+v)", *p)
}

// Attributes:
//  - MetaData
//  - IdentityProvider
//  - CipherKeyId
//  - CipherText
//  - ConfirmationRequest
type IdentityCredentialRequest struct {
  MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
  IdentityProvider Provider `thrift:"identityProvider,2" db:"identityProvider" json:"identityProvider"`
  CipherKeyId string `thrift:"cipherKeyId,3" db:"cipherKeyId" json:"cipherKeyId"`
  CipherText string `thrift:"cipherText,4" db:"cipherText" json:"cipherText"`
  ConfirmationRequest *IdentifierConfirmationRequest `thrift:"confirmationRequest,5" db:"confirmationRequest" json:"confirmationRequest"`
}

func NewIdentityCredentialRequest() *IdentityCredentialRequest {
  return &IdentityCredentialRequest{}
}


func (p *IdentityCredentialRequest) GetMetaData() map[string]string {
  return p.MetaData
}

func (p *IdentityCredentialRequest) GetIdentityProvider() Provider {
  return p.IdentityProvider
}

func (p *IdentityCredentialRequest) GetCipherKeyId() string {
  return p.CipherKeyId
}

func (p *IdentityCredentialRequest) GetCipherText() string {
  return p.CipherText
}
var IdentityCredentialRequest_ConfirmationRequest_DEFAULT *IdentifierConfirmationRequest
func (p *IdentityCredentialRequest) GetConfirmationRequest() *IdentifierConfirmationRequest {
  if !p.IsSetConfirmationRequest() {
    return IdentityCredentialRequest_ConfirmationRequest_DEFAULT
  }
return p.ConfirmationRequest
}
func (p *IdentityCredentialRequest) IsSetConfirmationRequest() bool {
  return p.ConfirmationRequest != nil
}

func (p *IdentityCredentialRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdentityCredentialRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key19 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key19 = v
}
var _val20 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val20 = v
}
    p.MetaData[_key19] = _val20
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *IdentityCredentialRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Provider(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *IdentityCredentialRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CipherKeyId = v
}
  return nil
}

func (p *IdentityCredentialRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CipherText = v
}
  return nil
}

func (p *IdentityCredentialRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.ConfirmationRequest = &IdentifierConfirmationRequest{}
  if err := p.ConfirmationRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConfirmationRequest), err)
  }
  return nil
}

func (p *IdentityCredentialRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdentityCredentialRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdentityCredentialRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityProvider", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityProvider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityProvider: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cipherKeyId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cipherKeyId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CipherKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cipherKeyId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cipherKeyId: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cipherText", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cipherText: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CipherText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cipherText (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cipherText: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "confirmationRequest", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:confirmationRequest: ", p), err) }
  if err := p.ConfirmationRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConfirmationRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:confirmationRequest: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) Equals(other *IdentityCredentialRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src21 := other.MetaData[k]
    if _tgt != _src21 { return false }
  }
  if p.IdentityProvider != other.IdentityProvider { return false }
  if p.CipherKeyId != other.CipherKeyId { return false }
  if p.CipherText != other.CipherText { return false }
  if !p.ConfirmationRequest.Equals(other.ConfirmationRequest) { return false }
  return true
}

func (p *IdentityCredentialRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdentityCredentialRequest(%+v)", *p)
}

// Attributes:
//  - MetaData
//  - ResponseType
//  - ConfirmationVerifier
//  - TimeoutInSeconds
type IdentityCredentialResponse struct {
  MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
  ResponseType ResponseType `thrift:"responseType,2" db:"responseType" json:"responseType"`
  ConfirmationVerifier string `thrift:"confirmationVerifier,3" db:"confirmationVerifier" json:"confirmationVerifier"`
  TimeoutInSeconds int64 `thrift:"timeoutInSeconds,4" db:"timeoutInSeconds" json:"timeoutInSeconds"`
}

func NewIdentityCredentialResponse() *IdentityCredentialResponse {
  return &IdentityCredentialResponse{}
}


func (p *IdentityCredentialResponse) GetMetaData() map[string]string {
  return p.MetaData
}

func (p *IdentityCredentialResponse) GetResponseType() ResponseType {
  return p.ResponseType
}

func (p *IdentityCredentialResponse) GetConfirmationVerifier() string {
  return p.ConfirmationVerifier
}

func (p *IdentityCredentialResponse) GetTimeoutInSeconds() int64 {
  return p.TimeoutInSeconds
}
func (p *IdentityCredentialResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdentityCredentialResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key22 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key22 = v
}
var _val23 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val23 = v
}
    p.MetaData[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *IdentityCredentialResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ResponseType(v)
  p.ResponseType = temp
}
  return nil
}

func (p *IdentityCredentialResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ConfirmationVerifier = v
}
  return nil
}

func (p *IdentityCredentialResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TimeoutInSeconds = v
}
  return nil
}

func (p *IdentityCredentialResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdentityCredentialResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdentityCredentialResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err) }
  return err
}

func (p *IdentityCredentialResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responseType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:responseType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ResponseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.responseType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:responseType: ", p), err) }
  return err
}

func (p *IdentityCredentialResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "confirmationVerifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:confirmationVerifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ConfirmationVerifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.confirmationVerifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:confirmationVerifier: ", p), err) }
  return err
}

func (p *IdentityCredentialResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timeoutInSeconds", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeoutInSeconds: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeoutInSeconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeoutInSeconds (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeoutInSeconds: ", p), err) }
  return err
}

func (p *IdentityCredentialResponse) Equals(other *IdentityCredentialResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src24 := other.MetaData[k]
    if _tgt != _src24 { return false }
  }
  if p.ResponseType != other.ResponseType { return false }
  if p.ConfirmationVerifier != other.ConfirmationVerifier { return false }
  if p.TimeoutInSeconds != other.TimeoutInSeconds { return false }
  return true
}

func (p *IdentityCredentialResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdentityCredentialResponse(%+v)", *p)
}

// Attributes:
//  - Provider
//  - Identifier
//  - Password
type IdentityCredential struct {
  Provider Provider `thrift:"provider,1" db:"provider" json:"provider"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewIdentityCredential() *IdentityCredential {
  return &IdentityCredential{}
}


func (p *IdentityCredential) GetProvider() Provider {
  return p.Provider
}

func (p *IdentityCredential) GetIdentifier() string {
  return p.Identifier
}

func (p *IdentityCredential) GetPassword() string {
  return p.Password
}
func (p *IdentityCredential) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdentityCredential)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Provider(v)
  p.Provider = temp
}
  return nil
}

func (p *IdentityCredential)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *IdentityCredential)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *IdentityCredential) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdentityCredential"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdentityCredential) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:provider: ", p), err) }
  return err
}

func (p *IdentityCredential) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *IdentityCredential) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *IdentityCredential) Equals(other *IdentityCredential) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Provider != other.Provider { return false }
  if p.Identifier != other.Identifier { return false }
  if p.Password != other.Password { return false }
  return true
}

func (p *IdentityCredential) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdentityCredential(%+v)", *p)
}

// Attributes:
//  - PhoneNumberRegistered
//  - RegisteredSnsIdTypes
//  - AccountMigrationCheckType
type UserAuthStatus struct {
  PhoneNumberRegistered bool `thrift:"phoneNumberRegistered,1" db:"phoneNumberRegistered" json:"phoneNumberRegistered"`
  RegisteredSnsIdTypes []SnSIdTyoe `thrift:"registeredSnsIdTypes,2" db:"registeredSnsIdTypes" json:"registeredSnsIdTypes"`
  AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,3" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
}

func NewUserAuthStatus() *UserAuthStatus {
  return &UserAuthStatus{}
}


func (p *UserAuthStatus) GetPhoneNumberRegistered() bool {
  return p.PhoneNumberRegistered
}

func (p *UserAuthStatus) GetRegisteredSnsIdTypes() []SnSIdTyoe {
  return p.RegisteredSnsIdTypes
}

func (p *UserAuthStatus) GetAccountMigrationCheckType() AccountMigrationCheckType {
  return p.AccountMigrationCheckType
}
func (p *UserAuthStatus) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAuthStatus)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PhoneNumberRegistered = v
}
  return nil
}

func (p *UserAuthStatus)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]SnSIdTyoe, 0, size)
  p.RegisteredSnsIdTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem25 SnSIdTyoe
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SnSIdTyoe(v)
    _elem25 = temp
}
    p.RegisteredSnsIdTypes = append(p.RegisteredSnsIdTypes, _elem25)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserAuthStatus)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := AccountMigrationCheckType(v)
  p.AccountMigrationCheckType = temp
}
  return nil
}

func (p *UserAuthStatus) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserAuthStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAuthStatus) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumberRegistered", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phoneNumberRegistered: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PhoneNumberRegistered)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumberRegistered (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phoneNumberRegistered: ", p), err) }
  return err
}

func (p *UserAuthStatus) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "registeredSnsIdTypes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:registeredSnsIdTypes: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.RegisteredSnsIdTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RegisteredSnsIdTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:registeredSnsIdTypes: ", p), err) }
  return err
}

func (p *UserAuthStatus) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationCheckType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accountMigrationCheckType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccountMigrationCheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accountMigrationCheckType: ", p), err) }
  return err
}

func (p *UserAuthStatus) Equals(other *UserAuthStatus) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PhoneNumberRegistered != other.PhoneNumberRegistered { return false }
  if len(p.RegisteredSnsIdTypes) != len(other.RegisteredSnsIdTypes) { return false }
  for i, _tgt := range p.RegisteredSnsIdTypes {
    _src26 := other.RegisteredSnsIdTypes[i]
    if _tgt != _src26 { return false }
  }
  if p.AccountMigrationCheckType != other.AccountMigrationCheckType { return false }
  return true
}

func (p *UserAuthStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAuthStatus(%+v)", *p)
}

// Attributes:
//  - BotMid
//  - Revision
type GetBuddyStatusBarV2Request struct {
  BotMid string `thrift:"botMid,1" db:"botMid" json:"botMid"`
  Revision int64 `thrift:"revision,2" db:"revision" json:"revision"`
}

func NewGetBuddyStatusBarV2Request() *GetBuddyStatusBarV2Request {
  return &GetBuddyStatusBarV2Request{}
}


func (p *GetBuddyStatusBarV2Request) GetBotMid() string {
  return p.BotMid
}

func (p *GetBuddyStatusBarV2Request) GetRevision() int64 {
  return p.Revision
}
func (p *GetBuddyStatusBarV2Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetBuddyStatusBarV2Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BotMid = v
}
  return nil
}

func (p *GetBuddyStatusBarV2Request)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *GetBuddyStatusBarV2Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetBuddyStatusBarV2Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetBuddyStatusBarV2Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "botMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:botMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BotMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:botMid: ", p), err) }
  return err
}

func (p *GetBuddyStatusBarV2Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err) }
  return err
}

func (p *GetBuddyStatusBarV2Request) Equals(other *GetBuddyStatusBarV2Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.BotMid != other.BotMid { return false }
  if p.Revision != other.Revision { return false }
  return true
}

func (p *GetBuddyStatusBarV2Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetBuddyStatusBarV2Request(%+v)", *p)
}

// Attributes:
//  - Label
//  - DisplayType
//  - Title
//  - IconUrl
//  - LinkUrl
type BuddyStatusBar struct {
  Label string `thrift:"label,1" db:"label" json:"label"`
  DisplayType DisplayType `thrift:"displayType,2" db:"displayType" json:"displayType"`
  Title string `thrift:"title,3" db:"title" json:"title"`
  IconUrl string `thrift:"iconUrl,4" db:"iconUrl" json:"iconUrl"`
  LinkUrl string `thrift:"linkUrl,5" db:"linkUrl" json:"linkUrl"`
}

func NewBuddyStatusBar() *BuddyStatusBar {
  return &BuddyStatusBar{}
}


func (p *BuddyStatusBar) GetLabel() string {
  return p.Label
}

func (p *BuddyStatusBar) GetDisplayType() DisplayType {
  return p.DisplayType
}

func (p *BuddyStatusBar) GetTitle() string {
  return p.Title
}

func (p *BuddyStatusBar) GetIconUrl() string {
  return p.IconUrl
}

func (p *BuddyStatusBar) GetLinkUrl() string {
  return p.LinkUrl
}
func (p *BuddyStatusBar) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyStatusBar)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Label = v
}
  return nil
}

func (p *BuddyStatusBar)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := DisplayType(v)
  p.DisplayType = temp
}
  return nil
}

func (p *BuddyStatusBar)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *BuddyStatusBar)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IconUrl = v
}
  return nil
}

func (p *BuddyStatusBar)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LinkUrl = v
}
  return nil
}

func (p *BuddyStatusBar) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BuddyStatusBar"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyStatusBar) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "label", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:label: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Label)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.label (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:label: ", p), err) }
  return err
}

func (p *BuddyStatusBar) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DisplayType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayType: ", p), err) }
  return err
}

func (p *BuddyStatusBar) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *BuddyStatusBar) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iconUrl", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:iconUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IconUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconUrl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:iconUrl: ", p), err) }
  return err
}

func (p *BuddyStatusBar) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "linkUrl", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:linkUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LinkUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.linkUrl (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:linkUrl: ", p), err) }
  return err
}

func (p *BuddyStatusBar) Equals(other *BuddyStatusBar) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Label != other.Label { return false }
  if p.DisplayType != other.DisplayType { return false }
  if p.Title != other.Title { return false }
  if p.IconUrl != other.IconUrl { return false }
  if p.LinkUrl != other.LinkUrl { return false }
  return true
}

func (p *BuddyStatusBar) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyStatusBar(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Type
//  - DialedNumber
//  - CalledNumber
//  - ToMid
//  - ToName
//  - SetupTime
//  - StartTime
//  - EndTime
//  - Duration
//  - Terminate
//  - ProductType
//  - Charge
//  - Unit
//  - Result_
type Historys struct {
  Seq int64 `thrift:"seq,1" db:"seq" json:"seq"`
  Type HistorysType `thrift:"type,2" db:"type" json:"type"`
  DialedNumber string `thrift:"dialedNumber,3" db:"dialedNumber" json:"dialedNumber"`
  CalledNumber string `thrift:"calledNumber,4" db:"calledNumber" json:"calledNumber"`
  ToMid string `thrift:"toMid,5" db:"toMid" json:"toMid"`
  ToName string `thrift:"toName,6" db:"toName" json:"toName"`
  SetupTime int64 `thrift:"setupTime,7" db:"setupTime" json:"setupTime"`
  StartTime int64 `thrift:"startTime,8" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,9" db:"endTime" json:"endTime"`
  Duration int64 `thrift:"duration,10" db:"duration" json:"duration"`
  Terminate int32 `thrift:"terminate,11" db:"terminate" json:"terminate"`
  ProductType ProductType `thrift:"productType,12" db:"productType" json:"productType"`
  Charge int32 `thrift:"charge,13" db:"charge" json:"charge"`
  Unit string `thrift:"unit,14" db:"unit" json:"unit"`
  Result_ string `thrift:"result,15" db:"result" json:"result"`
}

func NewHistorys() *Historys {
  return &Historys{}
}


func (p *Historys) GetSeq() int64 {
  return p.Seq
}

func (p *Historys) GetType() HistorysType {
  return p.Type
}

func (p *Historys) GetDialedNumber() string {
  return p.DialedNumber
}

func (p *Historys) GetCalledNumber() string {
  return p.CalledNumber
}

func (p *Historys) GetToMid() string {
  return p.ToMid
}

func (p *Historys) GetToName() string {
  return p.ToName
}

func (p *Historys) GetSetupTime() int64 {
  return p.SetupTime
}

func (p *Historys) GetStartTime() int64 {
  return p.StartTime
}

func (p *Historys) GetEndTime() int64 {
  return p.EndTime
}

func (p *Historys) GetDuration() int64 {
  return p.Duration
}

func (p *Historys) GetTerminate() int32 {
  return p.Terminate
}

func (p *Historys) GetProductType() ProductType {
  return p.ProductType
}

func (p *Historys) GetCharge() int32 {
  return p.Charge
}

func (p *Historys) GetUnit() string {
  return p.Unit
}

func (p *Historys) GetResult_() string {
  return p.Result_
}
func (p *Historys) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Historys)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *Historys)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := HistorysType(v)
  p.Type = temp
}
  return nil
}

func (p *Historys)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DialedNumber = v
}
  return nil
}

func (p *Historys)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CalledNumber = v
}
  return nil
}

func (p *Historys)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ToMid = v
}
  return nil
}

func (p *Historys)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ToName = v
}
  return nil
}

func (p *Historys)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SetupTime = v
}
  return nil
}

func (p *Historys)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *Historys)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *Historys)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Duration = v
}
  return nil
}

func (p *Historys)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Terminate = v
}
  return nil
}

func (p *Historys)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := ProductType(v)
  p.ProductType = temp
}
  return nil
}

func (p *Historys)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Charge = v
}
  return nil
}

func (p *Historys)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Unit = v
}
  return nil
}

func (p *Historys)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *Historys) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Historys"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Historys) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *Historys) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *Historys) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dialedNumber", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dialedNumber: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DialedNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dialedNumber (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dialedNumber: ", p), err) }
  return err
}

func (p *Historys) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "calledNumber", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:calledNumber: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CalledNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.calledNumber (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:calledNumber: ", p), err) }
  return err
}

func (p *Historys) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "toMid", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:toMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ToMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toMid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:toMid: ", p), err) }
  return err
}

func (p *Historys) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "toName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:toName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ToName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:toName: ", p), err) }
  return err
}

func (p *Historys) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "setupTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:setupTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SetupTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.setupTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:setupTime: ", p), err) }
  return err
}

func (p *Historys) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:startTime: ", p), err) }
  return err
}

func (p *Historys) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:endTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:endTime: ", p), err) }
  return err
}

func (p *Historys) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "duration", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:duration: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Duration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.duration (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:duration: ", p), err) }
  return err
}

func (p *Historys) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "terminate", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:terminate: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Terminate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terminate (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:terminate: ", p), err) }
  return err
}

func (p *Historys) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "productType", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:productType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ProductType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productType (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:productType: ", p), err) }
  return err
}

func (p *Historys) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "charge", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:charge: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Charge)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.charge (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:charge: ", p), err) }
  return err
}

func (p *Historys) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unit", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:unit: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Unit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unit (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:unit: ", p), err) }
  return err
}

func (p *Historys) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:result: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:result: ", p), err) }
  return err
}

func (p *Historys) Equals(other *Historys) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Seq != other.Seq { return false }
  if p.Type != other.Type { return false }
  if p.DialedNumber != other.DialedNumber { return false }
  if p.CalledNumber != other.CalledNumber { return false }
  if p.ToMid != other.ToMid { return false }
  if p.ToName != other.ToName { return false }
  if p.SetupTime != other.SetupTime { return false }
  if p.StartTime != other.StartTime { return false }
  if p.EndTime != other.EndTime { return false }
  if p.Duration != other.Duration { return false }
  if p.Terminate != other.Terminate { return false }
  if p.ProductType != other.ProductType { return false }
  if p.Charge != other.Charge { return false }
  if p.Unit != other.Unit { return false }
  if p.Result_ != other.Result_ { return false }
  return true
}

func (p *Historys) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Historys(%+v)", *p)
}

// Attributes:
//  - Historys
//  - HasNext
type PaidCallHistoryResult_ struct {
  Historys []*Historys `thrift:"historys,1" db:"historys" json:"historys"`
  HasNext bool `thrift:"hasNext,2" db:"hasNext" json:"hasNext"`
}

func NewPaidCallHistoryResult_() *PaidCallHistoryResult_ {
  return &PaidCallHistoryResult_{}
}


func (p *PaidCallHistoryResult_) GetHistorys() []*Historys {
  return p.Historys
}

func (p *PaidCallHistoryResult_) GetHasNext() bool {
  return p.HasNext
}
func (p *PaidCallHistoryResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaidCallHistoryResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Historys, 0, size)
  p.Historys =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := &Historys{}
    if err := _elem27.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.Historys = append(p.Historys, _elem27)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PaidCallHistoryResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HasNext = v
}
  return nil
}

func (p *PaidCallHistoryResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PaidCallHistoryResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaidCallHistoryResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "historys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:historys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Historys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Historys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:historys: ", p), err) }
  return err
}

func (p *PaidCallHistoryResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasNext", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasNext: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasNext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasNext (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasNext: ", p), err) }
  return err
}

func (p *PaidCallHistoryResult_) Equals(other *PaidCallHistoryResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Historys) != len(other.Historys) { return false }
  for i, _tgt := range p.Historys {
    _src28 := other.Historys[i]
    if !_tgt.Equals(_src28) { return false }
  }
  if p.HasNext != other.HasNext { return false }
  return true
}

func (p *PaidCallHistoryResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaidCallHistoryResult_(%+v)", *p)
}

// Attributes:
//  - InvitationTicket
//  - FavoriteTimestamp
type GroupPreference struct {
  // unused fields # 1 to 10
  InvitationTicket string `thrift:"invitationTicket,11" db:"invitationTicket" json:"invitationTicket"`
  FavoriteTimestamp int64 `thrift:"favoriteTimestamp,12" db:"favoriteTimestamp" json:"favoriteTimestamp"`
}

func NewGroupPreference() *GroupPreference {
  return &GroupPreference{}
}


func (p *GroupPreference) GetInvitationTicket() string {
  return p.InvitationTicket
}

func (p *GroupPreference) GetFavoriteTimestamp() int64 {
  return p.FavoriteTimestamp
}
func (p *GroupPreference) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupPreference)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.InvitationTicket = v
}
  return nil
}

func (p *GroupPreference)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.FavoriteTimestamp = v
}
  return nil
}

func (p *GroupPreference) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GroupPreference"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupPreference) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "invitationTicket", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:invitationTicket: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.InvitationTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:invitationTicket: ", p), err) }
  return err
}

func (p *GroupPreference) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "favoriteTimestamp", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:favoriteTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FavoriteTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:favoriteTimestamp: ", p), err) }
  return err
}

func (p *GroupPreference) Equals(other *GroupPreference) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.InvitationTicket != other.InvitationTicket { return false }
  if p.FavoriteTimestamp != other.FavoriteTimestamp { return false }
  return true
}

func (p *GroupPreference) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupPreference(%+v)", *p)
}

// Attributes:
//  - ID
//  - CreatedTime
//  - Name
//  - PictureStatus
//  - PreventedJoinByTicket
//  - GroupPreference
//  - Members
//  - Creator
//  - Invitee
//  - NotificationDisabled
//  - PicturePath
//  - MemberMids
//  - InviteeMids
type Group struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Name string `thrift:"name,10" db:"name" json:"name"`
  PictureStatus string `thrift:"pictureStatus,11" db:"pictureStatus" json:"pictureStatus"`
  PreventedJoinByTicket bool `thrift:"preventedJoinByTicket,12" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
  GroupPreference *GroupPreference `thrift:"groupPreference,13" db:"groupPreference" json:"groupPreference"`
  // unused fields # 14 to 19
  Members []*Contact `thrift:"members,20" db:"members" json:"members"`
  Creator *Contact `thrift:"creator,21" db:"creator" json:"creator"`
  Invitee []*Contact `thrift:"invitee,22" db:"invitee" json:"invitee"`
  // unused fields # 23 to 30
  NotificationDisabled bool `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
  PicturePath string `thrift:"picturePath,32" db:"picturePath" json:"picturePath"`
  // unused fields # 33 to 39
  MemberMids []string `thrift:"memberMids,40" db:"memberMids" json:"memberMids"`
  InviteeMids []string `thrift:"inviteeMids,41" db:"inviteeMids" json:"inviteeMids"`
}

func NewGroup() *Group {
  return &Group{}
}


func (p *Group) GetID() string {
  return p.ID
}

func (p *Group) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Group) GetName() string {
  return p.Name
}

func (p *Group) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Group) GetPreventedJoinByTicket() bool {
  return p.PreventedJoinByTicket
}
var Group_GroupPreference_DEFAULT *GroupPreference
func (p *Group) GetGroupPreference() *GroupPreference {
  if !p.IsSetGroupPreference() {
    return Group_GroupPreference_DEFAULT
  }
return p.GroupPreference
}

func (p *Group) GetMembers() []*Contact {
  return p.Members
}
var Group_Creator_DEFAULT *Contact
func (p *Group) GetCreator() *Contact {
  if !p.IsSetCreator() {
    return Group_Creator_DEFAULT
  }
return p.Creator
}

func (p *Group) GetInvitee() []*Contact {
  return p.Invitee
}

func (p *Group) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *Group) GetPicturePath() string {
  return p.PicturePath
}

func (p *Group) GetMemberMids() []string {
  return p.MemberMids
}

func (p *Group) GetInviteeMids() []string {
  return p.InviteeMids
}
func (p *Group) IsSetGroupPreference() bool {
  return p.GroupPreference != nil
}

func (p *Group) IsSetCreator() bool {
  return p.Creator != nil
}

func (p *Group) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Group)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Group)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Group)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Group)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Group)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PreventedJoinByTicket = v
}
  return nil
}

func (p *Group)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  p.GroupPreference = &GroupPreference{}
  if err := p.GroupPreference.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupPreference), err)
  }
  return nil
}

func (p *Group)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &Contact{}
    if err := _elem29.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Members = append(p.Members, _elem29)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Group)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  p.Creator = &Contact{}
  if err := p.Creator.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creator), err)
  }
  return nil
}

func (p *Group)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Invitee =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &Contact{}
    if err := _elem30.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.Invitee = append(p.Invitee, _elem30)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Group)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Group)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Group)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem31 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem31 = v
}
    p.MemberMids = append(p.MemberMids, _elem31)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Group)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.InviteeMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem32 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem32 = v
}
    p.InviteeMids = append(p.InviteeMids, _elem32)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Group) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Group"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Group) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Group) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Group) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  return err
}

func (p *Group) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pictureStatus: ", p), err) }
  return err
}

func (p *Group) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preventedJoinByTicket", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:preventedJoinByTicket: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreventedJoinByTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:preventedJoinByTicket: ", p), err) }
  return err
}

func (p *Group) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupPreference", thrift.STRUCT, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:groupPreference: ", p), err) }
  if err := p.GroupPreference.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupPreference), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:groupPreference: ", p), err) }
  return err
}

func (p *Group) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:members: ", p), err) }
  return err
}

func (p *Group) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRUCT, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:creator: ", p), err) }
  if err := p.Creator.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creator), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:creator: ", p), err) }
  return err
}

func (p *Group) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "invitee", thrift.LIST, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:invitee: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Invitee)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Invitee {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:invitee: ", p), err) }
  return err
}

func (p *Group) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabled", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err) }
  return err
}

func (p *Group) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:picturePath: ", p), err) }
  return err
}

func (p *Group) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.LIST, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err) }
  return err
}

func (p *Group) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inviteeMids", thrift.LIST, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:inviteeMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.InviteeMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.InviteeMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:inviteeMids: ", p), err) }
  return err
}

func (p *Group) Equals(other *Group) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.Name != other.Name { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  if p.PreventedJoinByTicket != other.PreventedJoinByTicket { return false }
  if !p.GroupPreference.Equals(other.GroupPreference) { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src33 := other.Members[i]
    if !_tgt.Equals(_src33) { return false }
  }
  if !p.Creator.Equals(other.Creator) { return false }
  if len(p.Invitee) != len(other.Invitee) { return false }
  for i, _tgt := range p.Invitee {
    _src34 := other.Invitee[i]
    if !_tgt.Equals(_src34) { return false }
  }
  if p.NotificationDisabled != other.NotificationDisabled { return false }
  if p.PicturePath != other.PicturePath { return false }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for i, _tgt := range p.MemberMids {
    _src35 := other.MemberMids[i]
    if _tgt != _src35 { return false }
  }
  if len(p.InviteeMids) != len(other.InviteeMids) { return false }
  for i, _tgt := range p.InviteeMids {
    _src36 := other.InviteeMids[i]
    if _tgt != _src36 { return false }
  }
  return true
}

func (p *Group) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Group(%+v)", *p)
}

// Attributes:
//  - Replace
//  - SticonOwnership
type ChatRoomAnnouncementContentMetadata struct {
  Replace string `thrift:"replace,1" db:"replace" json:"replace"`
  SticonOwnership string `thrift:"sticonOwnership,2" db:"sticonOwnership" json:"sticonOwnership"`
}

func NewChatRoomAnnouncementContentMetadata() *ChatRoomAnnouncementContentMetadata {
  return &ChatRoomAnnouncementContentMetadata{}
}


func (p *ChatRoomAnnouncementContentMetadata) GetReplace() string {
  return p.Replace
}

func (p *ChatRoomAnnouncementContentMetadata) GetSticonOwnership() string {
  return p.SticonOwnership
}
func (p *ChatRoomAnnouncementContentMetadata) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Replace = v
}
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SticonOwnership = v
}
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatRoomAnnouncementContentMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "replace", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:replace: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Replace)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replace (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:replace: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContentMetadata) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sticonOwnership", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sticonOwnership: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SticonOwnership)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sticonOwnership (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sticonOwnership: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContentMetadata) Equals(other *ChatRoomAnnouncementContentMetadata) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Replace != other.Replace { return false }
  if p.SticonOwnership != other.SticonOwnership { return false }
  return true
}

func (p *ChatRoomAnnouncementContentMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomAnnouncementContentMetadata(%+v)", *p)
}

// Attributes:
//  - DisplayFields
//  - Text
//  - Link
//  - Thumbnail
//  - ContentMetadata
type ChatRoomAnnouncementContents struct {
  DisplayFields int32 `thrift:"displayFields,1" db:"displayFields" json:"displayFields"`
  Text string `thrift:"text,2" db:"text" json:"text"`
  Link string `thrift:"link,3" db:"link" json:"link"`
  Thumbnail string `thrift:"thumbnail,4" db:"thumbnail" json:"thumbnail"`
  ContentMetadata *ChatRoomAnnouncementContentMetadata `thrift:"contentMetadata,5" db:"contentMetadata" json:"contentMetadata"`
}

func NewChatRoomAnnouncementContents() *ChatRoomAnnouncementContents {
  return &ChatRoomAnnouncementContents{}
}


func (p *ChatRoomAnnouncementContents) GetDisplayFields() int32 {
  return p.DisplayFields
}

func (p *ChatRoomAnnouncementContents) GetText() string {
  return p.Text
}

func (p *ChatRoomAnnouncementContents) GetLink() string {
  return p.Link
}

func (p *ChatRoomAnnouncementContents) GetThumbnail() string {
  return p.Thumbnail
}
var ChatRoomAnnouncementContents_ContentMetadata_DEFAULT *ChatRoomAnnouncementContentMetadata
func (p *ChatRoomAnnouncementContents) GetContentMetadata() *ChatRoomAnnouncementContentMetadata {
  if !p.IsSetContentMetadata() {
    return ChatRoomAnnouncementContents_ContentMetadata_DEFAULT
  }
return p.ContentMetadata
}
func (p *ChatRoomAnnouncementContents) IsSetContentMetadata() bool {
  return p.ContentMetadata != nil
}

func (p *ChatRoomAnnouncementContents) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DisplayFields = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Link = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Thumbnail = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.ContentMetadata = &ChatRoomAnnouncementContentMetadata{}
  if err := p.ContentMetadata.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ContentMetadata), err)
  }
  return nil
}

func (p *ChatRoomAnnouncementContents) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatRoomAnnouncementContents"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomAnnouncementContents) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayFields", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayFields: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DisplayFields)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayFields (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayFields: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "link", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:link: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Link)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.link (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:link: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnail", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:thumbnail: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Thumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnail (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:thumbnail: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentMetadata", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contentMetadata: ", p), err) }
  if err := p.ContentMetadata.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ContentMetadata), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contentMetadata: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) Equals(other *ChatRoomAnnouncementContents) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DisplayFields != other.DisplayFields { return false }
  if p.Text != other.Text { return false }
  if p.Link != other.Link { return false }
  if p.Thumbnail != other.Thumbnail { return false }
  if !p.ContentMetadata.Equals(other.ContentMetadata) { return false }
  return true
}

func (p *ChatRoomAnnouncementContents) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomAnnouncementContents(%+v)", *p)
}

// Attributes:
//  - AnnouncementSeq
//  - Type
//  - Contents
//  - CreatorMid
//  - CreatedTime
//  - DeletePermission
type ChatRoomAnnouncement struct {
  AnnouncementSeq int64 `thrift:"announcementSeq,1" db:"announcementSeq" json:"announcementSeq"`
  Type ChatRoomAnnouncementType `thrift:"type,2" db:"type" json:"type"`
  Contents *ChatRoomAnnouncementContents `thrift:"contents,3" db:"contents" json:"contents"`
  CreatorMid string `thrift:"creatorMid,4" db:"creatorMid" json:"creatorMid"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
  DeletePermission DeletePermission `thrift:"deletePermission,6" db:"deletePermission" json:"deletePermission"`
}

func NewChatRoomAnnouncement() *ChatRoomAnnouncement {
  return &ChatRoomAnnouncement{}
}


func (p *ChatRoomAnnouncement) GetAnnouncementSeq() int64 {
  return p.AnnouncementSeq
}

func (p *ChatRoomAnnouncement) GetType() ChatRoomAnnouncementType {
  return p.Type
}
var ChatRoomAnnouncement_Contents_DEFAULT *ChatRoomAnnouncementContents
func (p *ChatRoomAnnouncement) GetContents() *ChatRoomAnnouncementContents {
  if !p.IsSetContents() {
    return ChatRoomAnnouncement_Contents_DEFAULT
  }
return p.Contents
}

func (p *ChatRoomAnnouncement) GetCreatorMid() string {
  return p.CreatorMid
}

func (p *ChatRoomAnnouncement) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *ChatRoomAnnouncement) GetDeletePermission() DeletePermission {
  return p.DeletePermission
}
func (p *ChatRoomAnnouncement) IsSetContents() bool {
  return p.Contents != nil
}

func (p *ChatRoomAnnouncement) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AnnouncementSeq = v
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ChatRoomAnnouncementType(v)
  p.Type = temp
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Contents = &ChatRoomAnnouncementContents{}
  if err := p.Contents.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contents), err)
  }
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreatorMid = v
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := DeletePermission(v)
  p.DeletePermission = temp
}
  return nil
}

func (p *ChatRoomAnnouncement) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatRoomAnnouncement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomAnnouncement) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "announcementSeq", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:announcementSeq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AnnouncementSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.announcementSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:announcementSeq: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contents: ", p), err) }
  if err := p.Contents.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contents), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contents: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creatorMid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creatorMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CreatorMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorMid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creatorMid: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deletePermission", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deletePermission: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DeletePermission)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deletePermission (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deletePermission: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) Equals(other *ChatRoomAnnouncement) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AnnouncementSeq != other.AnnouncementSeq { return false }
  if p.Type != other.Type { return false }
  if !p.Contents.Equals(other.Contents) { return false }
  if p.CreatorMid != other.CreatorMid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.DeletePermission != other.DeletePermission { return false }
  return true
}

func (p *ChatRoomAnnouncement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomAnnouncement(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - Cursor
type GetFollowingsRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
}

func NewGetFollowingsRequest() *GetFollowingsRequest {
  return &GetFollowingsRequest{}
}

var GetFollowingsRequest_FollowMid_DEFAULT *FollowMid
func (p *GetFollowingsRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return GetFollowingsRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}

func (p *GetFollowingsRequest) GetCursor() string {
  return p.Cursor
}
func (p *GetFollowingsRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *GetFollowingsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowingsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *GetFollowingsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowingsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowingsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowingsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *GetFollowingsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowingsRequest) Equals(other *GetFollowingsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  if p.Cursor != other.Cursor { return false }
  return true
}

func (p *GetFollowingsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowingsRequest(%+v)", *p)
}

// Attributes:
//  - Profiles
//  - Cursor
//  - FollowingCount
//  - FollowerCount
type GetFollowingsResponse struct {
  Profiles []*FollowProfile `thrift:"profiles,1" db:"profiles" json:"profiles"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
  FollowingCount int64 `thrift:"followingCount,3" db:"followingCount" json:"followingCount"`
  FollowerCount int64 `thrift:"followerCount,4" db:"followerCount" json:"followerCount"`
}

func NewGetFollowingsResponse() *GetFollowingsResponse {
  return &GetFollowingsResponse{}
}


func (p *GetFollowingsResponse) GetProfiles() []*FollowProfile {
  return p.Profiles
}

func (p *GetFollowingsResponse) GetCursor() string {
  return p.Cursor
}

func (p *GetFollowingsResponse) GetFollowingCount() int64 {
  return p.FollowingCount
}

func (p *GetFollowingsResponse) GetFollowerCount() int64 {
  return p.FollowerCount
}
func (p *GetFollowingsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowingsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FollowProfile, 0, size)
  p.Profiles =  tSlice
  for i := 0; i < size; i ++ {
    _elem37 := &FollowProfile{}
    if err := _elem37.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
    }
    p.Profiles = append(p.Profiles, _elem37)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetFollowingsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowingsResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FollowingCount = v
}
  return nil
}

func (p *GetFollowingsResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FollowerCount = v
}
  return nil
}

func (p *GetFollowingsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowingsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowingsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profiles", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profiles: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Profiles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Profiles {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profiles: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followingCount", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followingCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FollowingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followingCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followingCount: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followerCount", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:followerCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FollowerCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followerCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:followerCount: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) Equals(other *GetFollowingsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Profiles) != len(other.Profiles) { return false }
  for i, _tgt := range p.Profiles {
    _src38 := other.Profiles[i]
    if !_tgt.Equals(_src38) { return false }
  }
  if p.Cursor != other.Cursor { return false }
  if p.FollowingCount != other.FollowingCount { return false }
  if p.FollowerCount != other.FollowerCount { return false }
  return true
}

func (p *GetFollowingsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowingsResponse(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - RecommendEmailRegistration
//  - Certificate
type RegisterWithPhoneNumberResult_ struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  RecommendEmailRegistration bool `thrift:"recommendEmailRegistration,2" db:"recommendEmailRegistration" json:"recommendEmailRegistration"`
  Certificate string `thrift:"certificate,3" db:"certificate" json:"certificate"`
}

func NewRegisterWithPhoneNumberResult_() *RegisterWithPhoneNumberResult_ {
  return &RegisterWithPhoneNumberResult_{}
}


func (p *RegisterWithPhoneNumberResult_) GetAuthToken() string {
  return p.AuthToken
}

func (p *RegisterWithPhoneNumberResult_) GetRecommendEmailRegistration() bool {
  return p.RecommendEmailRegistration
}

func (p *RegisterWithPhoneNumberResult_) GetCertificate() string {
  return p.Certificate
}
func (p *RegisterWithPhoneNumberResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterWithPhoneNumberResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *RegisterWithPhoneNumberResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RecommendEmailRegistration = v
}
  return nil
}

func (p *RegisterWithPhoneNumberResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *RegisterWithPhoneNumberResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterWithPhoneNumberResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterWithPhoneNumberResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *RegisterWithPhoneNumberResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendEmailRegistration", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recommendEmailRegistration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RecommendEmailRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendEmailRegistration (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recommendEmailRegistration: ", p), err) }
  return err
}

func (p *RegisterWithPhoneNumberResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "certificate", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:certificate: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:certificate: ", p), err) }
  return err
}

func (p *RegisterWithPhoneNumberResult_) Equals(other *RegisterWithPhoneNumberResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthToken != other.AuthToken { return false }
  if p.RecommendEmailRegistration != other.RecommendEmailRegistration { return false }
  if p.Certificate != other.Certificate { return false }
  return true
}

func (p *RegisterWithPhoneNumberResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterWithPhoneNumberResult_(%+v)", *p)
}

// Attributes:
//  - Mid
//  - DisplayName
//  - PictureStatus
//  - PicturePath
//  - StatusMessage
//  - BusinessAccount
//  - IconType
//  - BotType
type BuddySearchResult_ struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  PictureStatus string `thrift:"pictureStatus,3" db:"pictureStatus" json:"pictureStatus"`
  PicturePath string `thrift:"picturePath,4" db:"picturePath" json:"picturePath"`
  StatusMessage string `thrift:"statusMessage,5" db:"statusMessage" json:"statusMessage"`
  BusinessAccount bool `thrift:"businessAccount,6" db:"businessAccount" json:"businessAccount"`
  IconType int32 `thrift:"iconType,7" db:"iconType" json:"iconType"`
  BotType BotType `thrift:"botType,8" db:"botType" json:"botType"`
}

func NewBuddySearchResult_() *BuddySearchResult_ {
  return &BuddySearchResult_{}
}


func (p *BuddySearchResult_) GetMid() string {
  return p.Mid
}

func (p *BuddySearchResult_) GetDisplayName() string {
  return p.DisplayName
}

func (p *BuddySearchResult_) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *BuddySearchResult_) GetPicturePath() string {
  return p.PicturePath
}

func (p *BuddySearchResult_) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *BuddySearchResult_) GetBusinessAccount() bool {
  return p.BusinessAccount
}

func (p *BuddySearchResult_) GetIconType() int32 {
  return p.IconType
}

func (p *BuddySearchResult_) GetBotType() BotType {
  return p.BotType
}
func (p *BuddySearchResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddySearchResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *BuddySearchResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *BuddySearchResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *BuddySearchResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *BuddySearchResult_)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *BuddySearchResult_)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.BusinessAccount = v
}
  return nil
}

func (p *BuddySearchResult_)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IconType = v
}
  return nil
}

func (p *BuddySearchResult_)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := BotType(v)
  p.BotType = temp
}
  return nil
}

func (p *BuddySearchResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BuddySearchResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddySearchResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *BuddySearchResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *BuddySearchResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pictureStatus: ", p), err) }
  return err
}

func (p *BuddySearchResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:picturePath: ", p), err) }
  return err
}

func (p *BuddySearchResult_) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessage", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:statusMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:statusMessage: ", p), err) }
  return err
}

func (p *BuddySearchResult_) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "businessAccount", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:businessAccount: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.BusinessAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.businessAccount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:businessAccount: ", p), err) }
  return err
}

func (p *BuddySearchResult_) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iconType", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:iconType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IconType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconType (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:iconType: ", p), err) }
  return err
}

func (p *BuddySearchResult_) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "botType", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:botType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BotType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botType (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:botType: ", p), err) }
  return err
}

func (p *BuddySearchResult_) Equals(other *BuddySearchResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.StatusMessage != other.StatusMessage { return false }
  if p.BusinessAccount != other.BusinessAccount { return false }
  if p.IconType != other.IconType { return false }
  if p.BotType != other.BotType { return false }
  return true
}

func (p *BuddySearchResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddySearchResult_(%+v)", *p)
}

// Attributes:
//  - CurrencyCode
//  - CurrencyName
//  - CurrencySign
//  - Preferred
//  - CoinRate
//  - CreditRate
type PaidCallCurrencyExchangeRate struct {
  CurrencyCode string `thrift:"currencyCode,1" db:"currencyCode" json:"currencyCode"`
  CurrencyName string `thrift:"currencyName,2" db:"currencyName" json:"currencyName"`
  CurrencySign string `thrift:"currencySign,3" db:"currencySign" json:"currencySign"`
  Preferred bool `thrift:"preferred,4" db:"preferred" json:"preferred"`
  CoinRate string `thrift:"coinRate,5" db:"coinRate" json:"coinRate"`
  CreditRate string `thrift:"creditRate,6" db:"creditRate" json:"creditRate"`
}

func NewPaidCallCurrencyExchangeRate() *PaidCallCurrencyExchangeRate {
  return &PaidCallCurrencyExchangeRate{}
}


func (p *PaidCallCurrencyExchangeRate) GetCurrencyCode() string {
  return p.CurrencyCode
}

func (p *PaidCallCurrencyExchangeRate) GetCurrencyName() string {
  return p.CurrencyName
}

func (p *PaidCallCurrencyExchangeRate) GetCurrencySign() string {
  return p.CurrencySign
}

func (p *PaidCallCurrencyExchangeRate) GetPreferred() bool {
  return p.Preferred
}

func (p *PaidCallCurrencyExchangeRate) GetCoinRate() string {
  return p.CoinRate
}

func (p *PaidCallCurrencyExchangeRate) GetCreditRate() string {
  return p.CreditRate
}
func (p *PaidCallCurrencyExchangeRate) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaidCallCurrencyExchangeRate)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CurrencyCode = v
}
  return nil
}

func (p *PaidCallCurrencyExchangeRate)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CurrencyName = v
}
  return nil
}

func (p *PaidCallCurrencyExchangeRate)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CurrencySign = v
}
  return nil
}

func (p *PaidCallCurrencyExchangeRate)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Preferred = v
}
  return nil
}

func (p *PaidCallCurrencyExchangeRate)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CoinRate = v
}
  return nil
}

func (p *PaidCallCurrencyExchangeRate)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreditRate = v
}
  return nil
}

func (p *PaidCallCurrencyExchangeRate) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PaidCallCurrencyExchangeRate"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaidCallCurrencyExchangeRate) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "currencyCode", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currencyCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CurrencyCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currencyCode: ", p), err) }
  return err
}

func (p *PaidCallCurrencyExchangeRate) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "currencyName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currencyName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CurrencyName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currencyName: ", p), err) }
  return err
}

func (p *PaidCallCurrencyExchangeRate) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "currencySign", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currencySign: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CurrencySign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencySign (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currencySign: ", p), err) }
  return err
}

func (p *PaidCallCurrencyExchangeRate) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preferred", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:preferred: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Preferred)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preferred (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:preferred: ", p), err) }
  return err
}

func (p *PaidCallCurrencyExchangeRate) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "coinRate", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:coinRate: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CoinRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coinRate (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:coinRate: ", p), err) }
  return err
}

func (p *PaidCallCurrencyExchangeRate) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creditRate", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:creditRate: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CreditRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creditRate (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:creditRate: ", p), err) }
  return err
}

func (p *PaidCallCurrencyExchangeRate) Equals(other *PaidCallCurrencyExchangeRate) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CurrencyCode != other.CurrencyCode { return false }
  if p.CurrencyName != other.CurrencyName { return false }
  if p.CurrencySign != other.CurrencySign { return false }
  if p.Preferred != other.Preferred { return false }
  if p.CoinRate != other.CoinRate { return false }
  if p.CreditRate != other.CreditRate { return false }
  return true
}

func (p *PaidCallCurrencyExchangeRate) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaidCallCurrencyExchangeRate(%+v)", *p)
}

// Attributes:
//  - CountryCode
//  - RateDivision
type PaidCallAdCountry struct {
  CountryCode string `thrift:"countryCode,1" db:"countryCode" json:"countryCode"`
  RateDivision string `thrift:"rateDivision,2" db:"rateDivision" json:"rateDivision"`
}

func NewPaidCallAdCountry() *PaidCallAdCountry {
  return &PaidCallAdCountry{}
}


func (p *PaidCallAdCountry) GetCountryCode() string {
  return p.CountryCode
}

func (p *PaidCallAdCountry) GetRateDivision() string {
  return p.RateDivision
}
func (p *PaidCallAdCountry) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaidCallAdCountry)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *PaidCallAdCountry)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RateDivision = v
}
  return nil
}

func (p *PaidCallAdCountry) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PaidCallAdCountry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaidCallAdCountry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryCode", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:countryCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:countryCode: ", p), err) }
  return err
}

func (p *PaidCallAdCountry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rateDivision", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rateDivision: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RateDivision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rateDivision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rateDivision: ", p), err) }
  return err
}

func (p *PaidCallAdCountry) Equals(other *PaidCallAdCountry) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CountryCode != other.CountryCode { return false }
  if p.RateDivision != other.RateDivision { return false }
  return true
}

func (p *PaidCallAdCountry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaidCallAdCountry(%+v)", *p)
}

// Attributes:
//  - CurrencyExchangeRates
//  - RecommendedCountryCodes
//  - AdCountries
//  - SupportedCalledCountryCodes
type PaidCallMetadataResult_ struct {
  CurrencyExchangeRates []*PaidCallCurrencyExchangeRate `thrift:"currencyExchangeRates,1" db:"currencyExchangeRates" json:"currencyExchangeRates"`
  RecommendedCountryCodes []string `thrift:"recommendedCountryCodes,2" db:"recommendedCountryCodes" json:"recommendedCountryCodes"`
  AdCountries []*PaidCallAdCountry `thrift:"adCountries,3" db:"adCountries" json:"adCountries"`
  SupportedCalledCountryCodes []string `thrift:"supportedCalledCountryCodes,4" db:"supportedCalledCountryCodes" json:"supportedCalledCountryCodes"`
}

func NewPaidCallMetadataResult_() *PaidCallMetadataResult_ {
  return &PaidCallMetadataResult_{}
}


func (p *PaidCallMetadataResult_) GetCurrencyExchangeRates() []*PaidCallCurrencyExchangeRate {
  return p.CurrencyExchangeRates
}

func (p *PaidCallMetadataResult_) GetRecommendedCountryCodes() []string {
  return p.RecommendedCountryCodes
}

func (p *PaidCallMetadataResult_) GetAdCountries() []*PaidCallAdCountry {
  return p.AdCountries
}

func (p *PaidCallMetadataResult_) GetSupportedCalledCountryCodes() []string {
  return p.SupportedCalledCountryCodes
}
func (p *PaidCallMetadataResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaidCallMetadataResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PaidCallCurrencyExchangeRate, 0, size)
  p.CurrencyExchangeRates =  tSlice
  for i := 0; i < size; i ++ {
    _elem39 := &PaidCallCurrencyExchangeRate{}
    if err := _elem39.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
    }
    p.CurrencyExchangeRates = append(p.CurrencyExchangeRates, _elem39)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PaidCallMetadataResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.RecommendedCountryCodes =  tSlice
  for i := 0; i < size; i ++ {
var _elem40 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem40 = v
}
    p.RecommendedCountryCodes = append(p.RecommendedCountryCodes, _elem40)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PaidCallMetadataResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PaidCallAdCountry, 0, size)
  p.AdCountries =  tSlice
  for i := 0; i < size; i ++ {
    _elem41 := &PaidCallAdCountry{}
    if err := _elem41.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
    }
    p.AdCountries = append(p.AdCountries, _elem41)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PaidCallMetadataResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.SupportedCalledCountryCodes =  tSlice
  for i := 0; i < size; i ++ {
var _elem42 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem42 = v
}
    p.SupportedCalledCountryCodes = append(p.SupportedCalledCountryCodes, _elem42)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PaidCallMetadataResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PaidCallMetadataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaidCallMetadataResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "currencyExchangeRates", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currencyExchangeRates: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.CurrencyExchangeRates)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CurrencyExchangeRates {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currencyExchangeRates: ", p), err) }
  return err
}

func (p *PaidCallMetadataResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendedCountryCodes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recommendedCountryCodes: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.RecommendedCountryCodes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RecommendedCountryCodes {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recommendedCountryCodes: ", p), err) }
  return err
}

func (p *PaidCallMetadataResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "adCountries", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:adCountries: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.AdCountries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AdCountries {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:adCountries: ", p), err) }
  return err
}

func (p *PaidCallMetadataResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "supportedCalledCountryCodes", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:supportedCalledCountryCodes: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.SupportedCalledCountryCodes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SupportedCalledCountryCodes {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:supportedCalledCountryCodes: ", p), err) }
  return err
}

func (p *PaidCallMetadataResult_) Equals(other *PaidCallMetadataResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.CurrencyExchangeRates) != len(other.CurrencyExchangeRates) { return false }
  for i, _tgt := range p.CurrencyExchangeRates {
    _src43 := other.CurrencyExchangeRates[i]
    if !_tgt.Equals(_src43) { return false }
  }
  if len(p.RecommendedCountryCodes) != len(other.RecommendedCountryCodes) { return false }
  for i, _tgt := range p.RecommendedCountryCodes {
    _src44 := other.RecommendedCountryCodes[i]
    if _tgt != _src44 { return false }
  }
  if len(p.AdCountries) != len(other.AdCountries) { return false }
  for i, _tgt := range p.AdCountries {
    _src45 := other.AdCountries[i]
    if !_tgt.Equals(_src45) { return false }
  }
  if len(p.SupportedCalledCountryCodes) != len(other.SupportedCalledCountryCodes) { return false }
  for i, _tgt := range p.SupportedCalledCountryCodes {
    _src46 := other.SupportedCalledCountryCodes[i]
    if _tgt != _src46 { return false }
  }
  return true
}

func (p *PaidCallMetadataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaidCallMetadataResult_(%+v)", *p)
}

// Attributes:
//  - WithMemberChats
//  - WithInvitedChats
type GetAllChatMidsRequest struct {
  WithMemberChats bool `thrift:"withMemberChats,1" db:"withMemberChats" json:"withMemberChats"`
  WithInvitedChats bool `thrift:"withInvitedChats,2" db:"withInvitedChats" json:"withInvitedChats"`
}

func NewGetAllChatMidsRequest() *GetAllChatMidsRequest {
  return &GetAllChatMidsRequest{}
}


func (p *GetAllChatMidsRequest) GetWithMemberChats() bool {
  return p.WithMemberChats
}

func (p *GetAllChatMidsRequest) GetWithInvitedChats() bool {
  return p.WithInvitedChats
}
func (p *GetAllChatMidsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAllChatMidsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WithMemberChats = v
}
  return nil
}

func (p *GetAllChatMidsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithInvitedChats = v
}
  return nil
}

func (p *GetAllChatMidsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetAllChatMidsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAllChatMidsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withMemberChats", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:withMemberChats: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithMemberChats)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withMemberChats (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:withMemberChats: ", p), err) }
  return err
}

func (p *GetAllChatMidsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withInvitedChats", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withInvitedChats: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithInvitedChats)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withInvitedChats (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withInvitedChats: ", p), err) }
  return err
}

func (p *GetAllChatMidsRequest) Equals(other *GetAllChatMidsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.WithMemberChats != other.WithMemberChats { return false }
  if p.WithInvitedChats != other.WithInvitedChats { return false }
  return true
}

func (p *GetAllChatMidsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllChatMidsRequest(%+v)", *p)
}

// Attributes:
//  - MemberMids
//  - InviteeMids
type GetAllChatMidsResponse struct {
  MemberMids []string `thrift:"memberMids,1" db:"memberMids" json:"memberMids"`
  InviteeMids []string `thrift:"inviteeMids,2" db:"inviteeMids" json:"inviteeMids"`
}

func NewGetAllChatMidsResponse() *GetAllChatMidsResponse {
  return &GetAllChatMidsResponse{}
}


func (p *GetAllChatMidsResponse) GetMemberMids() []string {
  return p.MemberMids
}

func (p *GetAllChatMidsResponse) GetInviteeMids() []string {
  return p.InviteeMids
}
func (p *GetAllChatMidsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAllChatMidsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.MemberMids =  tSet
  for i := 0; i < size; i ++ {
var _elem47 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem47 = v
}
    p.MemberMids = append(p.MemberMids, _elem47)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetAllChatMidsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.InviteeMids =  tSet
  for i := 0; i < size; i ++ {
var _elem48 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem48 = v
}
    p.InviteeMids = append(p.InviteeMids, _elem48)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetAllChatMidsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetAllChatMidsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAllChatMidsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.MemberMids); i++ {
    for j := i+1; j<len(p.MemberMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.MemberMids[i], p.MemberMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.MemberMids))
      }
    }
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberMids: ", p), err) }
  return err
}

func (p *GetAllChatMidsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inviteeMids", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inviteeMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.InviteeMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.InviteeMids); i++ {
    for j := i+1; j<len(p.InviteeMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.InviteeMids[i], p.InviteeMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.InviteeMids))
      }
    }
  }
  for _, v := range p.InviteeMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inviteeMids: ", p), err) }
  return err
}

func (p *GetAllChatMidsResponse) Equals(other *GetAllChatMidsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for i, _tgt := range p.MemberMids {
    _src49 := other.MemberMids[i]
    if _tgt != _src49 { return false }
  }
  if len(p.InviteeMids) != len(other.InviteeMids) { return false }
  for i, _tgt := range p.InviteeMids {
    _src50 := other.InviteeMids[i]
    if _tgt != _src50 { return false }
  }
  return true
}

func (p *GetAllChatMidsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllChatMidsResponse(%+v)", *p)
}

// Attributes:
//  - EMid
//  - Mid
//  - Direction
//  - Method
//  - Param
//  - CreatedTime
//  - SeqId
//  - DisplayName
//  - PicturePath
//  - PictureStatus
type FriendRequest struct {
  EMid string `thrift:"eMid,1" db:"eMid" json:"eMid"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Direction Direction `thrift:"direction,3" db:"direction" json:"direction"`
  Method Method_ `thrift:"method,4" db:"method" json:"method"`
  Param string `thrift:"param,5" db:"param" json:"param"`
  CreatedTime int64 `thrift:"createdTime,6" db:"createdTime" json:"createdTime"`
  SeqId int64 `thrift:"seqId,7" db:"seqId" json:"seqId"`
  // unused fields # 8 to 9
  DisplayName string `thrift:"displayName,10" db:"displayName" json:"displayName"`
  PicturePath string `thrift:"picturePath,11" db:"picturePath" json:"picturePath"`
  PictureStatus string `thrift:"pictureStatus,12" db:"pictureStatus" json:"pictureStatus"`
}

func NewFriendRequest() *FriendRequest {
  return &FriendRequest{}
}


func (p *FriendRequest) GetEMid() string {
  return p.EMid
}

func (p *FriendRequest) GetMid() string {
  return p.Mid
}

func (p *FriendRequest) GetDirection() Direction {
  return p.Direction
}

func (p *FriendRequest) GetMethod() Method_ {
  return p.Method
}

func (p *FriendRequest) GetParam() string {
  return p.Param
}

func (p *FriendRequest) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *FriendRequest) GetSeqId() int64 {
  return p.SeqId
}

func (p *FriendRequest) GetDisplayName() string {
  return p.DisplayName
}

func (p *FriendRequest) GetPicturePath() string {
  return p.PicturePath
}

func (p *FriendRequest) GetPictureStatus() string {
  return p.PictureStatus
}
func (p *FriendRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FriendRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *FriendRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *FriendRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Direction(v)
  p.Direction = temp
}
  return nil
}

func (p *FriendRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Method_(v)
  p.Method = temp
}
  return nil
}

func (p *FriendRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Param = v
}
  return nil
}

func (p *FriendRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *FriendRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SeqId = v
}
  return nil
}

func (p *FriendRequest)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *FriendRequest)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *FriendRequest)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *FriendRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FriendRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FriendRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eMid: ", p), err) }
  return err
}

func (p *FriendRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *FriendRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "direction", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:direction: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:direction: ", p), err) }
  return err
}

func (p *FriendRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:method: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:method: ", p), err) }
  return err
}

func (p *FriendRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:param: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:param: ", p), err) }
  return err
}

func (p *FriendRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:createdTime: ", p), err) }
  return err
}

func (p *FriendRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:seqId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SeqId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seqId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:seqId: ", p), err) }
  return err
}

func (p *FriendRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:displayName: ", p), err) }
  return err
}

func (p *FriendRequest) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:picturePath: ", p), err) }
  return err
}

func (p *FriendRequest) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:pictureStatus: ", p), err) }
  return err
}

func (p *FriendRequest) Equals(other *FriendRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EMid != other.EMid { return false }
  if p.Mid != other.Mid { return false }
  if p.Direction != other.Direction { return false }
  if p.Method != other.Method { return false }
  if p.Param != other.Param { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.SeqId != other.SeqId { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  return true
}

func (p *FriendRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FriendRequest(%+v)", *p)
}

// Attributes:
//  - Title
//  - Artist
//  - Oid
//  - ChannelId
type Ringtone struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Artist string `thrift:"artist,2" db:"artist" json:"artist"`
  Oid string `thrift:"oid,3" db:"oid" json:"oid"`
  ChannelId string `thrift:"channelId,4" db:"channelId" json:"channelId"`
}

func NewRingtone() *Ringtone {
  return &Ringtone{}
}


func (p *Ringtone) GetTitle() string {
  return p.Title
}

func (p *Ringtone) GetArtist() string {
  return p.Artist
}

func (p *Ringtone) GetOid() string {
  return p.Oid
}

func (p *Ringtone) GetChannelId() string {
  return p.ChannelId
}
func (p *Ringtone) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Ringtone)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Ringtone)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Artist = v
}
  return nil
}

func (p *Ringtone)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *Ringtone)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *Ringtone) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ringtone"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ringtone) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *Ringtone) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "artist", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:artist: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Artist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.artist (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:artist: ", p), err) }
  return err
}

func (p *Ringtone) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oid: ", p), err) }
  return err
}

func (p *Ringtone) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:channelId: ", p), err) }
  return err
}

func (p *Ringtone) Equals(other *Ringtone) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Title != other.Title { return false }
  if p.Artist != other.Artist { return false }
  if p.Oid != other.Oid { return false }
  if p.ChannelId != other.ChannelId { return false }
  return true
}

func (p *Ringtone) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ringtone(%+v)", *p)
}

// Attributes:
//  - ApplicationType
//  - DeviceName
//  - SystemName
//  - SystemVersion
//  - Model
//  - CarrierCode
//  - CarrierName
//  - WebViewVersion
type DeviceInfo struct {
  DeviceName string `thrift:"deviceName,1" db:"deviceName" json:"deviceName"`
  SystemName string `thrift:"systemName,2" db:"systemName" json:"systemName"`
  SystemVersion string `thrift:"systemVersion,3" db:"systemVersion" json:"systemVersion"`
  Model string `thrift:"model,4" db:"model" json:"model"`
  WebViewVersion string `thrift:"webViewVersion,5" db:"webViewVersion" json:"webViewVersion"`
  // unused fields # 6 to 9
  CarrierCode CarrierCode `thrift:"carrierCode,10" db:"carrierCode" json:"carrierCode"`
  CarrierName string `thrift:"carrierName,11" db:"carrierName" json:"carrierName"`
  // unused fields # 12 to 19
  ApplicationType ApplicationType `thrift:"applicationType,20" db:"applicationType" json:"applicationType"`
}

func NewDeviceInfo() *DeviceInfo {
  return &DeviceInfo{}
}


func (p *DeviceInfo) GetApplicationType() ApplicationType {
  return p.ApplicationType
}

func (p *DeviceInfo) GetDeviceName() string {
  return p.DeviceName
}

func (p *DeviceInfo) GetSystemName() string {
  return p.SystemName
}

func (p *DeviceInfo) GetSystemVersion() string {
  return p.SystemVersion
}

func (p *DeviceInfo) GetModel() string {
  return p.Model
}

func (p *DeviceInfo) GetCarrierCode() CarrierCode {
  return p.CarrierCode
}

func (p *DeviceInfo) GetCarrierName() string {
  return p.CarrierName
}

func (p *DeviceInfo) GetWebViewVersion() string {
  return p.WebViewVersion
}
func (p *DeviceInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceInfo)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := ApplicationType(v)
  p.ApplicationType = temp
}
  return nil
}

func (p *DeviceInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SystemVersion = v
}
  return nil
}

func (p *DeviceInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Model = v
}
  return nil
}

func (p *DeviceInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := CarrierCode(v)
  p.CarrierCode = temp
}
  return nil
}

func (p *DeviceInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CarrierName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WebViewVersion = v
}
  return nil
}

func (p *DeviceInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeviceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deviceName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemVersion", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemVersion: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "model", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:model: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Model)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:model: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "webViewVersion", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:webViewVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.WebViewVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.webViewVersion (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:webViewVersion: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrierCode", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:carrierCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CarrierCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierCode (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:carrierCode: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrierName", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:carrierName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CarrierName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierName (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:carrierName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationType", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:applicationType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ApplicationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationType (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:applicationType: ", p), err) }
  return err
}

func (p *DeviceInfo) Equals(other *DeviceInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DeviceName != other.DeviceName { return false }
  if p.SystemName != other.SystemName { return false }
  if p.SystemVersion != other.SystemVersion { return false }
  if p.Model != other.Model { return false }
  if p.WebViewVersion != other.WebViewVersion { return false }
  if p.CarrierCode != other.CarrierCode { return false }
  if p.CarrierName != other.CarrierName { return false }
  if p.ApplicationType != other.ApplicationType { return false }
  return true
}

func (p *DeviceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceInfo(%+v)", *p)
}

// Attributes:
//  - FollowMid
type RemoveFollowerRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewRemoveFollowerRequest() *RemoveFollowerRequest {
  return &RemoveFollowerRequest{}
}

var RemoveFollowerRequest_FollowMid_DEFAULT *FollowMid
func (p *RemoveFollowerRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return RemoveFollowerRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}
func (p *RemoveFollowerRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *RemoveFollowerRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveFollowerRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *RemoveFollowerRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RemoveFollowerRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveFollowerRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *RemoveFollowerRequest) Equals(other *RemoveFollowerRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  return true
}

func (p *RemoveFollowerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveFollowerRequest(%+v)", *p)
}

// Attributes:
//  - FollowMid
type UnfollowRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewUnfollowRequest() *UnfollowRequest {
  return &UnfollowRequest{}
}

var UnfollowRequest_FollowMid_DEFAULT *FollowMid
func (p *UnfollowRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return UnfollowRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}
func (p *UnfollowRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *UnfollowRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnfollowRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *UnfollowRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UnfollowRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnfollowRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *UnfollowRequest) Equals(other *UnfollowRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  return true
}

func (p *UnfollowRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnfollowRequest(%+v)", *p)
}

type CancelChatInvitationResponse struct {
}

func NewCancelChatInvitationResponse() *CancelChatInvitationResponse {
  return &CancelChatInvitationResponse{}
}

func (p *CancelChatInvitationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelChatInvitationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CancelChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelChatInvitationResponse) Equals(other *CancelChatInvitationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CancelChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - TicketId
type FindChatByTicketRequest struct {
  TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewFindChatByTicketRequest() *FindChatByTicketRequest {
  return &FindChatByTicketRequest{}
}


func (p *FindChatByTicketRequest) GetTicketId() string {
  return p.TicketId
}
func (p *FindChatByTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FindChatByTicketRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *FindChatByTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FindChatByTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FindChatByTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err) }
  return err
}

func (p *FindChatByTicketRequest) Equals(other *FindChatByTicketRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TicketId != other.TicketId { return false }
  return true
}

func (p *FindChatByTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FindChatByTicketRequest(%+v)", *p)
}

// Attributes:
//  - Chat
type FindChatByTicketResponse struct {
  Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewFindChatByTicketResponse() *FindChatByTicketResponse {
  return &FindChatByTicketResponse{}
}

var FindChatByTicketResponse_Chat_DEFAULT *Chat
func (p *FindChatByTicketResponse) GetChat() *Chat {
  if !p.IsSetChat() {
    return FindChatByTicketResponse_Chat_DEFAULT
  }
return p.Chat
}
func (p *FindChatByTicketResponse) IsSetChat() bool {
  return p.Chat != nil
}

func (p *FindChatByTicketResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FindChatByTicketResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *FindChatByTicketResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FindChatByTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FindChatByTicketResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err) }
  if err := p.Chat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err) }
  return err
}

func (p *FindChatByTicketResponse) Equals(other *FindChatByTicketResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Chat.Equals(other.Chat) { return false }
  return true
}

func (p *FindChatByTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FindChatByTicketResponse(%+v)", *p)
}

// Attributes:
//  - CreatorMid
//  - CreatedTime
//  - ChatRoomBGMInfo
type ChatRoomBGM struct {
  CreatorMid string `thrift:"creatorMid,1" db:"creatorMid" json:"creatorMid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  ChatRoomBGMInfo string `thrift:"chatRoomBGMInfo,3" db:"chatRoomBGMInfo" json:"chatRoomBGMInfo"`
}

func NewChatRoomBGM() *ChatRoomBGM {
  return &ChatRoomBGM{}
}


func (p *ChatRoomBGM) GetCreatorMid() string {
  return p.CreatorMid
}

func (p *ChatRoomBGM) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *ChatRoomBGM) GetChatRoomBGMInfo() string {
  return p.ChatRoomBGMInfo
}
func (p *ChatRoomBGM) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomBGM)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CreatorMid = v
}
  return nil
}

func (p *ChatRoomBGM)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *ChatRoomBGM)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatRoomBGMInfo = v
}
  return nil
}

func (p *ChatRoomBGM) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatRoomBGM"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomBGM) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creatorMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creatorMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CreatorMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creatorMid: ", p), err) }
  return err
}

func (p *ChatRoomBGM) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *ChatRoomBGM) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomBGMInfo", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatRoomBGMInfo: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatRoomBGMInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatRoomBGMInfo (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatRoomBGMInfo: ", p), err) }
  return err
}

func (p *ChatRoomBGM) Equals(other *ChatRoomBGM) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CreatorMid != other.CreatorMid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.ChatRoomBGMInfo != other.ChatRoomBGMInfo { return false }
  return true
}

func (p *ChatRoomBGM) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomBGM(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - GroupKeyId
//  - Creator
//  - CreatorKeyId
//  - Receiver
//  - ReceiverKeyId
//  - EncryptedSharedKey
//  - AllowedTypes
//  - SpecVersion
type E2EEGroupSharedKey struct {
  KeyVersion int32 `thrift:"keyVersion,1" db:"keyVersion" json:"keyVersion"`
  GroupKeyId int32 `thrift:"groupKeyId,2" db:"groupKeyId" json:"groupKeyId"`
  Creator string `thrift:"creator,3" db:"creator" json:"creator"`
  CreatorKeyId int32 `thrift:"creatorKeyId,4" db:"creatorKeyId" json:"creatorKeyId"`
  Receiver string `thrift:"receiver,5" db:"receiver" json:"receiver"`
  ReceiverKeyId int32 `thrift:"receiverKeyId,6" db:"receiverKeyId" json:"receiverKeyId"`
  EncryptedSharedKey []byte `thrift:"encryptedSharedKey,7" db:"encryptedSharedKey" json:"encryptedSharedKey"`
  AllowedTypes []ContentType `thrift:"allowedTypes,8" db:"allowedTypes" json:"allowedTypes"`
  SpecVersion int32 `thrift:"specVersion,9" db:"specVersion" json:"specVersion"`
}

func NewE2EEGroupSharedKey() *E2EEGroupSharedKey {
  return &E2EEGroupSharedKey{}
}


func (p *E2EEGroupSharedKey) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *E2EEGroupSharedKey) GetGroupKeyId() int32 {
  return p.GroupKeyId
}

func (p *E2EEGroupSharedKey) GetCreator() string {
  return p.Creator
}

func (p *E2EEGroupSharedKey) GetCreatorKeyId() int32 {
  return p.CreatorKeyId
}

func (p *E2EEGroupSharedKey) GetReceiver() string {
  return p.Receiver
}

func (p *E2EEGroupSharedKey) GetReceiverKeyId() int32 {
  return p.ReceiverKeyId
}

func (p *E2EEGroupSharedKey) GetEncryptedSharedKey() []byte {
  return p.EncryptedSharedKey
}

func (p *E2EEGroupSharedKey) GetAllowedTypes() []ContentType {
  return p.AllowedTypes
}

func (p *E2EEGroupSharedKey) GetSpecVersion() int32 {
  return p.SpecVersion
}
func (p *E2EEGroupSharedKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Creator = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreatorKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Receiver = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ReceiverKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.EncryptedSharedKey = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]ContentType, 0, size)
  p.AllowedTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem51 ContentType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ContentType(v)
    _elem51 = temp
}
    p.AllowedTypes = append(p.AllowedTypes, _elem51)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.SpecVersion = v
}
  return nil
}

func (p *E2EEGroupSharedKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "E2EEGroupSharedKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EEGroupSharedKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyVersion: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupKeyId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GroupKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creator: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Creator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creator (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creator: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creatorKeyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creatorKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreatorKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorKeyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creatorKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "receiver", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:receiver: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Receiver)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:receiver: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "receiverKeyId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:receiverKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReceiverKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiverKeyId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:receiverKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedSharedKey", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:encryptedSharedKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EncryptedSharedKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedSharedKey (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:encryptedSharedKey: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowedTypes", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:allowedTypes: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AllowedTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AllowedTypes); i++ {
    for j := i+1; j<len(p.AllowedTypes); j++ {
      if func(tgt, src ContentType) bool {
        if tgt != src { return false }
        return true
      }(p.AllowedTypes[i], p.AllowedTypes[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedTypes))
      }
    }
  }
  for _, v := range p.AllowedTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:allowedTypes: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "specVersion", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:specVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpecVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specVersion (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:specVersion: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) Equals(other *E2EEGroupSharedKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.KeyVersion != other.KeyVersion { return false }
  if p.GroupKeyId != other.GroupKeyId { return false }
  if p.Creator != other.Creator { return false }
  if p.CreatorKeyId != other.CreatorKeyId { return false }
  if p.Receiver != other.Receiver { return false }
  if p.ReceiverKeyId != other.ReceiverKeyId { return false }
  if bytes.Compare(p.EncryptedSharedKey, other.EncryptedSharedKey) != 0 { return false }
  if len(p.AllowedTypes) != len(other.AllowedTypes) { return false }
  for i, _tgt := range p.AllowedTypes {
    _src52 := other.AllowedTypes[i]
    if _tgt != _src52 { return false }
  }
  if p.SpecVersion != other.SpecVersion { return false }
  return true
}

func (p *E2EEGroupSharedKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EEGroupSharedKey(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Userid
//  - Phone
//  - Email
//  - RegionCode
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - AllowSearchByUserid
//  - AllowSearchByEmail
//  - PicturePath
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
type Profile struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  // unused field # 2
  Userid string `thrift:"userid,3" db:"userid" json:"userid"`
  // unused fields # 4 to 9
  Phone string `thrift:"phone,10" db:"phone" json:"phone"`
  Email string `thrift:"email,11" db:"email" json:"email"`
  RegionCode string `thrift:"regionCode,12" db:"regionCode" json:"regionCode"`
  // unused fields # 13 to 19
  DisplayName string `thrift:"displayName,20" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,21" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,22" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,23" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,24" db:"statusMessage" json:"statusMessage"`
  // unused fields # 25 to 30
  AllowSearchByUserid bool `thrift:"allowSearchByUserid,31" db:"allowSearchByUserid" json:"allowSearchByUserid"`
  AllowSearchByEmail bool `thrift:"allowSearchByEmail,32" db:"allowSearchByEmail" json:"allowSearchByEmail"`
  PicturePath string `thrift:"picturePath,33" db:"picturePath" json:"picturePath"`
  MusicProfile string `thrift:"musicProfile,34" db:"musicProfile" json:"musicProfile"`
  VideoProfile string `thrift:"videoProfile,35" db:"videoProfile" json:"videoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,36" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
  AvatarProfile *AvatarProfile `thrift:"avatarProfile,37" db:"avatarProfile" json:"avatarProfile"`
}

func NewProfile() *Profile {
  return &Profile{}
}


func (p *Profile) GetMid() string {
  return p.Mid
}

func (p *Profile) GetUserid() string {
  return p.Userid
}

func (p *Profile) GetPhone() string {
  return p.Phone
}

func (p *Profile) GetEmail() string {
  return p.Email
}

func (p *Profile) GetRegionCode() string {
  return p.RegionCode
}

func (p *Profile) GetDisplayName() string {
  return p.DisplayName
}

func (p *Profile) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *Profile) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Profile) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *Profile) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *Profile) GetAllowSearchByUserid() bool {
  return p.AllowSearchByUserid
}

func (p *Profile) GetAllowSearchByEmail() bool {
  return p.AllowSearchByEmail
}

func (p *Profile) GetPicturePath() string {
  return p.PicturePath
}

func (p *Profile) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *Profile) GetVideoProfile() string {
  return p.VideoProfile
}

func (p *Profile) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
var Profile_AvatarProfile_DEFAULT *AvatarProfile
func (p *Profile) GetAvatarProfile() *AvatarProfile {
  if !p.IsSetAvatarProfile() {
    return Profile_AvatarProfile_DEFAULT
  }
return p.AvatarProfile
}
func (p *Profile) IsSetAvatarProfile() bool {
  return p.AvatarProfile != nil
}

func (p *Profile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Profile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Profile)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Userid = v
}
  return nil
}

func (p *Profile)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Profile)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *Profile)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.RegionCode = v
}
  return nil
}

func (p *Profile)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Profile)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *Profile)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Profile)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *Profile)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *Profile)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.AllowSearchByUserid = v
}
  return nil
}

func (p *Profile)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.AllowSearchByEmail = v
}
  return nil
}

func (p *Profile)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Profile)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *Profile)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.VideoProfile = v
}
  return nil
}

func (p *Profile)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key53 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key53 = v
}
var _val54 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val54 = v
}
    p.StatusMessageContentMetadata[_key53] = _val54
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Profile)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  p.AvatarProfile = &AvatarProfile{}
  if err := p.AvatarProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
  }
  return nil
}

func (p *Profile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Profile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Profile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Profile) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Userid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userid: ", p), err) }
  return err
}

func (p *Profile) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:phone: ", p), err) }
  return err
}

func (p *Profile) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:email: ", p), err) }
  return err
}

func (p *Profile) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "regionCode", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:regionCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RegionCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionCode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:regionCode: ", p), err) }
  return err
}

func (p *Profile) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:displayName: ", p), err) }
  return err
}

func (p *Profile) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneticName", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:phoneticName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:phoneticName: ", p), err) }
  return err
}

func (p *Profile) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:pictureStatus: ", p), err) }
  return err
}

func (p *Profile) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnailUrl", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:thumbnailUrl: ", p), err) }
  return err
}

func (p *Profile) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessage", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusMessage: ", p), err) }
  return err
}

func (p *Profile) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowSearchByUserid", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:allowSearchByUserid: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowSearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByUserid (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:allowSearchByUserid: ", p), err) }
  return err
}

func (p *Profile) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowSearchByEmail", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:allowSearchByEmail: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowSearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByEmail (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:allowSearchByEmail: ", p), err) }
  return err
}

func (p *Profile) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:picturePath: ", p), err) }
  return err
}

func (p *Profile) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "musicProfile", thrift.STRING, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:musicProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:musicProfile: ", p), err) }
  return err
}

func (p *Profile) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "videoProfile", thrift.STRING, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:videoProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.videoProfile (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:videoProfile: ", p), err) }
  return err
}

func (p *Profile) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessageContentMetadata", thrift.MAP, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *Profile) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avatarProfile", thrift.STRUCT, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:avatarProfile: ", p), err) }
  if err := p.AvatarProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:avatarProfile: ", p), err) }
  return err
}

func (p *Profile) Equals(other *Profile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.Userid != other.Userid { return false }
  if p.Phone != other.Phone { return false }
  if p.Email != other.Email { return false }
  if p.RegionCode != other.RegionCode { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PhoneticName != other.PhoneticName { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  if p.ThumbnailUrl != other.ThumbnailUrl { return false }
  if p.StatusMessage != other.StatusMessage { return false }
  if p.AllowSearchByUserid != other.AllowSearchByUserid { return false }
  if p.AllowSearchByEmail != other.AllowSearchByEmail { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.MusicProfile != other.MusicProfile { return false }
  if p.VideoProfile != other.VideoProfile { return false }
  if len(p.StatusMessageContentMetadata) != len(other.StatusMessageContentMetadata) { return false }
  for k, _tgt := range p.StatusMessageContentMetadata {
    _src55 := other.StatusMessageContentMetadata[k]
    if _tgt != _src55 { return false }
  }
  if !p.AvatarProfile.Equals(other.AvatarProfile) { return false }
  return true
}

func (p *Profile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Profile(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - UserCreated
//  - RecommendEmailRegistration
type RegisterWithSnsIdResult_ struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  UserCreated bool `thrift:"userCreated,2" db:"userCreated" json:"userCreated"`
  RecommendEmailRegistration bool `thrift:"recommendEmailRegistration,3" db:"recommendEmailRegistration" json:"recommendEmailRegistration"`
}

func NewRegisterWithSnsIdResult_() *RegisterWithSnsIdResult_ {
  return &RegisterWithSnsIdResult_{}
}


func (p *RegisterWithSnsIdResult_) GetAuthToken() string {
  return p.AuthToken
}

func (p *RegisterWithSnsIdResult_) GetUserCreated() bool {
  return p.UserCreated
}

func (p *RegisterWithSnsIdResult_) GetRecommendEmailRegistration() bool {
  return p.RecommendEmailRegistration
}
func (p *RegisterWithSnsIdResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterWithSnsIdResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *RegisterWithSnsIdResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserCreated = v
}
  return nil
}

func (p *RegisterWithSnsIdResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RecommendEmailRegistration = v
}
  return nil
}

func (p *RegisterWithSnsIdResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterWithSnsIdResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterWithSnsIdResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *RegisterWithSnsIdResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userCreated", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userCreated: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.UserCreated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userCreated (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userCreated: ", p), err) }
  return err
}

func (p *RegisterWithSnsIdResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendEmailRegistration", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommendEmailRegistration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RecommendEmailRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendEmailRegistration (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommendEmailRegistration: ", p), err) }
  return err
}

func (p *RegisterWithSnsIdResult_) Equals(other *RegisterWithSnsIdResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthToken != other.AuthToken { return false }
  if p.UserCreated != other.UserCreated { return false }
  if p.RecommendEmailRegistration != other.RecommendEmailRegistration { return false }
  return true
}

func (p *RegisterWithSnsIdResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterWithSnsIdResult_(%+v)", *p)
}

// Attributes:
//  - MetaData
type AuthSessionRequest struct {
  MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
}

func NewAuthSessionRequest() *AuthSessionRequest {
  return &AuthSessionRequest{}
}


func (p *AuthSessionRequest) GetMetaData() map[string]string {
  return p.MetaData
}
func (p *AuthSessionRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthSessionRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key56 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key56 = v
}
var _val57 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val57 = v
}
    p.MetaData[_key56] = _val57
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AuthSessionRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AuthSessionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthSessionRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err) }
  return err
}

func (p *AuthSessionRequest) Equals(other *AuthSessionRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src58 := other.MetaData[k]
    if _tgt != _src58 { return false }
  }
  return true
}

func (p *AuthSessionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthSessionRequest(%+v)", *p)
}

// Attributes:
//  - CurrentPointsFixedPointDecimal
type Balance struct {
  CurrentPointsFixedPointDecimal string `thrift:"currentPointsFixedPointDecimal,1" db:"currentPointsFixedPointDecimal" json:"currentPointsFixedPointDecimal"`
}

func NewBalance() *Balance {
  return &Balance{}
}


func (p *Balance) GetCurrentPointsFixedPointDecimal() string {
  return p.CurrentPointsFixedPointDecimal
}
func (p *Balance) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Balance)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CurrentPointsFixedPointDecimal = v
}
  return nil
}

func (p *Balance) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Balance"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Balance) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "currentPointsFixedPointDecimal", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currentPointsFixedPointDecimal: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CurrentPointsFixedPointDecimal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currentPointsFixedPointDecimal (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currentPointsFixedPointDecimal: ", p), err) }
  return err
}

func (p *Balance) Equals(other *Balance) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CurrentPointsFixedPointDecimal != other.CurrentPointsFixedPointDecimal { return false }
  return true
}

func (p *Balance) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Balance(%+v)", *p)
}

// Attributes:
//  - Balance
type GetBalanceResponse struct {
  Balance *Balance `thrift:"balance,1" db:"balance" json:"balance"`
}

func NewGetBalanceResponse() *GetBalanceResponse {
  return &GetBalanceResponse{}
}

var GetBalanceResponse_Balance_DEFAULT *Balance
func (p *GetBalanceResponse) GetBalance() *Balance {
  if !p.IsSetBalance() {
    return GetBalanceResponse_Balance_DEFAULT
  }
return p.Balance
}
func (p *GetBalanceResponse) IsSetBalance() bool {
  return p.Balance != nil
}

func (p *GetBalanceResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetBalanceResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Balance = &Balance{}
  if err := p.Balance.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
  }
  return nil
}

func (p *GetBalanceResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetBalanceResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetBalanceResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balance", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:balance: ", p), err) }
  if err := p.Balance.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:balance: ", p), err) }
  return err
}

func (p *GetBalanceResponse) Equals(other *GetBalanceResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Balance.Equals(other.Balance) { return false }
  return true
}

func (p *GetBalanceResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetBalanceResponse(%+v)", *p)
}

type GetBalanceRequest struct {
}

func NewGetBalanceRequest() *GetBalanceRequest {
  return &GetBalanceRequest{}
}

func (p *GetBalanceRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetBalanceRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetBalanceRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetBalanceRequest) Equals(other *GetBalanceRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *GetBalanceRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetBalanceRequest(%+v)", *p)
}

// Attributes:
//  - VerificationResult_
//  - AccountMigrationCheckType
//  - RecommendAddFriends
type PhoneVerificationResult_ struct {
  VerificationResult_ VerificationResult_ `thrift:"verificationResult,1" db:"verificationResult" json:"verificationResult"`
  AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,2" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
  RecommendAddFriends bool `thrift:"recommendAddFriends,3" db:"recommendAddFriends" json:"recommendAddFriends"`
}

func NewPhoneVerificationResult_() *PhoneVerificationResult_ {
  return &PhoneVerificationResult_{}
}


func (p *PhoneVerificationResult_) GetVerificationResult_() VerificationResult_ {
  return p.VerificationResult_
}

func (p *PhoneVerificationResult_) GetAccountMigrationCheckType() AccountMigrationCheckType {
  return p.AccountMigrationCheckType
}

func (p *PhoneVerificationResult_) GetRecommendAddFriends() bool {
  return p.RecommendAddFriends
}
func (p *PhoneVerificationResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneVerificationResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := VerificationResult_(v)
  p.VerificationResult_ = temp
}
  return nil
}

func (p *PhoneVerificationResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AccountMigrationCheckType(v)
  p.AccountMigrationCheckType = temp
}
  return nil
}

func (p *PhoneVerificationResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RecommendAddFriends = v
}
  return nil
}

func (p *PhoneVerificationResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PhoneVerificationResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneVerificationResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verificationResult", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:verificationResult: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VerificationResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verificationResult (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:verificationResult: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationCheckType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountMigrationCheckType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccountMigrationCheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountMigrationCheckType: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendAddFriends", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommendAddFriends: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RecommendAddFriends)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendAddFriends (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommendAddFriends: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) Equals(other *PhoneVerificationResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.VerificationResult_ != other.VerificationResult_ { return false }
  if p.AccountMigrationCheckType != other.AccountMigrationCheckType { return false }
  if p.RecommendAddFriends != other.RecommendAddFriends { return false }
  return true
}

func (p *PhoneVerificationResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneVerificationResult_(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Contents
//  - NotificationDisabled
//  - MemberMids
type Room struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Contents []*Contact `thrift:"contents,10" db:"contents" json:"contents"`
  // unused fields # 11 to 30
  NotificationDisabled bool `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
  // unused fields # 32 to 39
  MemberMids []string `thrift:"memberMids,40" db:"memberMids" json:"memberMids"`
}

func NewRoom() *Room {
  return &Room{}
}


func (p *Room) GetMid() string {
  return p.Mid
}

func (p *Room) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Room) GetContents() []*Contact {
  return p.Contents
}

func (p *Room) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *Room) GetMemberMids() []string {
  return p.MemberMids
}
func (p *Room) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Room)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Room)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Room)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Contents =  tSlice
  for i := 0; i < size; i ++ {
    _elem59 := &Contact{}
    if err := _elem59.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem59), err)
    }
    p.Contents = append(p.Contents, _elem59)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Room)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Room)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem60 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem60 = v
}
    p.MemberMids = append(p.MemberMids, _elem60)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Room) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Room"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Room) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Room) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Room) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:contents: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Contents)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contents {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:contents: ", p), err) }
  return err
}

func (p *Room) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabled", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err) }
  return err
}

func (p *Room) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.LIST, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err) }
  return err
}

func (p *Room) Equals(other *Room) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if len(p.Contents) != len(other.Contents) { return false }
  for i, _tgt := range p.Contents {
    _src61 := other.Contents[i]
    if !_tgt.Equals(_src61) { return false }
  }
  if p.NotificationDisabled != other.NotificationDisabled { return false }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for i, _tgt := range p.MemberMids {
    _src62 := other.MemberMids[i]
    if _tgt != _src62 { return false }
  }
  return true
}

func (p *Room) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Room(%+v)", *p)
}

// Attributes:
//  - Chats
type GetChatsResponse struct {
  Chats []*Chat `thrift:"chats,1" db:"chats" json:"chats"`
}

func NewGetChatsResponse() *GetChatsResponse {
  return &GetChatsResponse{}
}


func (p *GetChatsResponse) GetChats() []*Chat {
  return p.Chats
}
func (p *GetChatsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetChatsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Chat, 0, size)
  p.Chats =  tSlice
  for i := 0; i < size; i ++ {
    _elem63 := &Chat{}
    if err := _elem63.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem63), err)
    }
    p.Chats = append(p.Chats, _elem63)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetChatsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetChatsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetChatsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chats", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chats: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Chats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chats {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chats: ", p), err) }
  return err
}

func (p *GetChatsResponse) Equals(other *GetChatsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Chats) != len(other.Chats) { return false }
  for i, _tgt := range p.Chats {
    _src64 := other.Chats[i]
    if !_tgt.Equals(_src64) { return false }
  }
  return true
}

func (p *GetChatsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetChatsResponse(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - WithMembers
//  - WithInvitees
type GetChatsRequest struct {
  ChatMid []string `thrift:"chatMid,1" db:"chatMid" json:"chatMid"`
  WithMembers bool `thrift:"withMembers,2" db:"withMembers" json:"withMembers"`
  WithInvitees bool `thrift:"withInvitees,3" db:"withInvitees" json:"withInvitees"`
}

func NewGetChatsRequest() *GetChatsRequest {
  return &GetChatsRequest{}
}


func (p *GetChatsRequest) GetChatMid() []string {
  return p.ChatMid
}

func (p *GetChatsRequest) GetWithMembers() bool {
  return p.WithMembers
}

func (p *GetChatsRequest) GetWithInvitees() bool {
  return p.WithInvitees
}
func (p *GetChatsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetChatsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatMid =  tSlice
  for i := 0; i < size; i ++ {
var _elem65 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem65 = v
}
    p.ChatMid = append(p.ChatMid, _elem65)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetChatsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithMembers = v
}
  return nil
}

func (p *GetChatsRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WithInvitees = v
}
  return nil
}

func (p *GetChatsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetChatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetChatsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMid: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ChatMid)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatMid {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMid: ", p), err) }
  return err
}

func (p *GetChatsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withMembers", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withMembers: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithMembers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withMembers (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withMembers: ", p), err) }
  return err
}

func (p *GetChatsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withInvitees", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withInvitees: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithInvitees)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withInvitees (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withInvitees: ", p), err) }
  return err
}

func (p *GetChatsRequest) Equals(other *GetChatsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ChatMid) != len(other.ChatMid) { return false }
  for i, _tgt := range p.ChatMid {
    _src66 := other.ChatMid[i]
    if _tgt != _src66 { return false }
  }
  if p.WithMembers != other.WithMembers { return false }
  if p.WithInvitees != other.WithInvitees { return false }
  return true
}

func (p *GetChatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetChatsRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
type ReissueChatTicketRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
}

func NewReissueChatTicketRequest() *ReissueChatTicketRequest {
  return &ReissueChatTicketRequest{}
}


func (p *ReissueChatTicketRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *ReissueChatTicketRequest) GetGroupMid() string {
  return p.GroupMid
}
func (p *ReissueChatTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReissueChatTicketRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *ReissueChatTicketRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupMid = v
}
  return nil
}

func (p *ReissueChatTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReissueChatTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReissueChatTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *ReissueChatTicketRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err) }
  return err
}

func (p *ReissueChatTicketRequest) Equals(other *ReissueChatTicketRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.GroupMid != other.GroupMid { return false }
  return true
}

func (p *ReissueChatTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReissueChatTicketRequest(%+v)", *p)
}

// Attributes:
//  - TicketId
type ReissueChatTicketResponse struct {
  TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewReissueChatTicketResponse() *ReissueChatTicketResponse {
  return &ReissueChatTicketResponse{}
}


func (p *ReissueChatTicketResponse) GetTicketId() string {
  return p.TicketId
}
func (p *ReissueChatTicketResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReissueChatTicketResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *ReissueChatTicketResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReissueChatTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReissueChatTicketResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err) }
  return err
}

func (p *ReissueChatTicketResponse) Equals(other *ReissueChatTicketResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TicketId != other.TicketId { return false }
  return true
}

func (p *ReissueChatTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReissueChatTicketResponse(%+v)", *p)
}

// Attributes:
//  - Title
//  - Address
//  - Latitude
//  - Longitude
//  - Phone
//  - CategoryId
//  - Provider
//  - Accuracy
type Location struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Address string `thrift:"address,2" db:"address" json:"address"`
  Latitude float64 `thrift:"latitude,3" db:"latitude" json:"latitude"`
  Longitude float64 `thrift:"longitude,4" db:"longitude" json:"longitude"`
  Phone string `thrift:"phone,5" db:"phone" json:"phone"`
  CategoryId string `thrift:"categoryId,6" db:"categoryId" json:"categoryId"`
  Provider LocationProvider `thrift:"provider,7" db:"provider" json:"provider"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,8" db:"accuracy" json:"accuracy"`
}

func NewLocation() *Location {
  return &Location{}
}


func (p *Location) GetTitle() string {
  return p.Title
}

func (p *Location) GetAddress() string {
  return p.Address
}

func (p *Location) GetLatitude() float64 {
  return p.Latitude
}

func (p *Location) GetLongitude() float64 {
  return p.Longitude
}

func (p *Location) GetPhone() string {
  return p.Phone
}

func (p *Location) GetCategoryId() string {
  return p.CategoryId
}

func (p *Location) GetProvider() LocationProvider {
  return p.Provider
}
var Location_Accuracy_DEFAULT *GeolocationAccuracy
func (p *Location) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return Location_Accuracy_DEFAULT
  }
return p.Accuracy
}
func (p *Location) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *Location) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Location)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Location)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Location)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *Location)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *Location)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Location)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CategoryId = v
}
  return nil
}

func (p *Location)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := LocationProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *Location)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *Location) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Location"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Location) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *Location) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *Location) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "latitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err) }
  return err
}

func (p *Location) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "longitude", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err) }
  return err
}

func (p *Location) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err) }
  return err
}

func (p *Location) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "categoryId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:categoryId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CategoryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:categoryId: ", p), err) }
  return err
}

func (p *Location) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:provider: ", p), err) }
  return err
}

func (p *Location) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accuracy", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accuracy: ", p), err) }
  if err := p.Accuracy.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accuracy: ", p), err) }
  return err
}

func (p *Location) Equals(other *Location) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Title != other.Title { return false }
  if p.Address != other.Address { return false }
  if p.Latitude != other.Latitude { return false }
  if p.Longitude != other.Longitude { return false }
  if p.Phone != other.Phone { return false }
  if p.CategoryId != other.CategoryId { return false }
  if p.Provider != other.Provider { return false }
  if !p.Accuracy.Equals(other.Accuracy) { return false }
  return true
}

func (p *Location) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Location(%+v)", *p)
}

// Attributes:
//  - From_
//  - To
//  - ToType
//  - ID
//  - CreatedTime
//  - DeliveredTime
//  - Text
//  - Location
//  - HasContent
//  - ContentType
//  - ContentMetadata
//  - ContentPreview
//  - SessionId
//  - Chunks
//  - RelatedMessageId
//  - MessageRelationType
//  - ReadCount
//  - RelatedMessageServiceCode
//  - AppExtensionType
type Message struct {
  From_ string `thrift:"from_,1" db:"from_" json:"from_"`
  To string `thrift:"to,2" db:"to" json:"to"`
  ToType *ToType `thrift:"toType,3" db:"toType" json:"toType,omitempty"`
  ID string `thrift:"id,4" db:"id" json:"id"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
  DeliveredTime int64 `thrift:"deliveredTime,6" db:"deliveredTime" json:"deliveredTime"`
  // unused fields # 7 to 9
  Text string `thrift:"text,10" db:"text" json:"text"`
  Location *Location `thrift:"location,11" db:"location" json:"location,omitempty"`
  // unused fields # 12 to 13
  HasContent bool `thrift:"hasContent,14" db:"hasContent" json:"hasContent"`
  ContentType ContentType `thrift:"contentType,15" db:"contentType" json:"contentType"`
  // unused field # 16
  ContentPreview []byte `thrift:"contentPreview,17" db:"contentPreview" json:"contentPreview"`
  ContentMetadata map[string]string `thrift:"contentMetadata,18" db:"contentMetadata" json:"contentMetadata"`
  SessionId []byte `thrift:"sessionId,19" db:"sessionId" json:"sessionId"`
  Chunks [][]byte `thrift:"chunks,20" db:"chunks" json:"chunks"`
  RelatedMessageId *string `thrift:"relatedMessageId,21" db:"relatedMessageId" json:"relatedMessageId,omitempty"`
  MessageRelationType MessageRelationType `thrift:"messageRelationType,22" db:"messageRelationType" json:"messageRelationType"`
  ReadCount int32 `thrift:"readCount,23" db:"readCount" json:"readCount"`
  RelatedMessageServiceCode RelatedMessageServiceCode `thrift:"relatedMessageServiceCode,24" db:"relatedMessageServiceCode" json:"relatedMessageServiceCode"`
  AppExtensionType AppExtensionType `thrift:"appExtensionType,25" db:"appExtensionType" json:"appExtensionType"`
}

func NewMessage() *Message {
  return &Message{}
}


func (p *Message) GetFrom_() string {
  return p.From_
}

func (p *Message) GetTo() string {
  return p.To
}
var Message_ToType_DEFAULT ToType
func (p *Message) GetToType() ToType {
  if !p.IsSetToType() {
    return Message_ToType_DEFAULT
  }
return *p.ToType
}

func (p *Message) GetID() string {
  return p.ID
}

func (p *Message) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Message) GetDeliveredTime() int64 {
  return p.DeliveredTime
}

func (p *Message) GetText() string {
  return p.Text
}
var Message_Location_DEFAULT *Location
func (p *Message) GetLocation() *Location {
  if !p.IsSetLocation() {
    return Message_Location_DEFAULT
  }
return p.Location
}

func (p *Message) GetHasContent() bool {
  return p.HasContent
}

func (p *Message) GetContentType() ContentType {
  return p.ContentType
}

func (p *Message) GetContentMetadata() map[string]string {
  return p.ContentMetadata
}

func (p *Message) GetContentPreview() []byte {
  return p.ContentPreview
}

func (p *Message) GetSessionId() []byte {
  return p.SessionId
}

func (p *Message) GetChunks() [][]byte {
  return p.Chunks
}
var Message_RelatedMessageId_DEFAULT string
func (p *Message) GetRelatedMessageId() string {
  if !p.IsSetRelatedMessageId() {
    return Message_RelatedMessageId_DEFAULT
  }
return *p.RelatedMessageId
}

func (p *Message) GetMessageRelationType() MessageRelationType {
  return p.MessageRelationType
}

func (p *Message) GetReadCount() int32 {
  return p.ReadCount
}

func (p *Message) GetRelatedMessageServiceCode() RelatedMessageServiceCode {
  return p.RelatedMessageServiceCode
}

func (p *Message) GetAppExtensionType() AppExtensionType {
  return p.AppExtensionType
}
func (p *Message) IsSetToType() bool {
  return p.ToType != nil
}

func (p *Message) IsSetLocation() bool {
  return p.Location != nil
}

func (p *Message) IsSetRelatedMessageId() bool {
  return p.RelatedMessageId != nil
}

func (p *Message) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Message)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.From_ = v
}
  return nil
}

func (p *Message)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.To = v
}
  return nil
}

func (p *Message)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ToType(v)
  p.ToType = &temp
}
  return nil
}

func (p *Message)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Message)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Message)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DeliveredTime = v
}
  return nil
}

func (p *Message)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Message)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.Location = &Location{}
  if err := p.Location.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *Message)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.HasContent = v
}
  return nil
}

func (p *Message)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  temp := ContentType(v)
  p.ContentType = temp
}
  return nil
}

func (p *Message)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key67 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key67 = v
}
var _val68 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val68 = v
}
    p.ContentMetadata[_key67] = _val68
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Message)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.ContentPreview = v
}
  return nil
}

func (p *Message)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *Message)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Chunks =  tSlice
  for i := 0; i < size; i ++ {
var _elem69 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem69 = v
}
    p.Chunks = append(p.Chunks, _elem69)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Message)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.RelatedMessageId = &v
}
  return nil
}

func (p *Message)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  temp := MessageRelationType(v)
  p.MessageRelationType = temp
}
  return nil
}

func (p *Message)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ReadCount = v
}
  return nil
}

func (p *Message)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  temp := RelatedMessageServiceCode(v)
  p.RelatedMessageServiceCode = temp
}
  return nil
}

func (p *Message)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  temp := AppExtensionType(v)
  p.AppExtensionType = temp
}
  return nil
}

func (p *Message) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Message"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Message) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "from_", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:from_: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.From_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.from_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:from_: ", p), err) }
  return err
}

func (p *Message) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "to", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.To)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err) }
  return err
}

func (p *Message) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetToType() {
    if err := oprot.WriteFieldBegin(ctx, "toType", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ToType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.toType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toType: ", p), err) }
  }
  return err
}

func (p *Message) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *Message) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *Message) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deliveredTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deliveredTime: ", p), err) }
  return err
}

func (p *Message) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:text: ", p), err) }
  return err
}

func (p *Message) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLocation() {
    if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:location: ", p), err) }
    if err := p.Location.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:location: ", p), err) }
  }
  return err
}

func (p *Message) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasContent", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hasContent: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasContent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasContent (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hasContent: ", p), err) }
  return err
}

func (p *Message) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentType", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contentType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentType (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contentType: ", p), err) }
  return err
}

func (p *Message) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentPreview", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:contentPreview: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ContentPreview); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentPreview (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:contentPreview: ", p), err) }
  return err
}

func (p *Message) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentMetadata", thrift.MAP, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:contentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:contentMetadata: ", p), err) }
  return err
}

func (p *Message) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:sessionId: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SessionId); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:sessionId: ", p), err) }
  return err
}

func (p *Message) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chunks", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:chunks: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Chunks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chunks {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:chunks: ", p), err) }
  return err
}

func (p *Message) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRelatedMessageId() {
    if err := oprot.WriteFieldBegin(ctx, "relatedMessageId", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relatedMessageId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RelatedMessageId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.relatedMessageId (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relatedMessageId: ", p), err) }
  }
  return err
}

func (p *Message) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageRelationType", thrift.I32, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:messageRelationType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MessageRelationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageRelationType (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:messageRelationType: ", p), err) }
  return err
}

func (p *Message) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "readCount", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:readCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readCount (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:readCount: ", p), err) }
  return err
}

func (p *Message) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relatedMessageServiceCode", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:relatedMessageServiceCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RelatedMessageServiceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageServiceCode (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:relatedMessageServiceCode: ", p), err) }
  return err
}

func (p *Message) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appExtensionType", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:appExtensionType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppExtensionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appExtensionType (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:appExtensionType: ", p), err) }
  return err
}

func (p *Message) Equals(other *Message) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.From_ != other.From_ { return false }
  if p.To != other.To { return false }
  if p.ToType != other.ToType {
    if p.ToType == nil || other.ToType == nil {
      return false
    }
    if (*p.ToType) != (*other.ToType) { return false }
  }
  if p.ID != other.ID { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.DeliveredTime != other.DeliveredTime { return false }
  if p.Text != other.Text { return false }
  if !p.Location.Equals(other.Location) { return false }
  if p.HasContent != other.HasContent { return false }
  if p.ContentType != other.ContentType { return false }
  if bytes.Compare(p.ContentPreview, other.ContentPreview) != 0 { return false }
  if len(p.ContentMetadata) != len(other.ContentMetadata) { return false }
  for k, _tgt := range p.ContentMetadata {
    _src70 := other.ContentMetadata[k]
    if _tgt != _src70 { return false }
  }
  if bytes.Compare(p.SessionId, other.SessionId) != 0 { return false }
  if len(p.Chunks) != len(other.Chunks) { return false }
  for i, _tgt := range p.Chunks {
    _src71 := other.Chunks[i]
    if bytes.Compare(_tgt, _src71) != 0 { return false }
  }
  if p.RelatedMessageId != other.RelatedMessageId {
    if p.RelatedMessageId == nil || other.RelatedMessageId == nil {
      return false
    }
    if (*p.RelatedMessageId) != (*other.RelatedMessageId) { return false }
  }
  if p.MessageRelationType != other.MessageRelationType { return false }
  if p.ReadCount != other.ReadCount { return false }
  if p.RelatedMessageServiceCode != other.RelatedMessageServiceCode { return false }
  if p.AppExtensionType != other.AppExtensionType { return false }
  return true
}

func (p *Message) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Message(%+v)", *p)
}

// Attributes:
//  - Host
//  - Port
//  - Zone
type CallHost struct {
  Host string `thrift:"host,1" db:"host" json:"host"`
  Port int32 `thrift:"port,2" db:"port" json:"port"`
  Zone string `thrift:"zone,3" db:"zone" json:"zone"`
}

func NewCallHost() *CallHost {
  return &CallHost{}
}


func (p *CallHost) GetHost() string {
  return p.Host
}

func (p *CallHost) GetPort() int32 {
  return p.Port
}

func (p *CallHost) GetZone() string {
  return p.Zone
}
func (p *CallHost) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallHost)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *CallHost)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *CallHost)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Zone = v
}
  return nil
}

func (p *CallHost) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CallHost"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallHost) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *CallHost) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *CallHost) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:zone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Zone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:zone: ", p), err) }
  return err
}

func (p *CallHost) Equals(other *CallHost) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Host != other.Host { return false }
  if p.Port != other.Port { return false }
  if p.Zone != other.Zone { return false }
  return true
}

func (p *CallHost) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallHost(%+v)", *p)
}

// Attributes:
//  - Token
//  - Cscf
//  - Mix
//  - HostMid
//  - Capabilities
//  - Proto
//  - VoipAddress
//  - VoipUdpPort
//  - VoipTcpPort
//  - FromZone
//  - CommParam
//  - PolarisAddress
//  - PolarisUdpPort
//  - PolarisZone
//  - OrionAddress
type GroupCallRoute struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Cscf *CallHost `thrift:"cscf,2" db:"cscf" json:"cscf"`
  Mix *CallHost `thrift:"mix,3" db:"mix" json:"mix"`
  HostMid string `thrift:"hostMid,4" db:"hostMid" json:"hostMid"`
  Capabilities []string `thrift:"capabilities,5" db:"capabilities" json:"capabilities"`
  Proto ProtoCall `thrift:"proto,6" db:"proto" json:"proto"`
  VoipAddress string `thrift:"voipAddress,7" db:"voipAddress" json:"voipAddress"`
  VoipUdpPort int32 `thrift:"voipUdpPort,8" db:"voipUdpPort" json:"voipUdpPort"`
  VoipTcpPort int32 `thrift:"voipTcpPort,9" db:"voipTcpPort" json:"voipTcpPort"`
  FromZone string `thrift:"fromZone,10" db:"fromZone" json:"fromZone"`
  CommParam string `thrift:"commParam,11" db:"commParam" json:"commParam"`
  PolarisAddress string `thrift:"polarisAddress,12" db:"polarisAddress" json:"polarisAddress"`
  PolarisUdpPort int32 `thrift:"polarisUdpPort,13" db:"polarisUdpPort" json:"polarisUdpPort"`
  PolarisZone string `thrift:"polarisZone,14" db:"polarisZone" json:"polarisZone"`
  OrionAddress string `thrift:"orionAddress,15" db:"orionAddress" json:"orionAddress"`
}

func NewGroupCallRoute() *GroupCallRoute {
  return &GroupCallRoute{}
}


func (p *GroupCallRoute) GetToken() string {
  return p.Token
}
var GroupCallRoute_Cscf_DEFAULT *CallHost
func (p *GroupCallRoute) GetCscf() *CallHost {
  if !p.IsSetCscf() {
    return GroupCallRoute_Cscf_DEFAULT
  }
return p.Cscf
}
var GroupCallRoute_Mix_DEFAULT *CallHost
func (p *GroupCallRoute) GetMix() *CallHost {
  if !p.IsSetMix() {
    return GroupCallRoute_Mix_DEFAULT
  }
return p.Mix
}

func (p *GroupCallRoute) GetHostMid() string {
  return p.HostMid
}

func (p *GroupCallRoute) GetCapabilities() []string {
  return p.Capabilities
}

func (p *GroupCallRoute) GetProto() ProtoCall {
  return p.Proto
}

func (p *GroupCallRoute) GetVoipAddress() string {
  return p.VoipAddress
}

func (p *GroupCallRoute) GetVoipUdpPort() int32 {
  return p.VoipUdpPort
}

func (p *GroupCallRoute) GetVoipTcpPort() int32 {
  return p.VoipTcpPort
}

func (p *GroupCallRoute) GetFromZone() string {
  return p.FromZone
}

func (p *GroupCallRoute) GetCommParam() string {
  return p.CommParam
}

func (p *GroupCallRoute) GetPolarisAddress() string {
  return p.PolarisAddress
}

func (p *GroupCallRoute) GetPolarisUdpPort() int32 {
  return p.PolarisUdpPort
}

func (p *GroupCallRoute) GetPolarisZone() string {
  return p.PolarisZone
}

func (p *GroupCallRoute) GetOrionAddress() string {
  return p.OrionAddress
}
func (p *GroupCallRoute) IsSetCscf() bool {
  return p.Cscf != nil
}

func (p *GroupCallRoute) IsSetMix() bool {
  return p.Mix != nil
}

func (p *GroupCallRoute) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupCallRoute)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Cscf = &CallHost{}
  if err := p.Cscf.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cscf), err)
  }
  return nil
}

func (p *GroupCallRoute)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Mix = &CallHost{}
  if err := p.Mix.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mix), err)
  }
  return nil
}

func (p *GroupCallRoute)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HostMid = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Capabilities =  tSlice
  for i := 0; i < size; i ++ {
var _elem72 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem72 = v
}
    p.Capabilities = append(p.Capabilities, _elem72)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupCallRoute)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := ProtoCall(v)
  p.Proto = temp
}
  return nil
}

func (p *GroupCallRoute)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VoipAddress = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VoipUdpPort = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VoipTcpPort = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FromZone = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CommParam = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PolarisAddress = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PolarisUdpPort = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.PolarisZone = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.OrionAddress = v
}
  return nil
}

func (p *GroupCallRoute) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GroupCallRoute"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupCallRoute) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cscf", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cscf: ", p), err) }
  if err := p.Cscf.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cscf), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cscf: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mix", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mix: ", p), err) }
  if err := p.Mix.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mix), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mix: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostMid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HostMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostMid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostMid: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capabilities", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:capabilities: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Capabilities)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Capabilities {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:capabilities: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "proto", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:proto: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Proto)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proto (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:proto: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voipAddress", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:voipAddress: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VoipAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipAddress (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:voipAddress: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voipUdpPort", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:voipUdpPort: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoipUdpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipUdpPort (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:voipUdpPort: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voipTcpPort", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:voipTcpPort: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoipTcpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipTcpPort (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:voipTcpPort: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromZone", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fromZone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FromZone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromZone (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fromZone: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "commParam", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:commParam: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CommParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commParam (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:commParam: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "polarisAddress", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:polarisAddress: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PolarisAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polarisAddress (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:polarisAddress: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "polarisUdpPort", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:polarisUdpPort: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PolarisUdpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polarisUdpPort (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:polarisUdpPort: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "polarisZone", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:polarisZone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PolarisZone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polarisZone (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:polarisZone: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "orionAddress", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:orionAddress: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OrionAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orionAddress (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:orionAddress: ", p), err) }
  return err
}

func (p *GroupCallRoute) Equals(other *GroupCallRoute) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Token != other.Token { return false }
  if !p.Cscf.Equals(other.Cscf) { return false }
  if !p.Mix.Equals(other.Mix) { return false }
  if p.HostMid != other.HostMid { return false }
  if len(p.Capabilities) != len(other.Capabilities) { return false }
  for i, _tgt := range p.Capabilities {
    _src73 := other.Capabilities[i]
    if _tgt != _src73 { return false }
  }
  if p.Proto != other.Proto { return false }
  if p.VoipAddress != other.VoipAddress { return false }
  if p.VoipUdpPort != other.VoipUdpPort { return false }
  if p.VoipTcpPort != other.VoipTcpPort { return false }
  if p.FromZone != other.FromZone { return false }
  if p.CommParam != other.CommParam { return false }
  if p.PolarisAddress != other.PolarisAddress { return false }
  if p.PolarisUdpPort != other.PolarisUdpPort { return false }
  if p.PolarisZone != other.PolarisZone { return false }
  if p.OrionAddress != other.OrionAddress { return false }
  return true
}

func (p *GroupCallRoute) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupCallRoute(%+v)", *p)
}

type AcceptChatInvitationByTicketResponse struct {
}

func NewAcceptChatInvitationByTicketResponse() *AcceptChatInvitationByTicketResponse {
  return &AcceptChatInvitationByTicketResponse{}
}

func (p *AcceptChatInvitationByTicketResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationByTicketResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationByTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationByTicketResponse) Equals(other *AcceptChatInvitationByTicketResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *AcceptChatInvitationByTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationByTicketResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TicketId
type AcceptChatInvitationByTicketRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TicketId string `thrift:"ticketId,3" db:"ticketId" json:"ticketId"`
}

func NewAcceptChatInvitationByTicketRequest() *AcceptChatInvitationByTicketRequest {
  return &AcceptChatInvitationByTicketRequest{}
}


func (p *AcceptChatInvitationByTicketRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *AcceptChatInvitationByTicketRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *AcceptChatInvitationByTicketRequest) GetTicketId() string {
  return p.TicketId
}
func (p *AcceptChatInvitationByTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationByTicketRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *AcceptChatInvitationByTicketRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *AcceptChatInvitationByTicketRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *AcceptChatInvitationByTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationByTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationByTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ticketId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ticketId: ", p), err) }
  return err
}

func (p *AcceptChatInvitationByTicketRequest) Equals(other *AcceptChatInvitationByTicketRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.TicketId != other.TicketId { return false }
  return true
}

func (p *AcceptChatInvitationByTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationByTicketRequest(%+v)", *p)
}

// Attributes:
//  - Value
//  - Meta
type ProfileContent struct {
  Value string `thrift:"value,1" db:"value" json:"value"`
  Meta map[string]string `thrift:"meta,2" db:"meta" json:"meta"`
}

func NewProfileContent() *ProfileContent {
  return &ProfileContent{}
}


func (p *ProfileContent) GetValue() string {
  return p.Value
}

func (p *ProfileContent) GetMeta() map[string]string {
  return p.Meta
}
func (p *ProfileContent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProfileContent)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ProfileContent)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Meta =  tMap
  for i := 0; i < size; i ++ {
var _key74 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key74 = v
}
var _val75 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val75 = v
}
    p.Meta[_key74] = _val75
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProfileContent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ProfileContent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProfileContent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *ProfileContent) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "meta", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:meta: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Meta)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Meta {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:meta: ", p), err) }
  return err
}

func (p *ProfileContent) Equals(other *ProfileContent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Value != other.Value { return false }
  if len(p.Meta) != len(other.Meta) { return false }
  for k, _tgt := range p.Meta {
    _src76 := other.Meta[k]
    if _tgt != _src76 { return false }
  }
  return true
}

func (p *ProfileContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProfileContent(%+v)", *p)
}

// Attributes:
//  - ProfileAttributes
type UpdateProfileAttributesRequest struct {
  ProfileAttributes map[Attr]*ProfileContent `thrift:"profileAttributes,1" db:"profileAttributes" json:"profileAttributes"`
}

func NewUpdateProfileAttributesRequest() *UpdateProfileAttributesRequest {
  return &UpdateProfileAttributesRequest{}
}


func (p *UpdateProfileAttributesRequest) GetProfileAttributes() map[Attr]*ProfileContent {
  return p.ProfileAttributes
}
func (p *UpdateProfileAttributesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateProfileAttributesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[Attr]*ProfileContent, size)
  p.ProfileAttributes =  tMap
  for i := 0; i < size; i ++ {
var _key77 Attr
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Attr(v)
    _key77 = temp
}
    _val78 := &ProfileContent{}
    if err := _val78.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val78), err)
    }
    p.ProfileAttributes[_key77] = _val78
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UpdateProfileAttributesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateProfileAttributesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateProfileAttributesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profileAttributes", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profileAttributes: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.ProfileAttributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ProfileAttributes {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profileAttributes: ", p), err) }
  return err
}

func (p *UpdateProfileAttributesRequest) Equals(other *UpdateProfileAttributesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ProfileAttributes) != len(other.ProfileAttributes) { return false }
  for k, _tgt := range p.ProfileAttributes {
    _src79 := other.ProfileAttributes[k]
    if !_tgt.Equals(_src79) { return false }
  }
  return true
}

func (p *UpdateProfileAttributesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateProfileAttributesRequest(%+v)", *p)
}

type AcceptChatInvitationResponse struct {
}

func NewAcceptChatInvitationResponse() *AcceptChatInvitationResponse {
  return &AcceptChatInvitationResponse{}
}

func (p *AcceptChatInvitationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationResponse) Equals(other *AcceptChatInvitationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *AcceptChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type AcceptChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewAcceptChatInvitationRequest() *AcceptChatInvitationRequest {
  return &AcceptChatInvitationRequest{}
}


func (p *AcceptChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *AcceptChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}
func (p *AcceptChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *AcceptChatInvitationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *AcceptChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *AcceptChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *AcceptChatInvitationRequest) Equals(other *AcceptChatInvitationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  return true
}

func (p *AcceptChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationRequest(%+v)", *p)
}

type InviteIntoChatResponse struct {
}

func NewInviteIntoChatResponse() *InviteIntoChatResponse {
  return &InviteIntoChatResponse{}
}

func (p *InviteIntoChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteIntoChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InviteIntoChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteIntoChatResponse) Equals(other *InviteIntoChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *InviteIntoChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteIntoChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type InviteIntoChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewInviteIntoChatRequest() *InviteIntoChatRequest {
  return &InviteIntoChatRequest{}
}


func (p *InviteIntoChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *InviteIntoChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *InviteIntoChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *InviteIntoChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteIntoChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *InviteIntoChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *InviteIntoChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem80 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem80 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem80)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *InviteIntoChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InviteIntoChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteIntoChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) Equals(other *InviteIntoChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src81 := other.TargetUserMids[i]
    if _tgt != _src81 { return false }
  }
  return true
}

func (p *InviteIntoChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteIntoChatRequest(%+v)", *p)
}

// Attributes:
//  - FollowMid
type FollowRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewFollowRequest() *FollowRequest {
  return &FollowRequest{}
}

var FollowRequest_FollowMid_DEFAULT *FollowMid
func (p *FollowRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return FollowRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}
func (p *FollowRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *FollowRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *FollowRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *FollowRequest) Equals(other *FollowRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  return true
}

func (p *FollowRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowRequest(%+v)", *p)
}

// Attributes:
//  - Revision
//  - CreatedTime
//  - Type
//  - ReqSeq
//  - Checksum
//  - Status
//  - Param1
//  - Param2
//  - Param3
//  - Message
type Operation struct {
  Revision int64 `thrift:"revision,1" db:"revision" json:"revision"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  Type OpType `thrift:"type,3" db:"type" json:"type"`
  ReqSeq int32 `thrift:"reqSeq,4" db:"reqSeq" json:"reqSeq"`
  Checksum string `thrift:"checksum,5" db:"checksum" json:"checksum"`
  // unused field # 6
  Status OpStatus `thrift:"status,7" db:"status" json:"status"`
  // unused fields # 8 to 9
  Param1 string `thrift:"param1,10" db:"param1" json:"param1"`
  Param2 string `thrift:"param2,11" db:"param2" json:"param2"`
  Param3 string `thrift:"param3,12" db:"param3" json:"param3"`
  // unused fields # 13 to 19
  Message *Message `thrift:"message,20" db:"message" json:"message"`
}

func NewOperation() *Operation {
  return &Operation{}
}


func (p *Operation) GetRevision() int64 {
  return p.Revision
}

func (p *Operation) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Operation) GetType() OpType {
  return p.Type
}

func (p *Operation) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *Operation) GetChecksum() string {
  return p.Checksum
}

func (p *Operation) GetStatus() OpStatus {
  return p.Status
}

func (p *Operation) GetParam1() string {
  return p.Param1
}

func (p *Operation) GetParam2() string {
  return p.Param2
}

func (p *Operation) GetParam3() string {
  return p.Param3
}
var Operation_Message_DEFAULT *Message
func (p *Operation) GetMessage() *Message {
  if !p.IsSetMessage() {
    return Operation_Message_DEFAULT
  }
return p.Message
}
func (p *Operation) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Operation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Operation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *Operation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Operation)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := OpType(v)
  p.Type = temp
}
  return nil
}

func (p *Operation)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *Operation)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Checksum = v
}
  return nil
}

func (p *Operation)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := OpStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Operation)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Param1 = v
}
  return nil
}

func (p *Operation)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Param2 = v
}
  return nil
}

func (p *Operation)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Param3 = v
}
  return nil
}

func (p *Operation)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  p.Message = &Message{}
  if err := p.Message.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *Operation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Operation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Operation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err) }
  return err
}

func (p *Operation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Operation) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *Operation) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqSeq: ", p), err) }
  return err
}

func (p *Operation) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "checksum", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:checksum: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Checksum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checksum (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:checksum: ", p), err) }
  return err
}

func (p *Operation) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *Operation) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param1", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:param1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param1 (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:param1: ", p), err) }
  return err
}

func (p *Operation) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param2", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:param2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param2 (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:param2: ", p), err) }
  return err
}

func (p *Operation) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param3", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:param3: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param3 (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:param3: ", p), err) }
  return err
}

func (p *Operation) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRUCT, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:message: ", p), err) }
  if err := p.Message.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:message: ", p), err) }
  return err
}

func (p *Operation) Equals(other *Operation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Revision != other.Revision { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.Type != other.Type { return false }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.Checksum != other.Checksum { return false }
  if p.Status != other.Status { return false }
  if p.Param1 != other.Param1 { return false }
  if p.Param2 != other.Param2 { return false }
  if p.Param3 != other.Param3 { return false }
  if !p.Message.Equals(other.Message) { return false }
  return true
}

func (p *Operation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Operation(%+v)", *p)
}

// Attributes:
//  - Online
//  - ChatMid
//  - HostMid
//  - MemberMids
//  - Started
//  - MediaType
//  - Protocol
type GroupCall struct {
  Online bool `thrift:"online,1" db:"online" json:"online"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  HostMid string `thrift:"hostMid,3" db:"hostMid" json:"hostMid"`
  MemberMids []string `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
  Started int64 `thrift:"started,5" db:"started" json:"started"`
  MediaType MediaType `thrift:"mediaType,6" db:"mediaType" json:"mediaType"`
  Protocol ProtoCall `thrift:"protocol,7" db:"protocol" json:"protocol"`
}

func NewGroupCall() *GroupCall {
  return &GroupCall{}
}


func (p *GroupCall) GetOnline() bool {
  return p.Online
}

func (p *GroupCall) GetChatMid() string {
  return p.ChatMid
}

func (p *GroupCall) GetHostMid() string {
  return p.HostMid
}

func (p *GroupCall) GetMemberMids() []string {
  return p.MemberMids
}

func (p *GroupCall) GetStarted() int64 {
  return p.Started
}

func (p *GroupCall) GetMediaType() MediaType {
  return p.MediaType
}

func (p *GroupCall) GetProtocol() ProtoCall {
  return p.Protocol
}
func (p *GroupCall) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupCall)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Online = v
}
  return nil
}

func (p *GroupCall)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *GroupCall)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HostMid = v
}
  return nil
}

func (p *GroupCall)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem82 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem82 = v
}
    p.MemberMids = append(p.MemberMids, _elem82)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupCall)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Started = v
}
  return nil
}

func (p *GroupCall)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := MediaType(v)
  p.MediaType = temp
}
  return nil
}

func (p *GroupCall)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := ProtoCall(v)
  p.Protocol = temp
}
  return nil
}

func (p *GroupCall) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GroupCall"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupCall) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "online", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:online: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Online)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.online (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:online: ", p), err) }
  return err
}

func (p *GroupCall) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *GroupCall) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HostMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostMid: ", p), err) }
  return err
}

func (p *GroupCall) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err) }
  return err
}

func (p *GroupCall) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "started", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:started: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Started)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.started (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:started: ", p), err) }
  return err
}

func (p *GroupCall) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mediaType", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mediaType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mediaType: ", p), err) }
  return err
}

func (p *GroupCall) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "protocol", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:protocol: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Protocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:protocol: ", p), err) }
  return err
}

func (p *GroupCall) Equals(other *GroupCall) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Online != other.Online { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.HostMid != other.HostMid { return false }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for i, _tgt := range p.MemberMids {
    _src83 := other.MemberMids[i]
    if _tgt != _src83 { return false }
  }
  if p.Started != other.Started { return false }
  if p.MediaType != other.MediaType { return false }
  if p.Protocol != other.Protocol { return false }
  return true
}

func (p *GroupCall) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupCall(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type CancelChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewCancelChatInvitationRequest() *CancelChatInvitationRequest {
  return &CancelChatInvitationRequest{}
}


func (p *CancelChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *CancelChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *CancelChatInvitationRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *CancelChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem84 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem84 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem84)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *CancelChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CancelChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) Equals(other *CancelChatInvitationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src85 := other.TargetUserMids[i]
    if _tgt != _src85 { return false }
  }
  return true
}

func (p *CancelChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - NotificationEnable
//  - NotificationMuteExpiration
//  - NotificationNewMessage
//  - NotificationGroupInvitation
//  - NotificationShowMessage
//  - NotificationIncomingCall
//  - NotificationSoundMessage
//  - NotificationSoundGroup
//  - NotificationDisabledWithSub
//  - NotificationPayment
//  - PrivacySyncContacts
//  - PrivacySearchByPhoneNumber
//  - PrivacySearchByUserid
//  - PrivacySearchByEmail
//  - PrivacyAllowSecondaryDeviceLogi
//  - PrivacyProfileImagePostToMyhome
//  - PrivacyReceiveMessagesFromNotFriend
//  - PrivacyAgreeUseLineCoinToPaidCall
//  - PrivacyAgreeUsePaidCall
//  - PrivacyAllowFriendRequest
//  - ContactMyTicket
//  - IdentityProvider
//  - IdentityIdentifier
//  - SnsAccounts
//  - PhoneRegistration
//  - EmailConfirmationStatus
//  - AccountMigrationPincodeType
//  - EnforcedInputAccountMigrationPincode
//  - SecurityCenterSettingsType
//  - AllowUnregistrationSecondaryDevice
//  - PreferenceLocale
//  - CustomModes
//  - E2eeEnable
//  - HitokotoBackupRequested
//  - PrivacyProfileMusicPostToMyhome
//  - PrivacyAllowNearby
//  - AgreementNearbyTime
//  - AgreementSquareTime
//  - NotificationMention
//  - BotUseAgreementAcceptedAt
//  - AgreementShakeFunction
//  - AgreementMobileContactName
//  - NotificationThumbnail
//  - AgreementSoundToText
//  - PrivacyPolicyVersion
//  - AgreementAdByWebAccess
//  - AgreementPhoneNumberMatching
//  - AgreementCommunicationInfo
//  - PrivacySharePersonalInfoToFriends
//  - AgreementThingsWirelessCommunication
//  - AgreementGdpr
//  - PrivacyStatusMessageHistory
//  - AgreementProvideLocation
//  - AgreementBeacon
//  - PrivacyAllowProfileHistory
//  - AgreementContentsSuggest
//  - AgreementContentsSuggestDataCollection
//  - PrivacyAgeResult_
//  - PrivacyAgeResultReceived
//  - AgreementOcrImageCollection
//  - PrivacyAllowFollow
//  - PrivacyShowFollowList
//  - NotificationBadgeTalkOnly
type Settings struct {
  // unused fields # 1 to 9
  NotificationEnable bool `thrift:"notificationEnable,10" db:"notificationEnable" json:"notificationEnable"`
  NotificationMuteExpiration int64 `thrift:"notificationMuteExpiration,11" db:"notificationMuteExpiration" json:"notificationMuteExpiration"`
  NotificationNewMessage bool `thrift:"notificationNewMessage,12" db:"notificationNewMessage" json:"notificationNewMessage"`
  NotificationGroupInvitation bool `thrift:"notificationGroupInvitation,13" db:"notificationGroupInvitation" json:"notificationGroupInvitation"`
  NotificationShowMessage bool `thrift:"notificationShowMessage,14" db:"notificationShowMessage" json:"notificationShowMessage"`
  NotificationIncomingCall bool `thrift:"notificationIncomingCall,15" db:"notificationIncomingCall" json:"notificationIncomingCall"`
  NotificationSoundMessage string `thrift:"notificationSoundMessage,16" db:"notificationSoundMessage" json:"notificationSoundMessage"`
  NotificationSoundGroup string `thrift:"notificationSoundGroup,17" db:"notificationSoundGroup" json:"notificationSoundGroup"`
  NotificationDisabledWithSub bool `thrift:"notificationDisabledWithSub,18" db:"notificationDisabledWithSub" json:"notificationDisabledWithSub"`
  NotificationPayment bool `thrift:"notificationPayment,19" db:"notificationPayment" json:"notificationPayment"`
  PrivacySyncContacts bool `thrift:"privacySyncContacts,20" db:"privacySyncContacts" json:"privacySyncContacts"`
  PrivacySearchByPhoneNumber bool `thrift:"privacySearchByPhoneNumber,21" db:"privacySearchByPhoneNumber" json:"privacySearchByPhoneNumber"`
  PrivacySearchByUserid bool `thrift:"privacySearchByUserid,22" db:"privacySearchByUserid" json:"privacySearchByUserid"`
  PrivacySearchByEmail bool `thrift:"privacySearchByEmail,23" db:"privacySearchByEmail" json:"privacySearchByEmail"`
  PrivacyAllowSecondaryDeviceLogi bool `thrift:"privacyAllowSecondaryDeviceLogi,24" db:"privacyAllowSecondaryDeviceLogi" json:"privacyAllowSecondaryDeviceLogi"`
  PrivacyProfileImagePostToMyhome bool `thrift:"privacyProfileImagePostToMyhome,25" db:"privacyProfileImagePostToMyhome" json:"privacyProfileImagePostToMyhome"`
  PrivacyReceiveMessagesFromNotFriend bool `thrift:"privacyReceiveMessagesFromNotFriend,26" db:"privacyReceiveMessagesFromNotFriend" json:"privacyReceiveMessagesFromNotFriend"`
  PrivacyAgreeUseLineCoinToPaidCall bool `thrift:"privacyAgreeUseLineCoinToPaidCall,27" db:"privacyAgreeUseLineCoinToPaidCall" json:"privacyAgreeUseLineCoinToPaidCall"`
  PrivacyAgreeUsePaidCall bool `thrift:"privacyAgreeUsePaidCall,28" db:"privacyAgreeUsePaidCall" json:"privacyAgreeUsePaidCall"`
  PrivacyAllowFriendRequest bool `thrift:"privacyAllowFriendRequest,29" db:"privacyAllowFriendRequest" json:"privacyAllowFriendRequest"`
  ContactMyTicket string `thrift:"contactMyTicket,30" db:"contactMyTicket" json:"contactMyTicket"`
  // unused fields # 31 to 39
  IdentityProvider IdentityProvider `thrift:"identityProvider,40" db:"identityProvider" json:"identityProvider"`
  IdentityIdentifier string `thrift:"identityIdentifier,41" db:"identityIdentifier" json:"identityIdentifier"`
  SnsAccounts map[SnsType]string `thrift:"snsAccounts,42" db:"snsAccounts" json:"snsAccounts"`
  PhoneRegistration bool `thrift:"phoneRegistration,43" db:"phoneRegistration" json:"phoneRegistration"`
  EmailConfirmationStatus EmailConfirmationStatus `thrift:"emailConfirmationStatus,44" db:"emailConfirmationStatus" json:"emailConfirmationStatus"`
  AccountMigrationPincodeType AccountMigrationPincodeType `thrift:"accountMigrationPincodeType,45" db:"accountMigrationPincodeType" json:"accountMigrationPincodeType"`
  EnforcedInputAccountMigrationPincode bool `thrift:"enforcedInputAccountMigrationPincode,46" db:"enforcedInputAccountMigrationPincode" json:"enforcedInputAccountMigrationPincode"`
  SecurityCenterSettingsType SecurityCenterSettingsType `thrift:"securityCenterSettingsType,47" db:"securityCenterSettingsType" json:"securityCenterSettingsType"`
  AllowUnregistrationSecondaryDevice bool `thrift:"allowUnregistrationSecondaryDevice,48" db:"allowUnregistrationSecondaryDevice" json:"allowUnregistrationSecondaryDevice"`
  // unused field # 49
  PreferenceLocale string `thrift:"preferenceLocale,50" db:"preferenceLocale" json:"preferenceLocale"`
  // unused fields # 51 to 59
  CustomModes map[CustomMode]string `thrift:"customModes,60" db:"customModes" json:"customModes"`
  E2eeEnable bool `thrift:"e2eeEnable,61" db:"e2eeEnable" json:"e2eeEnable"`
  HitokotoBackupRequested bool `thrift:"hitokotoBackupRequested,62" db:"hitokotoBackupRequested" json:"hitokotoBackupRequested"`
  PrivacyProfileMusicPostToMyhome bool `thrift:"privacyProfileMusicPostToMyhome,63" db:"privacyProfileMusicPostToMyhome" json:"privacyProfileMusicPostToMyhome"`
  // unused field # 64
  PrivacyAllowNearby bool `thrift:"privacyAllowNearby,65" db:"privacyAllowNearby" json:"privacyAllowNearby"`
  AgreementNearbyTime int64 `thrift:"agreementNearbyTime,66" db:"agreementNearbyTime" json:"agreementNearbyTime"`
  AgreementSquareTime int64 `thrift:"agreementSquareTime,67" db:"agreementSquareTime" json:"agreementSquareTime"`
  NotificationMention bool `thrift:"notificationMention,68" db:"notificationMention" json:"notificationMention"`
  BotUseAgreementAcceptedAt int64 `thrift:"botUseAgreementAcceptedAt,69" db:"botUseAgreementAcceptedAt" json:"botUseAgreementAcceptedAt"`
  AgreementShakeFunction int64 `thrift:"agreementShakeFunction,70" db:"agreementShakeFunction" json:"agreementShakeFunction"`
  AgreementMobileContactName int64 `thrift:"agreementMobileContactName,71" db:"agreementMobileContactName" json:"agreementMobileContactName"`
  NotificationThumbnail bool `thrift:"notificationThumbnail,72" db:"notificationThumbnail" json:"notificationThumbnail"`
  AgreementSoundToText int64 `thrift:"agreementSoundToText,73" db:"agreementSoundToText" json:"agreementSoundToText"`
  PrivacyPolicyVersion string `thrift:"privacyPolicyVersion,74" db:"privacyPolicyVersion" json:"privacyPolicyVersion"`
  AgreementAdByWebAccess int64 `thrift:"agreementAdByWebAccess,75" db:"agreementAdByWebAccess" json:"agreementAdByWebAccess"`
  AgreementPhoneNumberMatching int64 `thrift:"agreementPhoneNumberMatching,76" db:"agreementPhoneNumberMatching" json:"agreementPhoneNumberMatching"`
  AgreementCommunicationInfo int64 `thrift:"agreementCommunicationInfo,77" db:"agreementCommunicationInfo" json:"agreementCommunicationInfo"`
  PrivacySharePersonalInfoToFriends bool `thrift:"privacySharePersonalInfoToFriends,78" db:"privacySharePersonalInfoToFriends" json:"privacySharePersonalInfoToFriends"`
  AgreementThingsWirelessCommunication int64 `thrift:"agreementThingsWirelessCommunication,79" db:"agreementThingsWirelessCommunication" json:"agreementThingsWirelessCommunication"`
  AgreementGdpr int64 `thrift:"agreementGdpr,80" db:"agreementGdpr" json:"agreementGdpr"`
  PrivacyStatusMessageHistory bool `thrift:"privacyStatusMessageHistory,81" db:"privacyStatusMessageHistory" json:"privacyStatusMessageHistory"`
  AgreementProvideLocation int64 `thrift:"agreementProvideLocation,82" db:"agreementProvideLocation" json:"agreementProvideLocation"`
  AgreementBeacon int64 `thrift:"agreementBeacon,83" db:"agreementBeacon" json:"agreementBeacon"`
  // unused field # 84
  PrivacyAllowProfileHistory bool `thrift:"privacyAllowProfileHistory,85" db:"privacyAllowProfileHistory" json:"privacyAllowProfileHistory"`
  AgreementContentsSuggest int64 `thrift:"agreementContentsSuggest,86" db:"agreementContentsSuggest" json:"agreementContentsSuggest"`
  AgreementContentsSuggestDataCollection int64 `thrift:"agreementContentsSuggestDataCollection,87" db:"agreementContentsSuggestDataCollection" json:"agreementContentsSuggestDataCollection"`
  PrivacyAgeResult_ bool `thrift:"privacyAgeResult,88" db:"privacyAgeResult" json:"privacyAgeResult"`
  PrivacyAgeResultReceived bool `thrift:"privacyAgeResultReceived,89" db:"privacyAgeResultReceived" json:"privacyAgeResultReceived"`
  AgreementOcrImageCollection int64 `thrift:"agreementOcrImageCollection,90" db:"agreementOcrImageCollection" json:"agreementOcrImageCollection"`
  PrivacyAllowFollow bool `thrift:"privacyAllowFollow,91" db:"privacyAllowFollow" json:"privacyAllowFollow"`
  PrivacyShowFollowList bool `thrift:"privacyShowFollowList,92" db:"privacyShowFollowList" json:"privacyShowFollowList"`
  NotificationBadgeTalkOnly bool `thrift:"notificationBadgeTalkOnly,93" db:"notificationBadgeTalkOnly" json:"notificationBadgeTalkOnly"`
}

func NewSettings() *Settings {
  return &Settings{}
}


func (p *Settings) GetNotificationEnable() bool {
  return p.NotificationEnable
}

func (p *Settings) GetNotificationMuteExpiration() int64 {
  return p.NotificationMuteExpiration
}

func (p *Settings) GetNotificationNewMessage() bool {
  return p.NotificationNewMessage
}

func (p *Settings) GetNotificationGroupInvitation() bool {
  return p.NotificationGroupInvitation
}

func (p *Settings) GetNotificationShowMessage() bool {
  return p.NotificationShowMessage
}

func (p *Settings) GetNotificationIncomingCall() bool {
  return p.NotificationIncomingCall
}

func (p *Settings) GetNotificationSoundMessage() string {
  return p.NotificationSoundMessage
}

func (p *Settings) GetNotificationSoundGroup() string {
  return p.NotificationSoundGroup
}

func (p *Settings) GetNotificationDisabledWithSub() bool {
  return p.NotificationDisabledWithSub
}

func (p *Settings) GetNotificationPayment() bool {
  return p.NotificationPayment
}

func (p *Settings) GetPrivacySyncContacts() bool {
  return p.PrivacySyncContacts
}

func (p *Settings) GetPrivacySearchByPhoneNumber() bool {
  return p.PrivacySearchByPhoneNumber
}

func (p *Settings) GetPrivacySearchByUserid() bool {
  return p.PrivacySearchByUserid
}

func (p *Settings) GetPrivacySearchByEmail() bool {
  return p.PrivacySearchByEmail
}

func (p *Settings) GetPrivacyAllowSecondaryDeviceLogi() bool {
  return p.PrivacyAllowSecondaryDeviceLogi
}

func (p *Settings) GetPrivacyProfileImagePostToMyhome() bool {
  return p.PrivacyProfileImagePostToMyhome
}

func (p *Settings) GetPrivacyReceiveMessagesFromNotFriend() bool {
  return p.PrivacyReceiveMessagesFromNotFriend
}

func (p *Settings) GetPrivacyAgreeUseLineCoinToPaidCall() bool {
  return p.PrivacyAgreeUseLineCoinToPaidCall
}

func (p *Settings) GetPrivacyAgreeUsePaidCall() bool {
  return p.PrivacyAgreeUsePaidCall
}

func (p *Settings) GetPrivacyAllowFriendRequest() bool {
  return p.PrivacyAllowFriendRequest
}

func (p *Settings) GetContactMyTicket() string {
  return p.ContactMyTicket
}

func (p *Settings) GetIdentityProvider() IdentityProvider {
  return p.IdentityProvider
}

func (p *Settings) GetIdentityIdentifier() string {
  return p.IdentityIdentifier
}

func (p *Settings) GetSnsAccounts() map[SnsType]string {
  return p.SnsAccounts
}

func (p *Settings) GetPhoneRegistration() bool {
  return p.PhoneRegistration
}

func (p *Settings) GetEmailConfirmationStatus() EmailConfirmationStatus {
  return p.EmailConfirmationStatus
}

func (p *Settings) GetAccountMigrationPincodeType() AccountMigrationPincodeType {
  return p.AccountMigrationPincodeType
}

func (p *Settings) GetEnforcedInputAccountMigrationPincode() bool {
  return p.EnforcedInputAccountMigrationPincode
}

func (p *Settings) GetSecurityCenterSettingsType() SecurityCenterSettingsType {
  return p.SecurityCenterSettingsType
}

func (p *Settings) GetAllowUnregistrationSecondaryDevice() bool {
  return p.AllowUnregistrationSecondaryDevice
}

func (p *Settings) GetPreferenceLocale() string {
  return p.PreferenceLocale
}

func (p *Settings) GetCustomModes() map[CustomMode]string {
  return p.CustomModes
}

func (p *Settings) GetE2eeEnable() bool {
  return p.E2eeEnable
}

func (p *Settings) GetHitokotoBackupRequested() bool {
  return p.HitokotoBackupRequested
}

func (p *Settings) GetPrivacyProfileMusicPostToMyhome() bool {
  return p.PrivacyProfileMusicPostToMyhome
}

func (p *Settings) GetPrivacyAllowNearby() bool {
  return p.PrivacyAllowNearby
}

func (p *Settings) GetAgreementNearbyTime() int64 {
  return p.AgreementNearbyTime
}

func (p *Settings) GetAgreementSquareTime() int64 {
  return p.AgreementSquareTime
}

func (p *Settings) GetNotificationMention() bool {
  return p.NotificationMention
}

func (p *Settings) GetBotUseAgreementAcceptedAt() int64 {
  return p.BotUseAgreementAcceptedAt
}

func (p *Settings) GetAgreementShakeFunction() int64 {
  return p.AgreementShakeFunction
}

func (p *Settings) GetAgreementMobileContactName() int64 {
  return p.AgreementMobileContactName
}

func (p *Settings) GetNotificationThumbnail() bool {
  return p.NotificationThumbnail
}

func (p *Settings) GetAgreementSoundToText() int64 {
  return p.AgreementSoundToText
}

func (p *Settings) GetPrivacyPolicyVersion() string {
  return p.PrivacyPolicyVersion
}

func (p *Settings) GetAgreementAdByWebAccess() int64 {
  return p.AgreementAdByWebAccess
}

func (p *Settings) GetAgreementPhoneNumberMatching() int64 {
  return p.AgreementPhoneNumberMatching
}

func (p *Settings) GetAgreementCommunicationInfo() int64 {
  return p.AgreementCommunicationInfo
}

func (p *Settings) GetPrivacySharePersonalInfoToFriends() bool {
  return p.PrivacySharePersonalInfoToFriends
}

func (p *Settings) GetAgreementThingsWirelessCommunication() int64 {
  return p.AgreementThingsWirelessCommunication
}

func (p *Settings) GetAgreementGdpr() int64 {
  return p.AgreementGdpr
}

func (p *Settings) GetPrivacyStatusMessageHistory() bool {
  return p.PrivacyStatusMessageHistory
}

func (p *Settings) GetAgreementProvideLocation() int64 {
  return p.AgreementProvideLocation
}

func (p *Settings) GetAgreementBeacon() int64 {
  return p.AgreementBeacon
}

func (p *Settings) GetPrivacyAllowProfileHistory() bool {
  return p.PrivacyAllowProfileHistory
}

func (p *Settings) GetAgreementContentsSuggest() int64 {
  return p.AgreementContentsSuggest
}

func (p *Settings) GetAgreementContentsSuggestDataCollection() int64 {
  return p.AgreementContentsSuggestDataCollection
}

func (p *Settings) GetPrivacyAgeResult_() bool {
  return p.PrivacyAgeResult_
}

func (p *Settings) GetPrivacyAgeResultReceived() bool {
  return p.PrivacyAgeResultReceived
}

func (p *Settings) GetAgreementOcrImageCollection() int64 {
  return p.AgreementOcrImageCollection
}

func (p *Settings) GetPrivacyAllowFollow() bool {
  return p.PrivacyAllowFollow
}

func (p *Settings) GetPrivacyShowFollowList() bool {
  return p.PrivacyShowFollowList
}

func (p *Settings) GetNotificationBadgeTalkOnly() bool {
  return p.NotificationBadgeTalkOnly
}
func (p *Settings) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField45(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField46(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField47(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 48:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField48(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField50(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 60:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField60(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField61(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 62:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField62(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 63:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField63(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 65:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField65(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 66:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField66(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 67:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField67(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 68:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField68(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 69:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField69(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 70:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField70(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 71:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField71(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 72:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField72(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 73:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField73(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 74:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField74(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 75:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField75(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 76:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField76(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 77:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField77(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 78:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField78(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 79:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField79(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 80:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField80(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 81:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField81(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 82:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField82(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 83:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField83(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 85:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField85(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 86:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField86(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 87:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField87(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 88:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField88(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 89:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField89(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 90:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField90(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField91(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 92:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField92(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 93:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField93(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Settings)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NotificationEnable = v
}
  return nil
}

func (p *Settings)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.NotificationMuteExpiration = v
}
  return nil
}

func (p *Settings)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.NotificationNewMessage = v
}
  return nil
}

func (p *Settings)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NotificationGroupInvitation = v
}
  return nil
}

func (p *Settings)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.NotificationShowMessage = v
}
  return nil
}

func (p *Settings)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.NotificationIncomingCall = v
}
  return nil
}

func (p *Settings)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NotificationSoundMessage = v
}
  return nil
}

func (p *Settings)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.NotificationSoundGroup = v
}
  return nil
}

func (p *Settings)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.NotificationDisabledWithSub = v
}
  return nil
}

func (p *Settings)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.NotificationPayment = v
}
  return nil
}

func (p *Settings)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.PrivacySyncContacts = v
}
  return nil
}

func (p *Settings)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PrivacySearchByPhoneNumber = v
}
  return nil
}

func (p *Settings)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PrivacySearchByUserid = v
}
  return nil
}

func (p *Settings)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PrivacySearchByEmail = v
}
  return nil
}

func (p *Settings)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PrivacyAllowSecondaryDeviceLogi = v
}
  return nil
}

func (p *Settings)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.PrivacyProfileImagePostToMyhome = v
}
  return nil
}

func (p *Settings)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.PrivacyReceiveMessagesFromNotFriend = v
}
  return nil
}

func (p *Settings)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.PrivacyAgreeUseLineCoinToPaidCall = v
}
  return nil
}

func (p *Settings)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.PrivacyAgreeUsePaidCall = v
}
  return nil
}

func (p *Settings)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.PrivacyAllowFriendRequest = v
}
  return nil
}

func (p *Settings)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ContactMyTicket = v
}
  return nil
}

func (p *Settings)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  temp := IdentityProvider(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *Settings)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.IdentityIdentifier = v
}
  return nil
}

func (p *Settings)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[SnsType]string, size)
  p.SnsAccounts =  tMap
  for i := 0; i < size; i ++ {
var _key86 SnsType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SnsType(v)
    _key86 = temp
}
var _val87 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val87 = v
}
    p.SnsAccounts[_key86] = _val87
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Settings)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.PhoneRegistration = v
}
  return nil
}

func (p *Settings)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  temp := EmailConfirmationStatus(v)
  p.EmailConfirmationStatus = temp
}
  return nil
}

func (p *Settings)  ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  temp := AccountMigrationPincodeType(v)
  p.AccountMigrationPincodeType = temp
}
  return nil
}

func (p *Settings)  ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.EnforcedInputAccountMigrationPincode = v
}
  return nil
}

func (p *Settings)  ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  temp := SecurityCenterSettingsType(v)
  p.SecurityCenterSettingsType = temp
}
  return nil
}

func (p *Settings)  ReadField48(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 48: ", err)
} else {
  p.AllowUnregistrationSecondaryDevice = v
}
  return nil
}

func (p *Settings)  ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.PreferenceLocale = v
}
  return nil
}

func (p *Settings)  ReadField60(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[CustomMode]string, size)
  p.CustomModes =  tMap
  for i := 0; i < size; i ++ {
var _key88 CustomMode
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := CustomMode(v)
    _key88 = temp
}
var _val89 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val89 = v
}
    p.CustomModes[_key88] = _val89
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Settings)  ReadField61(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.E2eeEnable = v
}
  return nil
}

func (p *Settings)  ReadField62(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 62: ", err)
} else {
  p.HitokotoBackupRequested = v
}
  return nil
}

func (p *Settings)  ReadField63(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 63: ", err)
} else {
  p.PrivacyProfileMusicPostToMyhome = v
}
  return nil
}

func (p *Settings)  ReadField65(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 65: ", err)
} else {
  p.PrivacyAllowNearby = v
}
  return nil
}

func (p *Settings)  ReadField66(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 66: ", err)
} else {
  p.AgreementNearbyTime = v
}
  return nil
}

func (p *Settings)  ReadField67(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 67: ", err)
} else {
  p.AgreementSquareTime = v
}
  return nil
}

func (p *Settings)  ReadField68(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 68: ", err)
} else {
  p.NotificationMention = v
}
  return nil
}

func (p *Settings)  ReadField69(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 69: ", err)
} else {
  p.BotUseAgreementAcceptedAt = v
}
  return nil
}

func (p *Settings)  ReadField70(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 70: ", err)
} else {
  p.AgreementShakeFunction = v
}
  return nil
}

func (p *Settings)  ReadField71(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 71: ", err)
} else {
  p.AgreementMobileContactName = v
}
  return nil
}

func (p *Settings)  ReadField72(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 72: ", err)
} else {
  p.NotificationThumbnail = v
}
  return nil
}

func (p *Settings)  ReadField73(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 73: ", err)
} else {
  p.AgreementSoundToText = v
}
  return nil
}

func (p *Settings)  ReadField74(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 74: ", err)
} else {
  p.PrivacyPolicyVersion = v
}
  return nil
}

func (p *Settings)  ReadField75(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 75: ", err)
} else {
  p.AgreementAdByWebAccess = v
}
  return nil
}

func (p *Settings)  ReadField76(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 76: ", err)
} else {
  p.AgreementPhoneNumberMatching = v
}
  return nil
}

func (p *Settings)  ReadField77(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 77: ", err)
} else {
  p.AgreementCommunicationInfo = v
}
  return nil
}

func (p *Settings)  ReadField78(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 78: ", err)
} else {
  p.PrivacySharePersonalInfoToFriends = v
}
  return nil
}

func (p *Settings)  ReadField79(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 79: ", err)
} else {
  p.AgreementThingsWirelessCommunication = v
}
  return nil
}

func (p *Settings)  ReadField80(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 80: ", err)
} else {
  p.AgreementGdpr = v
}
  return nil
}

func (p *Settings)  ReadField81(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 81: ", err)
} else {
  p.PrivacyStatusMessageHistory = v
}
  return nil
}

func (p *Settings)  ReadField82(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 82: ", err)
} else {
  p.AgreementProvideLocation = v
}
  return nil
}

func (p *Settings)  ReadField83(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 83: ", err)
} else {
  p.AgreementBeacon = v
}
  return nil
}

func (p *Settings)  ReadField85(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 85: ", err)
} else {
  p.PrivacyAllowProfileHistory = v
}
  return nil
}

func (p *Settings)  ReadField86(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 86: ", err)
} else {
  p.AgreementContentsSuggest = v
}
  return nil
}

func (p *Settings)  ReadField87(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 87: ", err)
} else {
  p.AgreementContentsSuggestDataCollection = v
}
  return nil
}

func (p *Settings)  ReadField88(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 88: ", err)
} else {
  p.PrivacyAgeResult_ = v
}
  return nil
}

func (p *Settings)  ReadField89(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 89: ", err)
} else {
  p.PrivacyAgeResultReceived = v
}
  return nil
}

func (p *Settings)  ReadField90(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 90: ", err)
} else {
  p.AgreementOcrImageCollection = v
}
  return nil
}

func (p *Settings)  ReadField91(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 91: ", err)
} else {
  p.PrivacyAllowFollow = v
}
  return nil
}

func (p *Settings)  ReadField92(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 92: ", err)
} else {
  p.PrivacyShowFollowList = v
}
  return nil
}

func (p *Settings)  ReadField93(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 93: ", err)
} else {
  p.NotificationBadgeTalkOnly = v
}
  return nil
}

func (p *Settings) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Settings"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
    if err := p.writeField45(ctx, oprot); err != nil { return err }
    if err := p.writeField46(ctx, oprot); err != nil { return err }
    if err := p.writeField47(ctx, oprot); err != nil { return err }
    if err := p.writeField48(ctx, oprot); err != nil { return err }
    if err := p.writeField50(ctx, oprot); err != nil { return err }
    if err := p.writeField60(ctx, oprot); err != nil { return err }
    if err := p.writeField61(ctx, oprot); err != nil { return err }
    if err := p.writeField62(ctx, oprot); err != nil { return err }
    if err := p.writeField63(ctx, oprot); err != nil { return err }
    if err := p.writeField65(ctx, oprot); err != nil { return err }
    if err := p.writeField66(ctx, oprot); err != nil { return err }
    if err := p.writeField67(ctx, oprot); err != nil { return err }
    if err := p.writeField68(ctx, oprot); err != nil { return err }
    if err := p.writeField69(ctx, oprot); err != nil { return err }
    if err := p.writeField70(ctx, oprot); err != nil { return err }
    if err := p.writeField71(ctx, oprot); err != nil { return err }
    if err := p.writeField72(ctx, oprot); err != nil { return err }
    if err := p.writeField73(ctx, oprot); err != nil { return err }
    if err := p.writeField74(ctx, oprot); err != nil { return err }
    if err := p.writeField75(ctx, oprot); err != nil { return err }
    if err := p.writeField76(ctx, oprot); err != nil { return err }
    if err := p.writeField77(ctx, oprot); err != nil { return err }
    if err := p.writeField78(ctx, oprot); err != nil { return err }
    if err := p.writeField79(ctx, oprot); err != nil { return err }
    if err := p.writeField80(ctx, oprot); err != nil { return err }
    if err := p.writeField81(ctx, oprot); err != nil { return err }
    if err := p.writeField82(ctx, oprot); err != nil { return err }
    if err := p.writeField83(ctx, oprot); err != nil { return err }
    if err := p.writeField85(ctx, oprot); err != nil { return err }
    if err := p.writeField86(ctx, oprot); err != nil { return err }
    if err := p.writeField87(ctx, oprot); err != nil { return err }
    if err := p.writeField88(ctx, oprot); err != nil { return err }
    if err := p.writeField89(ctx, oprot); err != nil { return err }
    if err := p.writeField90(ctx, oprot); err != nil { return err }
    if err := p.writeField91(ctx, oprot); err != nil { return err }
    if err := p.writeField92(ctx, oprot); err != nil { return err }
    if err := p.writeField93(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Settings) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationEnable", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:notificationEnable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationEnable (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:notificationEnable: ", p), err) }
  return err
}

func (p *Settings) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationMuteExpiration", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notificationMuteExpiration: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NotificationMuteExpiration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMuteExpiration (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notificationMuteExpiration: ", p), err) }
  return err
}

func (p *Settings) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationNewMessage", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:notificationNewMessage: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationNewMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationNewMessage (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:notificationNewMessage: ", p), err) }
  return err
}

func (p *Settings) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationGroupInvitation", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:notificationGroupInvitation: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationGroupInvitation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationGroupInvitation (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:notificationGroupInvitation: ", p), err) }
  return err
}

func (p *Settings) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationShowMessage", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:notificationShowMessage: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationShowMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationShowMessage (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:notificationShowMessage: ", p), err) }
  return err
}

func (p *Settings) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationIncomingCall", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:notificationIncomingCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationIncomingCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationIncomingCall (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:notificationIncomingCall: ", p), err) }
  return err
}

func (p *Settings) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationSoundMessage", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:notificationSoundMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NotificationSoundMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundMessage (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:notificationSoundMessage: ", p), err) }
  return err
}

func (p *Settings) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationSoundGroup", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:notificationSoundGroup: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NotificationSoundGroup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundGroup (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:notificationSoundGroup: ", p), err) }
  return err
}

func (p *Settings) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabledWithSub", thrift.BOOL, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:notificationDisabledWithSub: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabledWithSub)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabledWithSub (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:notificationDisabledWithSub: ", p), err) }
  return err
}

func (p *Settings) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationPayment", thrift.BOOL, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:notificationPayment: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationPayment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationPayment (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:notificationPayment: ", p), err) }
  return err
}

func (p *Settings) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySyncContacts", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:privacySyncContacts: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySyncContacts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySyncContacts (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:privacySyncContacts: ", p), err) }
  return err
}

func (p *Settings) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySearchByPhoneNumber", thrift.BOOL, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:privacySearchByPhoneNumber: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySearchByPhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByPhoneNumber (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:privacySearchByPhoneNumber: ", p), err) }
  return err
}

func (p *Settings) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySearchByUserid", thrift.BOOL, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:privacySearchByUserid: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByUserid (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:privacySearchByUserid: ", p), err) }
  return err
}

func (p *Settings) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySearchByEmail", thrift.BOOL, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:privacySearchByEmail: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByEmail (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:privacySearchByEmail: ", p), err) }
  return err
}

func (p *Settings) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowSecondaryDeviceLogi", thrift.BOOL, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:privacyAllowSecondaryDeviceLogi: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowSecondaryDeviceLogi)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowSecondaryDeviceLogi (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:privacyAllowSecondaryDeviceLogi: ", p), err) }
  return err
}

func (p *Settings) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyProfileImagePostToMyhome", thrift.BOOL, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:privacyProfileImagePostToMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyProfileImagePostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileImagePostToMyhome (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:privacyProfileImagePostToMyhome: ", p), err) }
  return err
}

func (p *Settings) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyReceiveMessagesFromNotFriend", thrift.BOOL, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyReceiveMessagesFromNotFriend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyReceiveMessagesFromNotFriend (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  return err
}

func (p *Settings) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgreeUseLineCoinToPaidCall", thrift.BOOL, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgreeUseLineCoinToPaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUseLineCoinToPaidCall (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  return err
}

func (p *Settings) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgreeUsePaidCall", thrift.BOOL, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:privacyAgreeUsePaidCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgreeUsePaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUsePaidCall (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:privacyAgreeUsePaidCall: ", p), err) }
  return err
}

func (p *Settings) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowFriendRequest", thrift.BOOL, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:privacyAllowFriendRequest: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowFriendRequest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFriendRequest (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:privacyAllowFriendRequest: ", p), err) }
  return err
}

func (p *Settings) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactMyTicket", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:contactMyTicket: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ContactMyTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactMyTicket (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:contactMyTicket: ", p), err) }
  return err
}

func (p *Settings) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityProvider", thrift.I32, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identityProvider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identityProvider: ", p), err) }
  return err
}

func (p *Settings) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityIdentifier", thrift.STRING, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:identityIdentifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IdentityIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityIdentifier (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:identityIdentifier: ", p), err) }
  return err
}

func (p *Settings) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsAccounts", thrift.MAP, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:snsAccounts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRING, len(p.SnsAccounts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SnsAccounts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:snsAccounts: ", p), err) }
  return err
}

func (p *Settings) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneRegistration", thrift.BOOL, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:phoneRegistration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PhoneRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneRegistration (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:phoneRegistration: ", p), err) }
  return err
}

func (p *Settings) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "emailConfirmationStatus", thrift.I32, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:emailConfirmationStatus: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EmailConfirmationStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.emailConfirmationStatus (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:emailConfirmationStatus: ", p), err) }
  return err
}

func (p *Settings) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationPincodeType", thrift.I32, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:accountMigrationPincodeType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccountMigrationPincodeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincodeType (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:accountMigrationPincodeType: ", p), err) }
  return err
}

func (p *Settings) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enforcedInputAccountMigrationPincode", thrift.BOOL, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnforcedInputAccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enforcedInputAccountMigrationPincode (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  return err
}

func (p *Settings) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "securityCenterSettingsType", thrift.I32, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:securityCenterSettingsType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SecurityCenterSettingsType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityCenterSettingsType (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:securityCenterSettingsType: ", p), err) }
  return err
}

func (p *Settings) writeField48(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowUnregistrationSecondaryDevice", thrift.BOOL, 48); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowUnregistrationSecondaryDevice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowUnregistrationSecondaryDevice (48) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  return err
}

func (p *Settings) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preferenceLocale", thrift.STRING, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:preferenceLocale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PreferenceLocale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preferenceLocale (50) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:preferenceLocale: ", p), err) }
  return err
}

func (p *Settings) writeField60(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customModes", thrift.MAP, 60); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:customModes: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRING, len(p.CustomModes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.CustomModes {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 60:customModes: ", p), err) }
  return err
}

func (p *Settings) writeField61(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "e2eeEnable", thrift.BOOL, 61); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:e2eeEnable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.E2eeEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.e2eeEnable (61) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 61:e2eeEnable: ", p), err) }
  return err
}

func (p *Settings) writeField62(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hitokotoBackupRequested", thrift.BOOL, 62); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:hitokotoBackupRequested: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HitokotoBackupRequested)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hitokotoBackupRequested (62) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 62:hitokotoBackupRequested: ", p), err) }
  return err
}

func (p *Settings) writeField63(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyProfileMusicPostToMyhome", thrift.BOOL, 63); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyProfileMusicPostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileMusicPostToMyhome (63) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  return err
}

func (p *Settings) writeField65(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowNearby", thrift.BOOL, 65); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:privacyAllowNearby: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowNearby)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowNearby (65) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 65:privacyAllowNearby: ", p), err) }
  return err
}

func (p *Settings) writeField66(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementNearbyTime", thrift.I64, 66); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:agreementNearbyTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementNearbyTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementNearbyTime (66) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 66:agreementNearbyTime: ", p), err) }
  return err
}

func (p *Settings) writeField67(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementSquareTime", thrift.I64, 67); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:agreementSquareTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementSquareTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSquareTime (67) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 67:agreementSquareTime: ", p), err) }
  return err
}

func (p *Settings) writeField68(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationMention", thrift.BOOL, 68); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:notificationMention: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationMention)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMention (68) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 68:notificationMention: ", p), err) }
  return err
}

func (p *Settings) writeField69(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "botUseAgreementAcceptedAt", thrift.I64, 69); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 69:botUseAgreementAcceptedAt: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BotUseAgreementAcceptedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botUseAgreementAcceptedAt (69) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 69:botUseAgreementAcceptedAt: ", p), err) }
  return err
}

func (p *Settings) writeField70(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementShakeFunction", thrift.I64, 70); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:agreementShakeFunction: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementShakeFunction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementShakeFunction (70) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 70:agreementShakeFunction: ", p), err) }
  return err
}

func (p *Settings) writeField71(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementMobileContactName", thrift.I64, 71); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:agreementMobileContactName: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementMobileContactName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementMobileContactName (71) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 71:agreementMobileContactName: ", p), err) }
  return err
}

func (p *Settings) writeField72(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationThumbnail", thrift.BOOL, 72); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 72:notificationThumbnail: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationThumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationThumbnail (72) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 72:notificationThumbnail: ", p), err) }
  return err
}

func (p *Settings) writeField73(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementSoundToText", thrift.I64, 73); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 73:agreementSoundToText: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementSoundToText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSoundToText (73) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 73:agreementSoundToText: ", p), err) }
  return err
}

func (p *Settings) writeField74(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyPolicyVersion", thrift.STRING, 74); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 74:privacyPolicyVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrivacyPolicyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyPolicyVersion (74) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 74:privacyPolicyVersion: ", p), err) }
  return err
}

func (p *Settings) writeField75(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementAdByWebAccess", thrift.I64, 75); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 75:agreementAdByWebAccess: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementAdByWebAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementAdByWebAccess (75) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 75:agreementAdByWebAccess: ", p), err) }
  return err
}

func (p *Settings) writeField76(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementPhoneNumberMatching", thrift.I64, 76); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 76:agreementPhoneNumberMatching: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementPhoneNumberMatching)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementPhoneNumberMatching (76) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 76:agreementPhoneNumberMatching: ", p), err) }
  return err
}

func (p *Settings) writeField77(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementCommunicationInfo", thrift.I64, 77); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 77:agreementCommunicationInfo: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementCommunicationInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementCommunicationInfo (77) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 77:agreementCommunicationInfo: ", p), err) }
  return err
}

func (p *Settings) writeField78(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySharePersonalInfoToFriends", thrift.BOOL, 78); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 78:privacySharePersonalInfoToFriends: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySharePersonalInfoToFriends)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySharePersonalInfoToFriends (78) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 78:privacySharePersonalInfoToFriends: ", p), err) }
  return err
}

func (p *Settings) writeField79(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementThingsWirelessCommunication", thrift.I64, 79); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 79:agreementThingsWirelessCommunication: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementThingsWirelessCommunication)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementThingsWirelessCommunication (79) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 79:agreementThingsWirelessCommunication: ", p), err) }
  return err
}

func (p *Settings) writeField80(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementGdpr", thrift.I64, 80); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:agreementGdpr: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementGdpr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementGdpr (80) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 80:agreementGdpr: ", p), err) }
  return err
}

func (p *Settings) writeField81(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyStatusMessageHistory", thrift.BOOL, 81); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:privacyStatusMessageHistory: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyStatusMessageHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyStatusMessageHistory (81) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 81:privacyStatusMessageHistory: ", p), err) }
  return err
}

func (p *Settings) writeField82(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementProvideLocation", thrift.I64, 82); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 82:agreementProvideLocation: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementProvideLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementProvideLocation (82) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 82:agreementProvideLocation: ", p), err) }
  return err
}

func (p *Settings) writeField83(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementBeacon", thrift.I64, 83); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 83:agreementBeacon: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementBeacon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementBeacon (83) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 83:agreementBeacon: ", p), err) }
  return err
}

func (p *Settings) writeField85(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowProfileHistory", thrift.BOOL, 85); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 85:privacyAllowProfileHistory: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowProfileHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowProfileHistory (85) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 85:privacyAllowProfileHistory: ", p), err) }
  return err
}

func (p *Settings) writeField86(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementContentsSuggest", thrift.I64, 86); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 86:agreementContentsSuggest: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementContentsSuggest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggest (86) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 86:agreementContentsSuggest: ", p), err) }
  return err
}

func (p *Settings) writeField87(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementContentsSuggestDataCollection", thrift.I64, 87); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 87:agreementContentsSuggestDataCollection: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementContentsSuggestDataCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggestDataCollection (87) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 87:agreementContentsSuggestDataCollection: ", p), err) }
  return err
}

func (p *Settings) writeField88(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgeResult", thrift.BOOL, 88); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 88:privacyAgeResult: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgeResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResult (88) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 88:privacyAgeResult: ", p), err) }
  return err
}

func (p *Settings) writeField89(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgeResultReceived", thrift.BOOL, 89); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 89:privacyAgeResultReceived: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgeResultReceived)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResultReceived (89) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 89:privacyAgeResultReceived: ", p), err) }
  return err
}

func (p *Settings) writeField90(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementOcrImageCollection", thrift.I64, 90); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:agreementOcrImageCollection: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementOcrImageCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementOcrImageCollection (90) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 90:agreementOcrImageCollection: ", p), err) }
  return err
}

func (p *Settings) writeField91(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowFollow", thrift.BOOL, 91); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:privacyAllowFollow: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowFollow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFollow (91) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 91:privacyAllowFollow: ", p), err) }
  return err
}

func (p *Settings) writeField92(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyShowFollowList", thrift.BOOL, 92); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:privacyShowFollowList: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyShowFollowList)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyShowFollowList (92) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 92:privacyShowFollowList: ", p), err) }
  return err
}

func (p *Settings) writeField93(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationBadgeTalkOnly", thrift.BOOL, 93); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 93:notificationBadgeTalkOnly: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationBadgeTalkOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationBadgeTalkOnly (93) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 93:notificationBadgeTalkOnly: ", p), err) }
  return err
}

func (p *Settings) Equals(other *Settings) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NotificationEnable != other.NotificationEnable { return false }
  if p.NotificationMuteExpiration != other.NotificationMuteExpiration { return false }
  if p.NotificationNewMessage != other.NotificationNewMessage { return false }
  if p.NotificationGroupInvitation != other.NotificationGroupInvitation { return false }
  if p.NotificationShowMessage != other.NotificationShowMessage { return false }
  if p.NotificationIncomingCall != other.NotificationIncomingCall { return false }
  if p.NotificationSoundMessage != other.NotificationSoundMessage { return false }
  if p.NotificationSoundGroup != other.NotificationSoundGroup { return false }
  if p.NotificationDisabledWithSub != other.NotificationDisabledWithSub { return false }
  if p.NotificationPayment != other.NotificationPayment { return false }
  if p.PrivacySyncContacts != other.PrivacySyncContacts { return false }
  if p.PrivacySearchByPhoneNumber != other.PrivacySearchByPhoneNumber { return false }
  if p.PrivacySearchByUserid != other.PrivacySearchByUserid { return false }
  if p.PrivacySearchByEmail != other.PrivacySearchByEmail { return false }
  if p.PrivacyAllowSecondaryDeviceLogi != other.PrivacyAllowSecondaryDeviceLogi { return false }
  if p.PrivacyProfileImagePostToMyhome != other.PrivacyProfileImagePostToMyhome { return false }
  if p.PrivacyReceiveMessagesFromNotFriend != other.PrivacyReceiveMessagesFromNotFriend { return false }
  if p.PrivacyAgreeUseLineCoinToPaidCall != other.PrivacyAgreeUseLineCoinToPaidCall { return false }
  if p.PrivacyAgreeUsePaidCall != other.PrivacyAgreeUsePaidCall { return false }
  if p.PrivacyAllowFriendRequest != other.PrivacyAllowFriendRequest { return false }
  if p.ContactMyTicket != other.ContactMyTicket { return false }
  if p.IdentityProvider != other.IdentityProvider { return false }
  if p.IdentityIdentifier != other.IdentityIdentifier { return false }
  if len(p.SnsAccounts) != len(other.SnsAccounts) { return false }
  for k, _tgt := range p.SnsAccounts {
    _src90 := other.SnsAccounts[k]
    if _tgt != _src90 { return false }
  }
  if p.PhoneRegistration != other.PhoneRegistration { return false }
  if p.EmailConfirmationStatus != other.EmailConfirmationStatus { return false }
  if p.AccountMigrationPincodeType != other.AccountMigrationPincodeType { return false }
  if p.EnforcedInputAccountMigrationPincode != other.EnforcedInputAccountMigrationPincode { return false }
  if p.SecurityCenterSettingsType != other.SecurityCenterSettingsType { return false }
  if p.AllowUnregistrationSecondaryDevice != other.AllowUnregistrationSecondaryDevice { return false }
  if p.PreferenceLocale != other.PreferenceLocale { return false }
  if len(p.CustomModes) != len(other.CustomModes) { return false }
  for k, _tgt := range p.CustomModes {
    _src91 := other.CustomModes[k]
    if _tgt != _src91 { return false }
  }
  if p.E2eeEnable != other.E2eeEnable { return false }
  if p.HitokotoBackupRequested != other.HitokotoBackupRequested { return false }
  if p.PrivacyProfileMusicPostToMyhome != other.PrivacyProfileMusicPostToMyhome { return false }
  if p.PrivacyAllowNearby != other.PrivacyAllowNearby { return false }
  if p.AgreementNearbyTime != other.AgreementNearbyTime { return false }
  if p.AgreementSquareTime != other.AgreementSquareTime { return false }
  if p.NotificationMention != other.NotificationMention { return false }
  if p.BotUseAgreementAcceptedAt != other.BotUseAgreementAcceptedAt { return false }
  if p.AgreementShakeFunction != other.AgreementShakeFunction { return false }
  if p.AgreementMobileContactName != other.AgreementMobileContactName { return false }
  if p.NotificationThumbnail != other.NotificationThumbnail { return false }
  if p.AgreementSoundToText != other.AgreementSoundToText { return false }
  if p.PrivacyPolicyVersion != other.PrivacyPolicyVersion { return false }
  if p.AgreementAdByWebAccess != other.AgreementAdByWebAccess { return false }
  if p.AgreementPhoneNumberMatching != other.AgreementPhoneNumberMatching { return false }
  if p.AgreementCommunicationInfo != other.AgreementCommunicationInfo { return false }
  if p.PrivacySharePersonalInfoToFriends != other.PrivacySharePersonalInfoToFriends { return false }
  if p.AgreementThingsWirelessCommunication != other.AgreementThingsWirelessCommunication { return false }
  if p.AgreementGdpr != other.AgreementGdpr { return false }
  if p.PrivacyStatusMessageHistory != other.PrivacyStatusMessageHistory { return false }
  if p.AgreementProvideLocation != other.AgreementProvideLocation { return false }
  if p.AgreementBeacon != other.AgreementBeacon { return false }
  if p.PrivacyAllowProfileHistory != other.PrivacyAllowProfileHistory { return false }
  if p.AgreementContentsSuggest != other.AgreementContentsSuggest { return false }
  if p.AgreementContentsSuggestDataCollection != other.AgreementContentsSuggestDataCollection { return false }
  if p.PrivacyAgeResult_ != other.PrivacyAgeResult_ { return false }
  if p.PrivacyAgeResultReceived != other.PrivacyAgeResultReceived { return false }
  if p.AgreementOcrImageCollection != other.AgreementOcrImageCollection { return false }
  if p.PrivacyAllowFollow != other.PrivacyAllowFollow { return false }
  if p.PrivacyShowFollowList != other.PrivacyShowFollowList { return false }
  if p.NotificationBadgeTalkOnly != other.NotificationBadgeTalkOnly { return false }
  return true
}

func (p *Settings) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Settings(%+v)", *p)
}

type UpdateChatResponse struct {
}

func NewUpdateChatResponse() *UpdateChatResponse {
  return &UpdateChatResponse{}
}

func (p *UpdateChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChatResponse) Equals(other *UpdateChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *UpdateChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Chat
//  - UpdatedAttribute
type UpdateChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Chat *Chat `thrift:"chat,2" db:"chat" json:"chat"`
  UpdatedAttribute ChatAttribute `thrift:"updatedAttribute,3" db:"updatedAttribute" json:"updatedAttribute"`
}

func NewUpdateChatRequest() *UpdateChatRequest {
  return &UpdateChatRequest{}
}


func (p *UpdateChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}
var UpdateChatRequest_Chat_DEFAULT *Chat
func (p *UpdateChatRequest) GetChat() *Chat {
  if !p.IsSetChat() {
    return UpdateChatRequest_Chat_DEFAULT
  }
return p.Chat
}

func (p *UpdateChatRequest) GetUpdatedAttribute() ChatAttribute {
  return p.UpdatedAttribute
}
func (p *UpdateChatRequest) IsSetChat() bool {
  return p.Chat != nil
}

func (p *UpdateChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *UpdateChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *UpdateChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ChatAttribute(v)
  p.UpdatedAttribute = temp
}
  return nil
}

func (p *UpdateChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *UpdateChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chat: ", p), err) }
  if err := p.Chat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chat: ", p), err) }
  return err
}

func (p *UpdateChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updatedAttribute", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedAttribute: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UpdatedAttribute)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAttribute (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedAttribute: ", p), err) }
  return err
}

func (p *UpdateChatRequest) Equals(other *UpdateChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if !p.Chat.Equals(other.Chat) { return false }
  if p.UpdatedAttribute != other.UpdatedAttribute { return false }
  return true
}

func (p *UpdateChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChatRequest(%+v)", *p)
}

// Attributes:
//  - TotalIncomingCount
//  - TotalOutgoingCount
//  - RecentIncomings
//  - RecentOutgoings
//  - TotalIncomingLimit
//  - TotalOutgoingLimit
type FriendRequestsInfo struct {
  TotalIncomingCount int32 `thrift:"totalIncomingCount,1" db:"totalIncomingCount" json:"totalIncomingCount"`
  TotalOutgoingCount int32 `thrift:"totalOutgoingCount,2" db:"totalOutgoingCount" json:"totalOutgoingCount"`
  RecentIncomings []*FriendRequest `thrift:"recentIncomings,3" db:"recentIncomings" json:"recentIncomings"`
  RecentOutgoings []*FriendRequest `thrift:"recentOutgoings,4" db:"recentOutgoings" json:"recentOutgoings"`
  TotalIncomingLimit int32 `thrift:"totalIncomingLimit,5" db:"totalIncomingLimit" json:"totalIncomingLimit"`
  TotalOutgoingLimit int32 `thrift:"totalOutgoingLimit,6" db:"totalOutgoingLimit" json:"totalOutgoingLimit"`
}

func NewFriendRequestsInfo() *FriendRequestsInfo {
  return &FriendRequestsInfo{}
}


func (p *FriendRequestsInfo) GetTotalIncomingCount() int32 {
  return p.TotalIncomingCount
}

func (p *FriendRequestsInfo) GetTotalOutgoingCount() int32 {
  return p.TotalOutgoingCount
}

func (p *FriendRequestsInfo) GetRecentIncomings() []*FriendRequest {
  return p.RecentIncomings
}

func (p *FriendRequestsInfo) GetRecentOutgoings() []*FriendRequest {
  return p.RecentOutgoings
}

func (p *FriendRequestsInfo) GetTotalIncomingLimit() int32 {
  return p.TotalIncomingLimit
}

func (p *FriendRequestsInfo) GetTotalOutgoingLimit() int32 {
  return p.TotalOutgoingLimit
}
func (p *FriendRequestsInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FriendRequestsInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalIncomingCount = v
}
  return nil
}

func (p *FriendRequestsInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalOutgoingCount = v
}
  return nil
}

func (p *FriendRequestsInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendRequest, 0, size)
  p.RecentIncomings =  tSlice
  for i := 0; i < size; i ++ {
    _elem92 := &FriendRequest{}
    if err := _elem92.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem92), err)
    }
    p.RecentIncomings = append(p.RecentIncomings, _elem92)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FriendRequestsInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendRequest, 0, size)
  p.RecentOutgoings =  tSlice
  for i := 0; i < size; i ++ {
    _elem93 := &FriendRequest{}
    if err := _elem93.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem93), err)
    }
    p.RecentOutgoings = append(p.RecentOutgoings, _elem93)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FriendRequestsInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalIncomingLimit = v
}
  return nil
}

func (p *FriendRequestsInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TotalOutgoingLimit = v
}
  return nil
}

func (p *FriendRequestsInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FriendRequestsInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FriendRequestsInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalIncomingCount", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalIncomingCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalIncomingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalIncomingCount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalIncomingCount: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalOutgoingCount", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalOutgoingCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalOutgoingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalOutgoingCount: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recentIncomings", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recentIncomings: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RecentIncomings)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RecentIncomings {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recentIncomings: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recentOutgoings", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recentOutgoings: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RecentOutgoings)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RecentOutgoings {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recentOutgoings: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalIncomingLimit", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:totalIncomingLimit: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalIncomingLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalIncomingLimit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:totalIncomingLimit: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalOutgoingLimit", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:totalOutgoingLimit: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalOutgoingLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingLimit (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:totalOutgoingLimit: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) Equals(other *FriendRequestsInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TotalIncomingCount != other.TotalIncomingCount { return false }
  if p.TotalOutgoingCount != other.TotalOutgoingCount { return false }
  if len(p.RecentIncomings) != len(other.RecentIncomings) { return false }
  for i, _tgt := range p.RecentIncomings {
    _src94 := other.RecentIncomings[i]
    if !_tgt.Equals(_src94) { return false }
  }
  if len(p.RecentOutgoings) != len(other.RecentOutgoings) { return false }
  for i, _tgt := range p.RecentOutgoings {
    _src95 := other.RecentOutgoings[i]
    if !_tgt.Equals(_src95) { return false }
  }
  if p.TotalIncomingLimit != other.TotalIncomingLimit { return false }
  if p.TotalOutgoingLimit != other.TotalOutgoingLimit { return false }
  return true
}

func (p *FriendRequestsInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FriendRequestsInfo(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type DeleteOtherFromChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewDeleteOtherFromChatRequest() *DeleteOtherFromChatRequest {
  return &DeleteOtherFromChatRequest{}
}


func (p *DeleteOtherFromChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *DeleteOtherFromChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *DeleteOtherFromChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *DeleteOtherFromChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem96 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem96 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem96)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *DeleteOtherFromChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteOtherFromChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteOtherFromChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) Equals(other *DeleteOtherFromChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src97 := other.TargetUserMids[i]
    if _tgt != _src97 { return false }
  }
  return true
}

func (p *DeleteOtherFromChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteOtherFromChatRequest(%+v)", *p)
}

// Attributes:
//  - Luid
//  - ContactType
//  - ContactKey
//  - Contact
type ContactRegistration struct {
  // unused fields # 1 to 9
  Luid string `thrift:"luid,10" db:"luid" json:"luid"`
  ContactType MIDType `thrift:"contactType,11" db:"contactType" json:"contactType"`
  ContactKey string `thrift:"contactKey,12" db:"contactKey" json:"contactKey"`
  Contact *Contact `thrift:"contact,13" db:"contact" json:"contact"`
}

func NewContactRegistration() *ContactRegistration {
  return &ContactRegistration{}
}


func (p *ContactRegistration) GetLuid() string {
  return p.Luid
}

func (p *ContactRegistration) GetContactType() MIDType {
  return p.ContactType
}

func (p *ContactRegistration) GetContactKey() string {
  return p.ContactKey
}
var ContactRegistration_Contact_DEFAULT *Contact
func (p *ContactRegistration) GetContact() *Contact {
  if !p.IsSetContact() {
    return ContactRegistration_Contact_DEFAULT
  }
return p.Contact
}
func (p *ContactRegistration) IsSetContact() bool {
  return p.Contact != nil
}

func (p *ContactRegistration) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContactRegistration)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Luid = v
}
  return nil
}

func (p *ContactRegistration)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := MIDType(v)
  p.ContactType = temp
}
  return nil
}

func (p *ContactRegistration)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ContactKey = v
}
  return nil
}

func (p *ContactRegistration)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  p.Contact = &Contact{}
  if err := p.Contact.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *ContactRegistration) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContactRegistration"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContactRegistration) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "luid", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:luid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Luid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.luid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:luid: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactType", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:contactType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContactType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactType (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:contactType: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactKey", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:contactKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ContactKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactKey (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:contactKey: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contact", thrift.STRUCT, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:contact: ", p), err) }
  if err := p.Contact.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:contact: ", p), err) }
  return err
}

func (p *ContactRegistration) Equals(other *ContactRegistration) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Luid != other.Luid { return false }
  if p.ContactType != other.ContactType { return false }
  if p.ContactKey != other.ContactKey { return false }
  if !p.Contact.Equals(other.Contact) { return false }
  return true
}

func (p *ContactRegistration) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContactRegistration(%+v)", *p)
}

type DeleteOtherFromChatResponse struct {
}

func NewDeleteOtherFromChatResponse() *DeleteOtherFromChatResponse {
  return &DeleteOtherFromChatResponse{}
}

func (p *DeleteOtherFromChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteOtherFromChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteOtherFromChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteOtherFromChatResponse) Equals(other *DeleteOtherFromChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *DeleteOtherFromChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteOtherFromChatResponse(%+v)", *p)
}

type DeleteSelfFromChatResponse struct {
}

func NewDeleteSelfFromChatResponse() *DeleteSelfFromChatResponse {
  return &DeleteSelfFromChatResponse{}
}

func (p *DeleteSelfFromChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteSelfFromChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteSelfFromChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteSelfFromChatResponse) Equals(other *DeleteSelfFromChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *DeleteSelfFromChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSelfFromChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - LastSeenMessageDeliveredTime
//  - LastSeenMessageId
//  - LastMessageDeliveredTime
//  - LastMessageId
type DeleteSelfFromChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastSeenMessageDeliveredTime int64 `thrift:"lastSeenMessageDeliveredTime,3" db:"lastSeenMessageDeliveredTime" json:"lastSeenMessageDeliveredTime"`
  LastSeenMessageId string `thrift:"lastSeenMessageId,4" db:"lastSeenMessageId" json:"lastSeenMessageId"`
  LastMessageDeliveredTime int64 `thrift:"lastMessageDeliveredTime,5" db:"lastMessageDeliveredTime" json:"lastMessageDeliveredTime"`
  LastMessageId string `thrift:"lastMessageId,6" db:"lastMessageId" json:"lastMessageId"`
}

func NewDeleteSelfFromChatRequest() *DeleteSelfFromChatRequest {
  return &DeleteSelfFromChatRequest{}
}


func (p *DeleteSelfFromChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *DeleteSelfFromChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageDeliveredTime() int64 {
  return p.LastSeenMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageId() string {
  return p.LastSeenMessageId
}

func (p *DeleteSelfFromChatRequest) GetLastMessageDeliveredTime() int64 {
  return p.LastMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastMessageId() string {
  return p.LastMessageId
}
func (p *DeleteSelfFromChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastSeenMessageDeliveredTime = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastSeenMessageId = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastMessageDeliveredTime = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteSelfFromChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteSelfFromChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSeenMessageDeliveredTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastSeenMessageDeliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSeenMessageDeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageDeliveredTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastSeenMessageDeliveredTime: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSeenMessageId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastSeenMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastSeenMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastSeenMessageId: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageDeliveredTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastMessageDeliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastMessageDeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageDeliveredTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastMessageDeliveredTime: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastMessageId: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) Equals(other *DeleteSelfFromChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.LastSeenMessageDeliveredTime != other.LastSeenMessageDeliveredTime { return false }
  if p.LastSeenMessageId != other.LastSeenMessageId { return false }
  if p.LastMessageDeliveredTime != other.LastMessageDeliveredTime { return false }
  if p.LastMessageId != other.LastMessageId { return false }
  return true
}

func (p *DeleteSelfFromChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSelfFromChatRequest(%+v)", *p)
}

type RejectChatInvitationResponse struct {
}

func NewRejectChatInvitationResponse() *RejectChatInvitationResponse {
  return &RejectChatInvitationResponse{}
}

func (p *RejectChatInvitationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RejectChatInvitationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RejectChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RejectChatInvitationResponse) Equals(other *RejectChatInvitationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *RejectChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RejectChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type RejectChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewRejectChatInvitationRequest() *RejectChatInvitationRequest {
  return &RejectChatInvitationRequest{}
}


func (p *RejectChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *RejectChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}
func (p *RejectChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RejectChatInvitationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *RejectChatInvitationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *RejectChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RejectChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RejectChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *RejectChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *RejectChatInvitationRequest) Equals(other *RejectChatInvitationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  return true
}

func (p *RejectChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RejectChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - StartMessageId
//  - EndMessageId
//  - StartTime
//  - EndTime
type TMessageReadRangeEntry struct {
  StartMessageId int64 `thrift:"startMessageId,1" db:"startMessageId" json:"startMessageId"`
  EndMessageId int64 `thrift:"endMessageId,2" db:"endMessageId" json:"endMessageId"`
  StartTime int64 `thrift:"startTime,3" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,4" db:"endTime" json:"endTime"`
}

func NewTMessageReadRangeEntry() *TMessageReadRangeEntry {
  return &TMessageReadRangeEntry{}
}


func (p *TMessageReadRangeEntry) GetStartMessageId() int64 {
  return p.StartMessageId
}

func (p *TMessageReadRangeEntry) GetEndMessageId() int64 {
  return p.EndMessageId
}

func (p *TMessageReadRangeEntry) GetStartTime() int64 {
  return p.StartTime
}

func (p *TMessageReadRangeEntry) GetEndTime() int64 {
  return p.EndTime
}
func (p *TMessageReadRangeEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StartMessageId = v
}
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EndMessageId = v
}
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TMessageReadRangeEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TMessageReadRangeEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMessageReadRangeEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startMessageId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startMessageId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startMessageId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startMessageId: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endMessageId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endMessageId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EndMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endMessageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endMessageId: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) Equals(other *TMessageReadRangeEntry) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StartMessageId != other.StartMessageId { return false }
  if p.EndMessageId != other.EndMessageId { return false }
  if p.StartTime != other.StartTime { return false }
  if p.EndTime != other.EndTime { return false }
  return true
}

func (p *TMessageReadRangeEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMessageReadRangeEntry(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - Ranges
type TMessageReadRange struct {
  ChatMid string `thrift:"chatMid,1" db:"chatMid" json:"chatMid"`
  Ranges map[string][]*TMessageReadRangeEntry `thrift:"ranges,2" db:"ranges" json:"ranges"`
}

func NewTMessageReadRange() *TMessageReadRange {
  return &TMessageReadRange{}
}


func (p *TMessageReadRange) GetChatMid() string {
  return p.ChatMid
}

func (p *TMessageReadRange) GetRanges() map[string][]*TMessageReadRangeEntry {
  return p.Ranges
}
func (p *TMessageReadRange) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMessageReadRange)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TMessageReadRange)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*TMessageReadRangeEntry, size)
  p.Ranges =  tMap
  for i := 0; i < size; i ++ {
var _key98 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key98 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*TMessageReadRangeEntry, 0, size)
    _val99 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem100 := &TMessageReadRangeEntry{}
      if err := _elem100.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem100), err)
      }
      _val99 = append(_val99, _elem100)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Ranges[_key98] = _val99
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TMessageReadRange) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TMessageReadRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMessageReadRange) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMid: ", p), err) }
  return err
}

func (p *TMessageReadRange) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ranges", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ranges: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.Ranges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Ranges {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ranges: ", p), err) }
  return err
}

func (p *TMessageReadRange) Equals(other *TMessageReadRange) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.Ranges) != len(other.Ranges) { return false }
  for k, _tgt := range p.Ranges {
    _src101 := other.Ranges[k]
    if len(_tgt) != len(_src101) { return false }
    for i, _tgt := range _tgt {
      _src102 := _src101[i]
      if !_tgt.Equals(_src102) { return false }
    }
  }
  return true
}

func (p *TMessageReadRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMessageReadRange(%+v)", *p)
}

type TalkService interface {
  // Parameters:
  //  - MidOrEMid
  //  - Method
  //  - FriendRequestParams
  TryFriendRequest(ctx context.Context, midOrEMid string, method Method_, friendRequestParams string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Attr
  //  - ExtendedProfile
  UpdateExtendedProfileAttribute(ctx context.Context, reqSeq int32, attr UpdateExtendedProfileAttributeAttr, extendedProfile *ExtendedProfile) (_err error)
  // Parameters:
  //  - MigrationSessionId
  VerifyAccountMigration(ctx context.Context, migrationSessionId string) (_err error)
  // Parameters:
  //  - Location
  //  - Trigger
  //  - NetworkStatus
  ReportLocation(ctx context.Context, location *Geolocation, trigger Trigger, networkStatus *ClientNetworkStatus) (_err error)
  // Parameters:
  //  - Language
  GetPaidCallBalanceList(ctx context.Context, language string) (_r []*PaidCallBalance, _err error)
  // Parameters:
  //  - Requests
  CreateChat(ctx context.Context, requests *CreateChatRequest) (_r *CreateChatResponse, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Type
  //  - Reference
  FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 MIDType, reference string) (_r map[string]*Contact, _err error)
  // Parameters:
  //  - ExpirationTime
  //  - MaxUseCount
  GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (_r *Ticket, _err error)
  // Parameters:
  //  - Ids
  GetContacts(ctx context.Context, ids []string) (_r []*Contact, _err error)
  // Parameters:
  //  - GetFollowersRequest
  GetFollowers(ctx context.Context, getFollowersRequest *GetFollowersRequest) (_r *GetFollowersResponse, _err error)
  // Parameters:
  //  - ChatMid
  GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (_r map[string]*E2EEPublicKey, _err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (_err error)
  // Parameters:
  //  - UdidHash
  //  - ApplicationTypeWithExtensions
  NotifyRegistrationComplete(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ChatRoomMid
  //  - AnnouncementSeq
  RemoveChatRoomAnnouncement(ctx context.Context, reqSeq int32, chatRoomMid string, announcementSeq int64) (_err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  //  - SessionId
  SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId []byte) (_err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  UpdatePassword(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  //  - Reference
  UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (_err error)
  // Parameters:
  //  - IdentityCredential
  //  - MigrationPincodeSessionId
  VerifyIdentityCredentialWithResult_(ctx context.Context, identityCredential *IdentityCredential, migrationPincodeSessionId string) (_r *UserAuthStatus, _err error)
  // Parameters:
  //  - DataTypes
  RequestCleanupUserProvidedData(ctx context.Context, dataTypes []DataTypes) (_err error)
  // Parameters:
  //  - Request
  GetBuddyStatusBarV2(ctx context.Context, request *GetBuddyStatusBarV2Request) (_r *BuddyStatusBar, _err error)
  // Parameters:
  //  - Start
  //  - Size
  //  - Language
  GetPaidCallHistory(ctx context.Context, start int64, size int32, language string) (_r *PaidCallHistoryResult_, _err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  BlockContact(ctx context.Context, reqSeq int32, id string) (_err error)
  // Parameters:
  //  - Seq
  //  - Name
  //  - ContactIds
  CreateGroupV2(ctx context.Context, seq int32, name string, contactIds []string) (_r *Group, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Phones
  //  - Reference
  FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string, reference string) (_r map[string]*Contact, _err error)
  // Parameters:
  //  - SessionId
  GetAcceptedProximityMatches(ctx context.Context, sessionId string) (_r []string, _err error)
  // Parameters:
  //  - ChatRoomMids
  //  - SyncReason
  GetChatRoomAnnouncementsBulk(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (_r map[string][]*ChatRoomAnnouncement, _err error)
  // Parameters:
  //  - SyncReason
  GetRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - CountryGroup
  GetCountries(ctx context.Context, countryGroup CountryGroup) (_r []string, _err error)
  // Parameters:
  //  - GetFollowingsRequest
  GetFollowings(ctx context.Context, getFollowingsRequest *GetFollowingsRequest) (_r *GetFollowingsResponse, _err error)
  GetLastOpRevision(ctx context.Context) (_r int64, _err error)
  GetRingbackTone(ctx context.Context) (_r int64, _err error)
  // Parameters:
  //  - SessionId
  //  - MigrationPincodeSessionId
  RegisterWithPhoneNumber(ctx context.Context, sessionId string, migrationPincodeSessionId string) (_r *RegisterWithPhoneNumberResult_, _err error)
  // Parameters:
  //  - SyncOpRevision
  //  - Category
  //  - Report
  Report(ctx context.Context, syncOpRevision int64, category ReportCategory, report string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Group
  UpdateGroup(ctx context.Context, reqSeq int32, group *Group) (_err error)
  // Parameters:
  //  - Language
  //  - Country
  //  - Query
  //  - FromIndex
  //  - Count
  //  - RequestSource
  FindBuddyContactsByQuery(ctx context.Context, language string, country string, query string, fromIndex int32, count int32, requestSource RequestsSource) (_r []*BuddySearchResult_, _err error)
  // Parameters:
  //  - Language
  GetPaidCallMetadata(ctx context.Context, language string) (_r *PaidCallMetadataResult_, _err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  BlockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  //  - Reference
  FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string, reference string) (_r map[string]*Contact, _err error)
  // Parameters:
  //  - Request
  //  - SyncReason
  GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (_r *GetAllChatMidsResponse, _err error)
  // Parameters:
  //  - ChatRoomMids
  GetChatRoomAnnouncements(ctx context.Context, chatRoomMids string) (_r []*ChatRoomAnnouncement, _err error)
  GetCountryWithRequestIp(ctx context.Context) (_r string, _err error)
  // Parameters:
  //  - Direction
  //  - LastSeenSeqId
  GetFriendRequests(ctx context.Context, direction Direction, lastSeenSeqId int64) (_r []*FriendRequest, _err error)
  GetRingtone(ctx context.Context) (_r *Ringtone, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Profile
  UpdateProfile(ctx context.Context, reqSeq int32, profile *Profile) (_err error)
  // Parameters:
  //  - LastRev
  //  - Badge
  NotifySleep(ctx context.Context, lastRev int64, badge int32) (_err error)
  // Parameters:
  //  - SnsIdType
  //  - SnsAccessToken
  //  - IdentityCredential
  //  - Region
  //  - UdidHash
  //  - DeviceInfo
  //  - MigrationPincodeSessionId
  RegisterWithSnsIdAndIdentityCredential(ctx context.Context, snsIdType SnSIdTyoe, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo, migrationPincodeSessionId string) (_r string, _err error)
  // Parameters:
  //  - RemoveFollowerRequest
  RemoveFollower(ctx context.Context, removeFollowerRequest *RemoveFollowerRequest) (_err error)
  // Parameters:
  //  - Provider
  //  - Identifier
  //  - Locale
  RequestAccountPasswordReset(ctx context.Context, provider Provider, identifier string, locale string) (_err error)
  // Parameters:
  //  - Text
  SendEchoPush(ctx context.Context, text string) (_err error)
  // Parameters:
  //  - UnfollowRequest
  Unfollow(ctx context.Context, unfollowRequest *UnfollowRequest) (_err error)
  // Parameters:
  //  - ChatMid
  //  - MemberMids
  //  - MediaType
  InviteIntoGroupCall(ctx context.Context, chatMid string, memberMids []string, mediaType MediaType) (_err error)
  // Parameters:
  //  - Request
  CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (_r *CancelChatInvitationResponse, _err error)
  // Parameters:
  //  - Request
  FindChatByTicket(ctx context.Context, request *FindChatByTicketRequest) (_r *FindChatByTicketResponse, _err error)
  // Parameters:
  //  - SyncReason
  GetAllContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - ChatRoomMids
  //  - SyncReason
  GetChatRoomBGMs(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (_r map[string]*ChatRoomBGM, _err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  //  - GroupKeyId
  GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (_r *E2EEGroupSharedKey, _err error)
  // Parameters:
  //  - SyncReason
  GetGroupIdsInvited(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - SyncReason
  GetProfile(ctx context.Context, syncReason SyncReason) (_r *Profile, _err error)
  // Parameters:
  //  - LastRev
  //  - DeviceInfo
  //  - UdidHash
  //  - OldUdidHash
  NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (_err error)
  // Parameters:
  //  - SnsIdType
  //  - SnsAccessToken
  //  - Region
  //  - UdidHash
  //  - DeviceInfo
  //  - Mid
  //  - MigrationPincodeSessionId
  RegisterWithSnsId(ctx context.Context, snsIdType SnSIdTyoe, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string, migrationPincodeSessionId string) (_r *RegisterWithSnsIdResult_, _err error)
  // Parameters:
  //  - Direction
  //  - MidOrEMid
  RemoveFriendRequest(ctx context.Context, direction Direction, midOrEMid string) (_err error)
  // Parameters:
  //  - Request
  OpenAuthSession(ctx context.Context, request *AuthSessionRequest) (_r string, _err error)
  // Parameters:
  //  - Verifier
  //  - PinCode
  //  - ErrorCode
  //  - PublicKey
  //  - EncryptedKeyChain
  //  - HashKeyChain
  VerifyQrcodeWithE2EE(ctx context.Context, verifier string, pinCode string, errorCode ErrorCode, publicKey *E2EEPublicKey, encryptedKeyChain []byte, hashKeyChain []byte) (_r string, _err error)
  // Parameters:
  //  - Request
  GetBalance(ctx context.Context, request *GetBalanceRequest) (_r *GetBalanceResponse, _err error)
  UnregisterUserAndDevice(ctx context.Context) (_r string, _err error)
  // Parameters:
  //  - Type
  //  - Token
  UpdateNotificationToken(ctx context.Context, type_a1 UpdateNotificationType, token string) (_err error)
  // Parameters:
  //  - SessionId
  //  - PinCode
  //  - UdidHash
  //  - MigrationPincodeSessionId
  //  - OldUdidHash
  VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (_r *PhoneVerificationResult_, _err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  //  - ContactIds
  CancelGroupInvitation(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ContactIds
  CreateRoomV2(ctx context.Context, reqSeq int32, contactIds []string) (_r *Room, _err error)
  // Parameters:
  //  - SearchId
  //  - Reference
  FindContactByMetaTag(ctx context.Context, searchId string, reference string) (_r *Contact, _err error)
  // Parameters:
  //  - Request
  GetChats(ctx context.Context, request *GetChatsRequest) (_r *GetChatsResponse, _err error)
  // Parameters:
  //  - SyncReason
  GetGroupIdsJoined(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - RoomIds
  GetRoomsV2(ctx context.Context, roomIds []string) (_r []*Room, _err error)
  // Parameters:
  //  - Request
  ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (_r *ReissueChatTicketResponse, _err error)
  // Parameters:
  //  - Seq
  //  - Message
  SendMessage(ctx context.Context, seq int32, message *Message) (_r *Message, _err error)
  // Parameters:
  //  - Seq
  //  - MessageId
  UnsendMessage(ctx context.Context, seq int32, messageId string) (_err error)
  // Parameters:
  //  - ChatMid
  //  - MediaType
  //  - IsInitialHost
  //  - Capabilities
  AcquireGroupCallRoute(ctx context.Context, chatMid string, mediaType MediaType, isInitialHost bool, capabilities []string) (_r *GroupCallRoute, _err error)
  // Parameters:
  //  - Request
  AcceptChatInvitationByTicket(ctx context.Context, request *AcceptChatInvitationByTicketRequest) (_r *AcceptChatInvitationByTicketResponse, _err error)
  // Parameters:
  //  - TicketIdWithTag
  FindContactByUserTicket(ctx context.Context, ticketIdWithTag string) (_r *Contact, _err error)
  // Parameters:
  //  - Mid
  //  - KeyVersion
  //  - KeyId
  GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (_r []*E2EEPublicKey, _err error)
  // Parameters:
  //  - SessionId
  //  - Provider
  //  - Identifier
  //  - Verifier
  //  - MigrationPincodeSessionId
  RegisterDeviceWithIdentityCredential(ctx context.Context, sessionId string, provider Provider, identifier string, verifier string, migrationPincodeSessionId string) (_r string, _err error)
  // Parameters:
  //  - GroupMid
  ReissueGroupTicket(ctx context.Context, groupMid string) (_r string, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Request
  UpdateProfileAttributes(ctx context.Context, reqSeq int32, request *UpdateProfileAttributesRequest) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Attr
  //  - Value
  UpdateProfileAttribute(ctx context.Context, reqSeq int32, attr Attr, value string) (_err error)
  // Parameters:
  //  - Verifier
  //  - PinCode
  VerifyQrcode(ctx context.Context, verifier string, pinCode string) (_r string, _err error)
  // Parameters:
  //  - Request
  AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (_r *AcceptChatInvitationResponse, _err error)
  // Parameters:
  //  - EMid
  DecryptFollowEMid(ctx context.Context, eMid string) (_r string, _err error)
  // Parameters:
  //  - SearchId
  FindContactByUserid(ctx context.Context, searchId string) (_r *Contact, _err error)
  GetServerTime(ctx context.Context) (_r int64, _err error)
  // Parameters:
  //  - Request
  InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (_r *InviteIntoChatResponse, _err error)
  // Parameters:
  //  - ClientRevision
  WakeUpLongPolling(ctx context.Context, clientRevision int64) (_r bool, _err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupMid
  //  - TicketId
  AcceptGroupInvitationByTicket(ctx context.Context, reqSeq int32, groupMid string, ticketId string) (_err error)
  // Parameters:
  //  - Request
  DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (_r *DeleteOtherFromChatResponse, _err error)
  // Parameters:
  //  - Phones
  FindContactsByPhone(ctx context.Context, phones []string) (_r map[string]*Contact, _err error)
  // Parameters:
  //  - GroupId
  GetGroupsV2(ctx context.Context, groupId []string) (_r []*Group, _err error)
  // Parameters:
  //  - GroupId
  GetGroups(ctx context.Context, groupId []string) (_r []*Group, _err error)
  // Parameters:
  //  - GroupId
  GetGroup(ctx context.Context, groupId string) (_r *Group, _err error)
  // Parameters:
  //  - GroupId
  GetCompactGroup(ctx context.Context, groupId string) (_r *Group, _err error)
  // Parameters:
  //  - GroupId
  GetGroupWithoutMembers(ctx context.Context, groupId string) (_r *Group, _err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  //  - ContactIds
  InviteIntoGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  AcceptGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (_err error)
  // Parameters:
  //  - ChatIds
  //  - SyncReason
  GetMessageReadRange(ctx context.Context, chatIds []string, syncReason SyncReason) (_r []*TMessageReadRange, _err error)
  // Parameters:
  //  - Request
  DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (_r *DeleteSelfFromChatResponse, _err error)
  // Parameters:
  //  - SyncReason
  GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - AttributesToRetrieve
  GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []SettingsAttributes) (_r *Settings, _err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  //  - ContactIds
  InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (_err error)
  // Parameters:
  //  - Request
  RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (_r *RejectChatInvitationResponse, _err error)
  // Parameters:
  //  - SyncReason
  GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - ReqSeq
  //  - ChatRoomMid
  //  - ChatRoomBGMInfo
  UpdateChatRoomBGM(ctx context.Context, reqSeq int32, chatRoomMid string, chatRoomBGMInfo string) (_r *ChatRoomBGM, _err error)
  // Parameters:
  //  - TicketId
  FindGroupByTicket(ctx context.Context, ticketId string) (_r *Group, _err error)
  // Parameters:
  //  - SyncReason
  GetRecentFriendRequests(ctx context.Context, syncReason SyncReason) (_r *FriendRequestsInfo, _err error)
  // Parameters:
  //  - AttrBitset
  GetSettingsAttributes(ctx context.Context, attrBitset int32) (_r *Settings, _err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  RejectGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (_err error)
  // Parameters:
  //  - Request
  UpdateChat(ctx context.Context, request *UpdateChatRequest) (_r *UpdateChatResponse, _err error)
  // Parameters:
  //  - ReqSeq
  //  - AttributesToUpdate
  //  - Settings
  UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingsAttributes, settings *Settings) (_r []SettingsAttributes, _err error)
  // Parameters:
  //  - ID
  //  - Type
  GetContactRegistration(ctx context.Context, id string, type_a1 MIDType) (_r *ContactRegistration, _err error)
  // Parameters:
  //  - SyncReason
  GetSettings(ctx context.Context, syncReason SyncReason) (_r *Settings, _err error)
  Noop(ctx context.Context) (_err error)
  // Parameters:
  //  - Seq
  //  - LastMessageId
  RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Flag
  //  - Value
  UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactFlag, value string) (_err error)
  // Parameters:
  //  - ChatMid
  GetGroupCall(ctx context.Context, chatMid string) (_r *GroupCall, _err error)
  // Parameters:
  //  - LocalRev
  //  - Count
  //  - GlobalRev
  //  - IndividualRev
  FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (_r []*Operation, _err error)
  // Parameters:
  //  - LocalRev
  //  - Count
  FetchOperations(ctx context.Context, localRev int64, count int32) (_r []*Operation, _err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  //  - ContactIds
  KickoutFromGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (_err error)
  // Parameters:
  //  - SyncReason
  GetExtendedProfile(ctx context.Context, syncReason SyncReason) (_r *ExtendedProfile, _err error)
  // Parameters:
  //  - FeatureType
  AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureType) (_r string, _err error)
  // Parameters:
  //  - ReqSeq
  //  - ChatRoomMid
  //  - Type
  //  - Contents
  CreateChatRoomAnnouncement(ctx context.Context, reqSeq int32, chatRoomMid string, type_a1 ChatRoomAnnouncementType, contents *ChatRoomAnnouncementContents) (_r *ChatRoomAnnouncement, _err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  //  - Reference
  FindAndAddContactByMetaTag(ctx context.Context, reqSeq int32, searchId string, reference string) (_r *Contact, _err error)
  // Parameters:
  //  - FollowRequest
  Follow(ctx context.Context, followRequest *FollowRequest) (_err error)
  // Parameters:
  //  - ID
  GetContact(ctx context.Context, id string) (_r *Contact, _err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  LeaveGroup(ctx context.Context, reqSeq int32, groupId string) (_err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  //  - SessionId
  SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId []byte) (_err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  UpdateIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error)
}

type TalkServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTalkServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTalkServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTalkServiceClient(c thrift.TClient) *TalkServiceClient {
  return &TalkServiceClient{
    c: c,
  }
}

func (p *TalkServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TalkServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TalkServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - MidOrEMid
//  - Method
//  - FriendRequestParams
func (p *TalkServiceClient) TryFriendRequest(ctx context.Context, midOrEMid string, method Method_, friendRequestParams string) (_err error) {
  var _args103 TalkServiceTryFriendRequestArgs
  _args103.MidOrEMid = midOrEMid
  _args103.Method = method
  _args103.FriendRequestParams = friendRequestParams
  var _result105 TalkServiceTryFriendRequestResult
  var _meta104 thrift.ResponseMeta
  _meta104, _err = p.Client_().Call(ctx, "tryFriendRequest", &_args103, &_result105)
  p.SetLastResponseMeta_(_meta104)
  if _err != nil {
    return
  }
  switch {
  case _result105.E!= nil:
    return _result105.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
func (p *TalkServiceClient) UpdateExtendedProfileAttribute(ctx context.Context, reqSeq int32, attr UpdateExtendedProfileAttributeAttr, extendedProfile *ExtendedProfile) (_err error) {
  var _args106 TalkServiceUpdateExtendedProfileAttributeArgs
  _args106.ReqSeq = reqSeq
  _args106.Attr = attr
  _args106.ExtendedProfile = extendedProfile
  var _result108 TalkServiceUpdateExtendedProfileAttributeResult
  var _meta107 thrift.ResponseMeta
  _meta107, _err = p.Client_().Call(ctx, "updateExtendedProfileAttribute", &_args106, &_result108)
  p.SetLastResponseMeta_(_meta107)
  if _err != nil {
    return
  }
  switch {
  case _result108.E!= nil:
    return _result108.E
  }

  return nil
}

// Parameters:
//  - MigrationSessionId
func (p *TalkServiceClient) VerifyAccountMigration(ctx context.Context, migrationSessionId string) (_err error) {
  var _args109 TalkServiceVerifyAccountMigrationArgs
  _args109.MigrationSessionId = migrationSessionId
  var _result111 TalkServiceVerifyAccountMigrationResult
  var _meta110 thrift.ResponseMeta
  _meta110, _err = p.Client_().Call(ctx, "verifyAccountMigration", &_args109, &_result111)
  p.SetLastResponseMeta_(_meta110)
  if _err != nil {
    return
  }
  switch {
  case _result111.E!= nil:
    return _result111.E
  }

  return nil
}

// Parameters:
//  - Location
//  - Trigger
//  - NetworkStatus
func (p *TalkServiceClient) ReportLocation(ctx context.Context, location *Geolocation, trigger Trigger, networkStatus *ClientNetworkStatus) (_err error) {
  var _args112 TalkServiceReportLocationArgs
  _args112.Location = location
  _args112.Trigger = trigger
  _args112.NetworkStatus = networkStatus
  var _result114 TalkServiceReportLocationResult
  var _meta113 thrift.ResponseMeta
  _meta113, _err = p.Client_().Call(ctx, "reportLocation", &_args112, &_result114)
  p.SetLastResponseMeta_(_meta113)
  if _err != nil {
    return
  }
  switch {
  case _result114.E!= nil:
    return _result114.E
  }

  return nil
}

// Parameters:
//  - Language
func (p *TalkServiceClient) GetPaidCallBalanceList(ctx context.Context, language string) (_r []*PaidCallBalance, _err error) {
  var _args115 TalkServiceGetPaidCallBalanceListArgs
  _args115.Language = language
  var _result117 TalkServiceGetPaidCallBalanceListResult
  var _meta116 thrift.ResponseMeta
  _meta116, _err = p.Client_().Call(ctx, "getPaidCallBalanceList", &_args115, &_result117)
  p.SetLastResponseMeta_(_meta116)
  if _err != nil {
    return
  }
  switch {
  case _result117.E!= nil:
    return _r, _result117.E
  }

  return _result117.GetSuccess(), nil
}

// Parameters:
//  - Requests
func (p *TalkServiceClient) CreateChat(ctx context.Context, requests *CreateChatRequest) (_r *CreateChatResponse, _err error) {
  var _args118 TalkServiceCreateChatArgs
  _args118.Requests = requests
  var _result120 TalkServiceCreateChatResult
  var _meta119 thrift.ResponseMeta
  _meta119, _err = p.Client_().Call(ctx, "createChat", &_args118, &_result120)
  p.SetLastResponseMeta_(_meta119)
  if _err != nil {
    return
  }
  switch {
  case _result120.E!= nil:
    return _r, _result120.E
  }

  return _result120.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 MIDType, reference string) (_r map[string]*Contact, _err error) {
  var _args121 TalkServiceFindAndAddContactsByMidArgs
  _args121.ReqSeq = reqSeq
  _args121.Mid = mid
  _args121.Type = type_a1
  _args121.Reference = reference
  var _result123 TalkServiceFindAndAddContactsByMidResult
  var _meta122 thrift.ResponseMeta
  _meta122, _err = p.Client_().Call(ctx, "findAndAddContactsByMid", &_args121, &_result123)
  p.SetLastResponseMeta_(_meta122)
  if _err != nil {
    return
  }
  switch {
  case _result123.E!= nil:
    return _r, _result123.E
  }

  return _result123.GetSuccess(), nil
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *TalkServiceClient) GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (_r *Ticket, _err error) {
  var _args124 TalkServiceGenerateUserTicketArgs
  _args124.ExpirationTime = expirationTime
  _args124.MaxUseCount = maxUseCount
  var _result126 TalkServiceGenerateUserTicketResult
  var _meta125 thrift.ResponseMeta
  _meta125, _err = p.Client_().Call(ctx, "generateUserTicket", &_args124, &_result126)
  p.SetLastResponseMeta_(_meta125)
  if _err != nil {
    return
  }
  switch {
  case _result126.E!= nil:
    return _r, _result126.E
  }

  return _result126.GetSuccess(), nil
}

// Parameters:
//  - Ids
func (p *TalkServiceClient) GetContacts(ctx context.Context, ids []string) (_r []*Contact, _err error) {
  var _args127 TalkServiceGetContactsArgs
  _args127.Ids = ids
  var _result129 TalkServiceGetContactsResult
  var _meta128 thrift.ResponseMeta
  _meta128, _err = p.Client_().Call(ctx, "getContacts", &_args127, &_result129)
  p.SetLastResponseMeta_(_meta128)
  if _err != nil {
    return
  }
  switch {
  case _result129.E!= nil:
    return _r, _result129.E
  }

  return _result129.GetSuccess(), nil
}

// Parameters:
//  - GetFollowersRequest
func (p *TalkServiceClient) GetFollowers(ctx context.Context, getFollowersRequest *GetFollowersRequest) (_r *GetFollowersResponse, _err error) {
  var _args130 TalkServiceGetFollowersArgs
  _args130.GetFollowersRequest = getFollowersRequest
  var _result132 TalkServiceGetFollowersResult
  var _meta131 thrift.ResponseMeta
  _meta131, _err = p.Client_().Call(ctx, "getFollowers", &_args130, &_result132)
  p.SetLastResponseMeta_(_meta131)
  if _err != nil {
    return
  }
  switch {
  case _result132.E!= nil:
    return _r, _result132.E
  }

  return _result132.GetSuccess(), nil
}

// Parameters:
//  - ChatMid
func (p *TalkServiceClient) GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (_r map[string]*E2EEPublicKey, _err error) {
  var _args133 TalkServiceGetLastE2EEPublicKeysArgs
  _args133.ChatMid = chatMid
  var _result135 TalkServiceGetLastE2EEPublicKeysResult
  var _meta134 thrift.ResponseMeta
  _meta134, _err = p.Client_().Call(ctx, "getLastE2EEPublicKeys", &_args133, &_result135)
  p.SetLastResponseMeta_(_meta134)
  if _err != nil {
    return
  }
  switch {
  case _result135.E!= nil:
    return _r, _result135.E
  }

  return _result135.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
func (p *TalkServiceClient) LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (_err error) {
  var _args136 TalkServiceLeaveRoomArgs
  _args136.ReqSeq = reqSeq
  _args136.RoomId = roomId
  var _result138 TalkServiceLeaveRoomResult
  var _meta137 thrift.ResponseMeta
  _meta137, _err = p.Client_().Call(ctx, "leaveRoom", &_args136, &_result138)
  p.SetLastResponseMeta_(_meta137)
  if _err != nil {
    return
  }
  switch {
  case _result138.E!= nil:
    return _result138.E
  }

  return nil
}

// Parameters:
//  - UdidHash
//  - ApplicationTypeWithExtensions
func (p *TalkServiceClient) NotifyRegistrationComplete(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (_err error) {
  var _args139 TalkServiceNotifyRegistrationCompleteArgs
  _args139.UdidHash = udidHash
  _args139.ApplicationTypeWithExtensions = applicationTypeWithExtensions
  var _result141 TalkServiceNotifyRegistrationCompleteResult
  var _meta140 thrift.ResponseMeta
  _meta140, _err = p.Client_().Call(ctx, "notifyRegistrationComplete", &_args139, &_result141)
  p.SetLastResponseMeta_(_meta140)
  if _err != nil {
    return
  }
  switch {
  case _result141.E!= nil:
    return _result141.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ChatRoomMid
//  - AnnouncementSeq
func (p *TalkServiceClient) RemoveChatRoomAnnouncement(ctx context.Context, reqSeq int32, chatRoomMid string, announcementSeq int64) (_err error) {
  var _args142 TalkServiceRemoveChatRoomAnnouncementArgs
  _args142.ReqSeq = reqSeq
  _args142.ChatRoomMid = chatRoomMid
  _args142.AnnouncementSeq = announcementSeq
  var _result144 TalkServiceRemoveChatRoomAnnouncementResult
  var _meta143 thrift.ResponseMeta
  _meta143, _err = p.Client_().Call(ctx, "removeChatRoomAnnouncement", &_args142, &_result144)
  p.SetLastResponseMeta_(_meta143)
  if _err != nil {
    return
  }
  switch {
  case _result144.E!= nil:
    return _result144.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId []byte) (_err error) {
  var _args145 TalkServiceSendChatRemovedArgs
  _args145.Seq = seq
  _args145.ChatMid = chatMid
  _args145.LastMessageId = lastMessageId
  _args145.SessionId = sessionId
  var _result147 TalkServiceSendChatRemovedResult
  var _meta146 thrift.ResponseMeta
  _meta146, _err = p.Client_().Call(ctx, "sendChatRemoved", &_args145, &_result147)
  p.SetLastResponseMeta_(_meta146)
  if _err != nil {
    return
  }
  switch {
  case _result147.E!= nil:
    return _result147.E
  }

  return nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *TalkServiceClient) UpdatePassword(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error) {
  var _args148 TalkServiceUpdatePasswordArgs
  _args148.AuthSessionId = authSessionId
  _args148.Request = request
  var _result150 TalkServiceUpdatePasswordResult
  var _meta149 thrift.ResponseMeta
  _meta149, _err = p.Client_().Call(ctx, "updatePassword", &_args148, &_result150)
  p.SetLastResponseMeta_(_meta149)
  if _err != nil {
    return
  }
  switch {
  case _result150.E!= nil:
    return _r, _result150.E
  }

  return _result150.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
//  - Reference
func (p *TalkServiceClient) UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (_err error) {
  var _args151 TalkServiceUnblockContactArgs
  _args151.ReqSeq = reqSeq
  _args151.ID = id
  _args151.Reference = reference
  var _result153 TalkServiceUnblockContactResult
  var _meta152 thrift.ResponseMeta
  _meta152, _err = p.Client_().Call(ctx, "unblockContact", &_args151, &_result153)
  p.SetLastResponseMeta_(_meta152)
  if _err != nil {
    return
  }
  switch {
  case _result153.E!= nil:
    return _result153.E
  }

  return nil
}

// Parameters:
//  - IdentityCredential
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) VerifyIdentityCredentialWithResult_(ctx context.Context, identityCredential *IdentityCredential, migrationPincodeSessionId string) (_r *UserAuthStatus, _err error) {
  var _args154 TalkServiceVerifyIdentityCredentialWithResultArgs
  _args154.IdentityCredential = identityCredential
  _args154.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result156 TalkServiceVerifyIdentityCredentialWithResultResult
  var _meta155 thrift.ResponseMeta
  _meta155, _err = p.Client_().Call(ctx, "verifyIdentityCredentialWithResult", &_args154, &_result156)
  p.SetLastResponseMeta_(_meta155)
  if _err != nil {
    return
  }
  switch {
  case _result156.E!= nil:
    return _r, _result156.E
  }

  return _result156.GetSuccess(), nil
}

// Parameters:
//  - DataTypes
func (p *TalkServiceClient) RequestCleanupUserProvidedData(ctx context.Context, dataTypes []DataTypes) (_err error) {
  var _args157 TalkServiceRequestCleanupUserProvidedDataArgs
  _args157.DataTypes = dataTypes
  var _result159 TalkServiceRequestCleanupUserProvidedDataResult
  var _meta158 thrift.ResponseMeta
  _meta158, _err = p.Client_().Call(ctx, "requestCleanupUserProvidedData", &_args157, &_result159)
  p.SetLastResponseMeta_(_meta158)
  if _err != nil {
    return
  }
  switch {
  case _result159.E!= nil:
    return _result159.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetBuddyStatusBarV2(ctx context.Context, request *GetBuddyStatusBarV2Request) (_r *BuddyStatusBar, _err error) {
  var _args160 TalkServiceGetBuddyStatusBarV2Args
  _args160.Request = request
  var _result162 TalkServiceGetBuddyStatusBarV2Result
  var _meta161 thrift.ResponseMeta
  _meta161, _err = p.Client_().Call(ctx, "getBuddyStatusBarV2", &_args160, &_result162)
  p.SetLastResponseMeta_(_meta161)
  if _err != nil {
    return
  }
  switch {
  case _result162.E!= nil:
    return _r, _result162.E
  }

  return _result162.GetSuccess(), nil
}

// Parameters:
//  - Start
//  - Size
//  - Language
func (p *TalkServiceClient) GetPaidCallHistory(ctx context.Context, start int64, size int32, language string) (_r *PaidCallHistoryResult_, _err error) {
  var _args163 TalkServiceGetPaidCallHistoryArgs
  _args163.Start = start
  _args163.Size = size
  _args163.Language = language
  var _result165 TalkServiceGetPaidCallHistoryResult
  var _meta164 thrift.ResponseMeta
  _meta164, _err = p.Client_().Call(ctx, "getPaidCallHistory", &_args163, &_result165)
  p.SetLastResponseMeta_(_meta164)
  if _err != nil {
    return
  }
  switch {
  case _result165.E!= nil:
    return _r, _result165.E
  }

  return _result165.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockContact(ctx context.Context, reqSeq int32, id string) (_err error) {
  var _args166 TalkServiceBlockContactArgs
  _args166.ReqSeq = reqSeq
  _args166.ID = id
  var _result168 TalkServiceBlockContactResult
  var _meta167 thrift.ResponseMeta
  _meta167, _err = p.Client_().Call(ctx, "blockContact", &_args166, &_result168)
  p.SetLastResponseMeta_(_meta167)
  if _err != nil {
    return
  }
  switch {
  case _result168.E!= nil:
    return _result168.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - Name
//  - ContactIds
func (p *TalkServiceClient) CreateGroupV2(ctx context.Context, seq int32, name string, contactIds []string) (_r *Group, _err error) {
  var _args169 TalkServiceCreateGroupV2Args
  _args169.Seq = seq
  _args169.Name = name
  _args169.ContactIds = contactIds
  var _result171 TalkServiceCreateGroupV2Result
  var _meta170 thrift.ResponseMeta
  _meta170, _err = p.Client_().Call(ctx, "createGroupV2", &_args169, &_result171)
  p.SetLastResponseMeta_(_meta170)
  if _err != nil {
    return
  }
  switch {
  case _result171.E!= nil:
    return _r, _result171.E
  }

  return _result171.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Phones
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string, reference string) (_r map[string]*Contact, _err error) {
  var _args172 TalkServiceFindAndAddContactsByPhoneArgs
  _args172.ReqSeq = reqSeq
  _args172.Phones = phones
  _args172.Reference = reference
  var _result174 TalkServiceFindAndAddContactsByPhoneResult
  var _meta173 thrift.ResponseMeta
  _meta173, _err = p.Client_().Call(ctx, "findAndAddContactsByPhone", &_args172, &_result174)
  p.SetLastResponseMeta_(_meta173)
  if _err != nil {
    return
  }
  switch {
  case _result174.E!= nil:
    return _r, _result174.E
  }

  return _result174.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetAcceptedProximityMatches(ctx context.Context, sessionId string) (_r []string, _err error) {
  var _args175 TalkServiceGetAcceptedProximityMatchesArgs
  _args175.SessionId = sessionId
  var _result177 TalkServiceGetAcceptedProximityMatchesResult
  var _meta176 thrift.ResponseMeta
  _meta176, _err = p.Client_().Call(ctx, "getAcceptedProximityMatches", &_args175, &_result177)
  p.SetLastResponseMeta_(_meta176)
  if _err != nil {
    return
  }
  switch {
  case _result177.E!= nil:
    return _r, _result177.E
  }

  return _result177.GetSuccess(), nil
}

// Parameters:
//  - ChatRoomMids
//  - SyncReason
func (p *TalkServiceClient) GetChatRoomAnnouncementsBulk(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (_r map[string][]*ChatRoomAnnouncement, _err error) {
  var _args178 TalkServiceGetChatRoomAnnouncementsBulkArgs
  _args178.ChatRoomMids = chatRoomMids
  _args178.SyncReason = syncReason
  var _result180 TalkServiceGetChatRoomAnnouncementsBulkResult
  var _meta179 thrift.ResponseMeta
  _meta179, _err = p.Client_().Call(ctx, "getChatRoomAnnouncementsBulk", &_args178, &_result180)
  p.SetLastResponseMeta_(_meta179)
  if _err != nil {
    return
  }
  switch {
  case _result180.E!= nil:
    return _r, _result180.E
  }

  return _result180.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args181 TalkServiceGetRecommendationIdsArgs
  _args181.SyncReason = syncReason
  var _result183 TalkServiceGetRecommendationIdsResult
  var _meta182 thrift.ResponseMeta
  _meta182, _err = p.Client_().Call(ctx, "getRecommendationIds", &_args181, &_result183)
  p.SetLastResponseMeta_(_meta182)
  if _err != nil {
    return
  }
  switch {
  case _result183.E!= nil:
    return _r, _result183.E
  }

  return _result183.GetSuccess(), nil
}

// Parameters:
//  - CountryGroup
func (p *TalkServiceClient) GetCountries(ctx context.Context, countryGroup CountryGroup) (_r []string, _err error) {
  var _args184 TalkServiceGetCountriesArgs
  _args184.CountryGroup = countryGroup
  var _result186 TalkServiceGetCountriesResult
  var _meta185 thrift.ResponseMeta
  _meta185, _err = p.Client_().Call(ctx, "getCountries", &_args184, &_result186)
  p.SetLastResponseMeta_(_meta185)
  if _err != nil {
    return
  }
  switch {
  case _result186.E!= nil:
    return _r, _result186.E
  }

  return _result186.GetSuccess(), nil
}

// Parameters:
//  - GetFollowingsRequest
func (p *TalkServiceClient) GetFollowings(ctx context.Context, getFollowingsRequest *GetFollowingsRequest) (_r *GetFollowingsResponse, _err error) {
  var _args187 TalkServiceGetFollowingsArgs
  _args187.GetFollowingsRequest = getFollowingsRequest
  var _result189 TalkServiceGetFollowingsResult
  var _meta188 thrift.ResponseMeta
  _meta188, _err = p.Client_().Call(ctx, "getFollowings", &_args187, &_result189)
  p.SetLastResponseMeta_(_meta188)
  if _err != nil {
    return
  }
  switch {
  case _result189.E!= nil:
    return _r, _result189.E
  }

  return _result189.GetSuccess(), nil
}

func (p *TalkServiceClient) GetLastOpRevision(ctx context.Context) (_r int64, _err error) {
  var _args190 TalkServiceGetLastOpRevisionArgs
  var _result192 TalkServiceGetLastOpRevisionResult
  var _meta191 thrift.ResponseMeta
  _meta191, _err = p.Client_().Call(ctx, "getLastOpRevision", &_args190, &_result192)
  p.SetLastResponseMeta_(_meta191)
  if _err != nil {
    return
  }
  switch {
  case _result192.E!= nil:
    return _r, _result192.E
  }

  return _result192.GetSuccess(), nil
}

func (p *TalkServiceClient) GetRingbackTone(ctx context.Context) (_r int64, _err error) {
  var _args193 TalkServiceGetRingbackToneArgs
  var _result195 TalkServiceGetRingbackToneResult
  var _meta194 thrift.ResponseMeta
  _meta194, _err = p.Client_().Call(ctx, "getRingbackTone", &_args193, &_result195)
  p.SetLastResponseMeta_(_meta194)
  if _err != nil {
    return
  }
  switch {
  case _result195.E!= nil:
    return _r, _result195.E
  }

  return _result195.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithPhoneNumber(ctx context.Context, sessionId string, migrationPincodeSessionId string) (_r *RegisterWithPhoneNumberResult_, _err error) {
  var _args196 TalkServiceRegisterWithPhoneNumberArgs
  _args196.SessionId = sessionId
  _args196.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result198 TalkServiceRegisterWithPhoneNumberResult
  var _meta197 thrift.ResponseMeta
  _meta197, _err = p.Client_().Call(ctx, "registerWithPhoneNumber", &_args196, &_result198)
  p.SetLastResponseMeta_(_meta197)
  if _err != nil {
    return
  }
  switch {
  case _result198.E!= nil:
    return _r, _result198.E
  }

  return _result198.GetSuccess(), nil
}

// Parameters:
//  - SyncOpRevision
//  - Category
//  - Report
func (p *TalkServiceClient) Report(ctx context.Context, syncOpRevision int64, category ReportCategory, report string) (_err error) {
  var _args199 TalkServiceReportArgs
  _args199.SyncOpRevision = syncOpRevision
  _args199.Category = category
  _args199.Report = report
  var _result201 TalkServiceReportResult
  var _meta200 thrift.ResponseMeta
  _meta200, _err = p.Client_().Call(ctx, "report", &_args199, &_result201)
  p.SetLastResponseMeta_(_meta200)
  if _err != nil {
    return
  }
  switch {
  case _result201.E!= nil:
    return _result201.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error) {
  var _args202 TalkServiceUnblockRecommendationArgs
  _args202.ReqSeq = reqSeq
  _args202.ID = id
  var _result204 TalkServiceUnblockRecommendationResult
  var _meta203 thrift.ResponseMeta
  _meta203, _err = p.Client_().Call(ctx, "unblockRecommendation", &_args202, &_result204)
  p.SetLastResponseMeta_(_meta203)
  if _err != nil {
    return
  }
  switch {
  case _result204.E!= nil:
    return _result204.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Group
func (p *TalkServiceClient) UpdateGroup(ctx context.Context, reqSeq int32, group *Group) (_err error) {
  var _args205 TalkServiceUpdateGroupArgs
  _args205.ReqSeq = reqSeq
  _args205.Group = group
  var _result207 TalkServiceUpdateGroupResult
  var _meta206 thrift.ResponseMeta
  _meta206, _err = p.Client_().Call(ctx, "updateGroup", &_args205, &_result207)
  p.SetLastResponseMeta_(_meta206)
  if _err != nil {
    return
  }
  switch {
  case _result207.E!= nil:
    return _result207.E
  }

  return nil
}

// Parameters:
//  - Language
//  - Country
//  - Query
//  - FromIndex
//  - Count
//  - RequestSource
func (p *TalkServiceClient) FindBuddyContactsByQuery(ctx context.Context, language string, country string, query string, fromIndex int32, count int32, requestSource RequestsSource) (_r []*BuddySearchResult_, _err error) {
  var _args208 TalkServiceFindBuddyContactsByQueryArgs
  _args208.Language = language
  _args208.Country = country
  _args208.Query = query
  _args208.FromIndex = fromIndex
  _args208.Count = count
  _args208.RequestSource = requestSource
  var _result210 TalkServiceFindBuddyContactsByQueryResult
  var _meta209 thrift.ResponseMeta
  _meta209, _err = p.Client_().Call(ctx, "findBuddyContactsByQuery", &_args208, &_result210)
  p.SetLastResponseMeta_(_meta209)
  if _err != nil {
    return
  }
  switch {
  case _result210.E!= nil:
    return _r, _result210.E
  }

  return _result210.GetSuccess(), nil
}

// Parameters:
//  - Language
func (p *TalkServiceClient) GetPaidCallMetadata(ctx context.Context, language string) (_r *PaidCallMetadataResult_, _err error) {
  var _args211 TalkServiceGetPaidCallMetadataArgs
  _args211.Language = language
  var _result213 TalkServiceGetPaidCallMetadataResult
  var _meta212 thrift.ResponseMeta
  _meta212, _err = p.Client_().Call(ctx, "getPaidCallMetadata", &_args211, &_result213)
  p.SetLastResponseMeta_(_meta212)
  if _err != nil {
    return
  }
  switch {
  case _result213.E!= nil:
    return _r, _result213.E
  }

  return _result213.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error) {
  var _args214 TalkServiceBlockRecommendationArgs
  _args214.ReqSeq = reqSeq
  _args214.ID = id
  var _result216 TalkServiceBlockRecommendationResult
  var _meta215 thrift.ResponseMeta
  _meta215, _err = p.Client_().Call(ctx, "blockRecommendation", &_args214, &_result216)
  p.SetLastResponseMeta_(_meta215)
  if _err != nil {
    return
  }
  switch {
  case _result216.E!= nil:
    return _result216.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string, reference string) (_r map[string]*Contact, _err error) {
  var _args217 TalkServiceFindAndAddContactsByUseridArgs
  _args217.ReqSeq = reqSeq
  _args217.SearchId = searchId
  _args217.Reference = reference
  var _result219 TalkServiceFindAndAddContactsByUseridResult
  var _meta218 thrift.ResponseMeta
  _meta218, _err = p.Client_().Call(ctx, "findAndAddContactsByUserid", &_args217, &_result219)
  p.SetLastResponseMeta_(_meta218)
  if _err != nil {
    return
  }
  switch {
  case _result219.E!= nil:
    return _r, _result219.E
  }

  return _result219.GetSuccess(), nil
}

// Parameters:
//  - Request
//  - SyncReason
func (p *TalkServiceClient) GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (_r *GetAllChatMidsResponse, _err error) {
  var _args220 TalkServiceGetAllChatMidsArgs
  _args220.Request = request
  _args220.SyncReason = syncReason
  var _result222 TalkServiceGetAllChatMidsResult
  var _meta221 thrift.ResponseMeta
  _meta221, _err = p.Client_().Call(ctx, "getAllChatMids", &_args220, &_result222)
  p.SetLastResponseMeta_(_meta221)
  if _err != nil {
    return
  }
  switch {
  case _result222.E!= nil:
    return _r, _result222.E
  }

  return _result222.GetSuccess(), nil
}

// Parameters:
//  - ChatRoomMids
func (p *TalkServiceClient) GetChatRoomAnnouncements(ctx context.Context, chatRoomMids string) (_r []*ChatRoomAnnouncement, _err error) {
  var _args223 TalkServiceGetChatRoomAnnouncementsArgs
  _args223.ChatRoomMids = chatRoomMids
  var _result225 TalkServiceGetChatRoomAnnouncementsResult
  var _meta224 thrift.ResponseMeta
  _meta224, _err = p.Client_().Call(ctx, "getChatRoomAnnouncements", &_args223, &_result225)
  p.SetLastResponseMeta_(_meta224)
  if _err != nil {
    return
  }
  switch {
  case _result225.E!= nil:
    return _r, _result225.E
  }

  return _result225.GetSuccess(), nil
}

func (p *TalkServiceClient) GetCountryWithRequestIp(ctx context.Context) (_r string, _err error) {
  var _args226 TalkServiceGetCountryWithRequestIpArgs
  var _result228 TalkServiceGetCountryWithRequestIpResult
  var _meta227 thrift.ResponseMeta
  _meta227, _err = p.Client_().Call(ctx, "getCountryWithRequestIp", &_args226, &_result228)
  p.SetLastResponseMeta_(_meta227)
  if _err != nil {
    return
  }
  switch {
  case _result228.E!= nil:
    return _r, _result228.E
  }

  return _result228.GetSuccess(), nil
}

// Parameters:
//  - Direction
//  - LastSeenSeqId
func (p *TalkServiceClient) GetFriendRequests(ctx context.Context, direction Direction, lastSeenSeqId int64) (_r []*FriendRequest, _err error) {
  var _args229 TalkServiceGetFriendRequestsArgs
  _args229.Direction = direction
  _args229.LastSeenSeqId = lastSeenSeqId
  var _result231 TalkServiceGetFriendRequestsResult
  var _meta230 thrift.ResponseMeta
  _meta230, _err = p.Client_().Call(ctx, "getFriendRequests", &_args229, &_result231)
  p.SetLastResponseMeta_(_meta230)
  if _err != nil {
    return
  }
  switch {
  case _result231.E!= nil:
    return _r, _result231.E
  }

  return _result231.GetSuccess(), nil
}

func (p *TalkServiceClient) GetRingtone(ctx context.Context) (_r *Ringtone, _err error) {
  var _args232 TalkServiceGetRingtoneArgs
  var _result234 TalkServiceGetRingtoneResult
  var _meta233 thrift.ResponseMeta
  _meta233, _err = p.Client_().Call(ctx, "getRingtone", &_args232, &_result234)
  p.SetLastResponseMeta_(_meta233)
  if _err != nil {
    return
  }
  switch {
  case _result234.E!= nil:
    return _r, _result234.E
  }

  return _result234.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Profile
func (p *TalkServiceClient) UpdateProfile(ctx context.Context, reqSeq int32, profile *Profile) (_err error) {
  var _args235 TalkServiceUpdateProfileArgs
  _args235.ReqSeq = reqSeq
  _args235.Profile = profile
  var _result237 TalkServiceUpdateProfileResult
  var _meta236 thrift.ResponseMeta
  _meta236, _err = p.Client_().Call(ctx, "updateProfile", &_args235, &_result237)
  p.SetLastResponseMeta_(_meta236)
  if _err != nil {
    return
  }
  switch {
  case _result237.E!= nil:
    return _result237.E
  }

  return nil
}

// Parameters:
//  - LastRev
//  - Badge
func (p *TalkServiceClient) NotifySleep(ctx context.Context, lastRev int64, badge int32) (_err error) {
  var _args238 TalkServiceNotifySleepArgs
  _args238.LastRev = lastRev
  _args238.Badge = badge
  var _result240 TalkServiceNotifySleepResult
  var _meta239 thrift.ResponseMeta
  _meta239, _err = p.Client_().Call(ctx, "notifySleep", &_args238, &_result240)
  p.SetLastResponseMeta_(_meta239)
  if _err != nil {
    return
  }
  switch {
  case _result240.E!= nil:
    return _result240.E
  }

  return nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithSnsIdAndIdentityCredential(ctx context.Context, snsIdType SnSIdTyoe, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo, migrationPincodeSessionId string) (_r string, _err error) {
  var _args241 TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs
  _args241.SnsIdType = snsIdType
  _args241.SnsAccessToken = snsAccessToken
  _args241.IdentityCredential = identityCredential
  _args241.Region = region
  _args241.UdidHash = udidHash
  _args241.DeviceInfo = deviceInfo
  _args241.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result243 TalkServiceRegisterWithSnsIdAndIdentityCredentialResult
  var _meta242 thrift.ResponseMeta
  _meta242, _err = p.Client_().Call(ctx, "registerWithSnsIdAndIdentityCredential", &_args241, &_result243)
  p.SetLastResponseMeta_(_meta242)
  if _err != nil {
    return
  }
  switch {
  case _result243.E!= nil:
    return _r, _result243.E
  }

  return _result243.GetSuccess(), nil
}

// Parameters:
//  - RemoveFollowerRequest
func (p *TalkServiceClient) RemoveFollower(ctx context.Context, removeFollowerRequest *RemoveFollowerRequest) (_err error) {
  var _args244 TalkServiceRemoveFollowerArgs
  _args244.RemoveFollowerRequest = removeFollowerRequest
  var _result246 TalkServiceRemoveFollowerResult
  var _meta245 thrift.ResponseMeta
  _meta245, _err = p.Client_().Call(ctx, "removeFollower", &_args244, &_result246)
  p.SetLastResponseMeta_(_meta245)
  if _err != nil {
    return
  }
  switch {
  case _result246.E!= nil:
    return _result246.E
  }

  return nil
}

// Parameters:
//  - Provider
//  - Identifier
//  - Locale
func (p *TalkServiceClient) RequestAccountPasswordReset(ctx context.Context, provider Provider, identifier string, locale string) (_err error) {
  var _args247 TalkServiceRequestAccountPasswordResetArgs
  _args247.Provider = provider
  _args247.Identifier = identifier
  _args247.Locale = locale
  var _result249 TalkServiceRequestAccountPasswordResetResult
  var _meta248 thrift.ResponseMeta
  _meta248, _err = p.Client_().Call(ctx, "requestAccountPasswordReset", &_args247, &_result249)
  p.SetLastResponseMeta_(_meta248)
  if _err != nil {
    return
  }
  switch {
  case _result249.E!= nil:
    return _result249.E
  }

  return nil
}

// Parameters:
//  - Text
func (p *TalkServiceClient) SendEchoPush(ctx context.Context, text string) (_err error) {
  var _args250 TalkServiceSendEchoPushArgs
  _args250.Text = text
  var _result252 TalkServiceSendEchoPushResult
  var _meta251 thrift.ResponseMeta
  _meta251, _err = p.Client_().Call(ctx, "sendEchoPush", &_args250, &_result252)
  p.SetLastResponseMeta_(_meta251)
  if _err != nil {
    return
  }
  switch {
  case _result252.E!= nil:
    return _result252.E
  }

  return nil
}

// Parameters:
//  - UnfollowRequest
func (p *TalkServiceClient) Unfollow(ctx context.Context, unfollowRequest *UnfollowRequest) (_err error) {
  var _args253 TalkServiceUnfollowArgs
  _args253.UnfollowRequest = unfollowRequest
  var _result255 TalkServiceUnfollowResult
  var _meta254 thrift.ResponseMeta
  _meta254, _err = p.Client_().Call(ctx, "unfollow", &_args253, &_result255)
  p.SetLastResponseMeta_(_meta254)
  if _err != nil {
    return
  }
  switch {
  case _result255.E!= nil:
    return _result255.E
  }

  return nil
}

// Parameters:
//  - ChatMid
//  - MemberMids
//  - MediaType
func (p *TalkServiceClient) InviteIntoGroupCall(ctx context.Context, chatMid string, memberMids []string, mediaType MediaType) (_err error) {
  var _args256 TalkServiceInviteIntoGroupCallArgs
  _args256.ChatMid = chatMid
  _args256.MemberMids = memberMids
  _args256.MediaType = mediaType
  var _result258 TalkServiceInviteIntoGroupCallResult
  var _meta257 thrift.ResponseMeta
  _meta257, _err = p.Client_().Call(ctx, "inviteIntoGroupCall", &_args256, &_result258)
  p.SetLastResponseMeta_(_meta257)
  if _err != nil {
    return
  }
  switch {
  case _result258.E!= nil:
    return _result258.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (_r *CancelChatInvitationResponse, _err error) {
  var _args259 TalkServiceCancelChatInvitationArgs
  _args259.Request = request
  var _result261 TalkServiceCancelChatInvitationResult
  var _meta260 thrift.ResponseMeta
  _meta260, _err = p.Client_().Call(ctx, "cancelChatInvitation", &_args259, &_result261)
  p.SetLastResponseMeta_(_meta260)
  if _err != nil {
    return
  }
  switch {
  case _result261.E!= nil:
    return _r, _result261.E
  }

  return _result261.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) FindChatByTicket(ctx context.Context, request *FindChatByTicketRequest) (_r *FindChatByTicketResponse, _err error) {
  var _args262 TalkServiceFindChatByTicketArgs
  _args262.Request = request
  var _result264 TalkServiceFindChatByTicketResult
  var _meta263 thrift.ResponseMeta
  _meta263, _err = p.Client_().Call(ctx, "findChatByTicket", &_args262, &_result264)
  p.SetLastResponseMeta_(_meta263)
  if _err != nil {
    return
  }
  switch {
  case _result264.E!= nil:
    return _r, _result264.E
  }

  return _result264.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetAllContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args265 TalkServiceGetAllContactIdsArgs
  _args265.SyncReason = syncReason
  var _result267 TalkServiceGetAllContactIdsResult
  var _meta266 thrift.ResponseMeta
  _meta266, _err = p.Client_().Call(ctx, "getAllContactIds", &_args265, &_result267)
  p.SetLastResponseMeta_(_meta266)
  if _err != nil {
    return
  }
  switch {
  case _result267.E!= nil:
    return _r, _result267.E
  }

  return _result267.GetSuccess(), nil
}

// Parameters:
//  - ChatRoomMids
//  - SyncReason
func (p *TalkServiceClient) GetChatRoomBGMs(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (_r map[string]*ChatRoomBGM, _err error) {
  var _args268 TalkServiceGetChatRoomBGMsArgs
  _args268.ChatRoomMids = chatRoomMids
  _args268.SyncReason = syncReason
  var _result270 TalkServiceGetChatRoomBGMsResult
  var _meta269 thrift.ResponseMeta
  _meta269, _err = p.Client_().Call(ctx, "getChatRoomBGMs", &_args268, &_result270)
  p.SetLastResponseMeta_(_meta269)
  if _err != nil {
    return
  }
  switch {
  case _result270.E!= nil:
    return _r, _result270.E
  }

  return _result270.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
func (p *TalkServiceClient) GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (_r *E2EEGroupSharedKey, _err error) {
  var _args271 TalkServiceGetE2EEGroupSharedKeyArgs
  _args271.KeyVersion = keyVersion
  _args271.ChatMid = chatMid
  _args271.GroupKeyId = groupKeyId
  var _result273 TalkServiceGetE2EEGroupSharedKeyResult
  var _meta272 thrift.ResponseMeta
  _meta272, _err = p.Client_().Call(ctx, "getE2EEGroupSharedKey", &_args271, &_result273)
  p.SetLastResponseMeta_(_meta272)
  if _err != nil {
    return
  }
  switch {
  case _result273.E!= nil:
    return _r, _result273.E
  }

  return _result273.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetGroupIdsInvited(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args274 TalkServiceGetGroupIdsInvitedArgs
  _args274.SyncReason = syncReason
  var _result276 TalkServiceGetGroupIdsInvitedResult
  var _meta275 thrift.ResponseMeta
  _meta275, _err = p.Client_().Call(ctx, "getGroupIdsInvited", &_args274, &_result276)
  p.SetLastResponseMeta_(_meta275)
  if _err != nil {
    return
  }
  switch {
  case _result276.E!= nil:
    return _r, _result276.E
  }

  return _result276.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetProfile(ctx context.Context, syncReason SyncReason) (_r *Profile, _err error) {
  var _args277 TalkServiceGetProfileArgs
  _args277.SyncReason = syncReason
  var _result279 TalkServiceGetProfileResult
  var _meta278 thrift.ResponseMeta
  _meta278, _err = p.Client_().Call(ctx, "getProfile", &_args277, &_result279)
  p.SetLastResponseMeta_(_meta278)
  if _err != nil {
    return
  }
  switch {
  case _result279.E!= nil:
    return _r, _result279.E
  }

  return _result279.GetSuccess(), nil
}

// Parameters:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
func (p *TalkServiceClient) NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (_err error) {
  var _args280 TalkServiceNotifyUpdatedArgs
  _args280.LastRev = lastRev
  _args280.DeviceInfo = deviceInfo
  _args280.UdidHash = udidHash
  _args280.OldUdidHash = oldUdidHash
  var _result282 TalkServiceNotifyUpdatedResult
  var _meta281 thrift.ResponseMeta
  _meta281, _err = p.Client_().Call(ctx, "notifyUpdated", &_args280, &_result282)
  p.SetLastResponseMeta_(_meta281)
  if _err != nil {
    return
  }
  switch {
  case _result282.E!= nil:
    return _result282.E
  }

  return nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Mid
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithSnsId(ctx context.Context, snsIdType SnSIdTyoe, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string, migrationPincodeSessionId string) (_r *RegisterWithSnsIdResult_, _err error) {
  var _args283 TalkServiceRegisterWithSnsIdArgs
  _args283.SnsIdType = snsIdType
  _args283.SnsAccessToken = snsAccessToken
  _args283.Region = region
  _args283.UdidHash = udidHash
  _args283.DeviceInfo = deviceInfo
  _args283.Mid = mid
  _args283.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result285 TalkServiceRegisterWithSnsIdResult
  var _meta284 thrift.ResponseMeta
  _meta284, _err = p.Client_().Call(ctx, "registerWithSnsId", &_args283, &_result285)
  p.SetLastResponseMeta_(_meta284)
  if _err != nil {
    return
  }
  switch {
  case _result285.E!= nil:
    return _r, _result285.E
  }

  return _result285.GetSuccess(), nil
}

// Parameters:
//  - Direction
//  - MidOrEMid
func (p *TalkServiceClient) RemoveFriendRequest(ctx context.Context, direction Direction, midOrEMid string) (_err error) {
  var _args286 TalkServiceRemoveFriendRequestArgs
  _args286.Direction = direction
  _args286.MidOrEMid = midOrEMid
  var _result288 TalkServiceRemoveFriendRequestResult
  var _meta287 thrift.ResponseMeta
  _meta287, _err = p.Client_().Call(ctx, "removeFriendRequest", &_args286, &_result288)
  p.SetLastResponseMeta_(_meta287)
  if _err != nil {
    return
  }
  switch {
  case _result288.E!= nil:
    return _result288.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) OpenAuthSession(ctx context.Context, request *AuthSessionRequest) (_r string, _err error) {
  var _args289 TalkServiceOpenAuthSessionArgs
  _args289.Request = request
  var _result291 TalkServiceOpenAuthSessionResult
  var _meta290 thrift.ResponseMeta
  _meta290, _err = p.Client_().Call(ctx, "openAuthSession", &_args289, &_result291)
  p.SetLastResponseMeta_(_meta290)
  if _err != nil {
    return
  }
  switch {
  case _result291.E!= nil:
    return _r, _result291.E
  }

  return _result291.GetSuccess(), nil
}

// Parameters:
//  - Verifier
//  - PinCode
//  - ErrorCode
//  - PublicKey
//  - EncryptedKeyChain
//  - HashKeyChain
func (p *TalkServiceClient) VerifyQrcodeWithE2EE(ctx context.Context, verifier string, pinCode string, errorCode ErrorCode, publicKey *E2EEPublicKey, encryptedKeyChain []byte, hashKeyChain []byte) (_r string, _err error) {
  var _args292 TalkServiceVerifyQrcodeWithE2EEArgs
  _args292.Verifier = verifier
  _args292.PinCode = pinCode
  _args292.ErrorCode = errorCode
  _args292.PublicKey = publicKey
  _args292.EncryptedKeyChain = encryptedKeyChain
  _args292.HashKeyChain = hashKeyChain
  var _result294 TalkServiceVerifyQrcodeWithE2EEResult
  var _meta293 thrift.ResponseMeta
  _meta293, _err = p.Client_().Call(ctx, "verifyQrcodeWithE2EE", &_args292, &_result294)
  p.SetLastResponseMeta_(_meta293)
  if _err != nil {
    return
  }
  switch {
  case _result294.E!= nil:
    return _r, _result294.E
  }

  return _result294.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetBalance(ctx context.Context, request *GetBalanceRequest) (_r *GetBalanceResponse, _err error) {
  var _args295 TalkServiceGetBalanceArgs
  _args295.Request = request
  var _result297 TalkServiceGetBalanceResult
  var _meta296 thrift.ResponseMeta
  _meta296, _err = p.Client_().Call(ctx, "getBalance", &_args295, &_result297)
  p.SetLastResponseMeta_(_meta296)
  if _err != nil {
    return
  }
  switch {
  case _result297.E!= nil:
    return _r, _result297.E
  }

  return _result297.GetSuccess(), nil
}

func (p *TalkServiceClient) UnregisterUserAndDevice(ctx context.Context) (_r string, _err error) {
  var _args298 TalkServiceUnregisterUserAndDeviceArgs
  var _result300 TalkServiceUnregisterUserAndDeviceResult
  var _meta299 thrift.ResponseMeta
  _meta299, _err = p.Client_().Call(ctx, "unregisterUserAndDevice", &_args298, &_result300)
  p.SetLastResponseMeta_(_meta299)
  if _err != nil {
    return
  }
  switch {
  case _result300.E!= nil:
    return _r, _result300.E
  }

  return _result300.GetSuccess(), nil
}

// Parameters:
//  - Type
//  - Token
func (p *TalkServiceClient) UpdateNotificationToken(ctx context.Context, type_a1 UpdateNotificationType, token string) (_err error) {
  var _args301 TalkServiceUpdateNotificationTokenArgs
  _args301.Type = type_a1
  _args301.Token = token
  var _result303 TalkServiceUpdateNotificationTokenResult
  var _meta302 thrift.ResponseMeta
  _meta302, _err = p.Client_().Call(ctx, "updateNotificationToken", &_args301, &_result303)
  p.SetLastResponseMeta_(_meta302)
  if _err != nil {
    return
  }
  switch {
  case _result303.E!= nil:
    return _result303.E
  }

  return nil
}

// Parameters:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
func (p *TalkServiceClient) VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (_r *PhoneVerificationResult_, _err error) {
  var _args304 TalkServiceVerifyPhoneNumberArgs
  _args304.SessionId = sessionId
  _args304.PinCode = pinCode
  _args304.UdidHash = udidHash
  _args304.MigrationPincodeSessionId = migrationPincodeSessionId
  _args304.OldUdidHash = oldUdidHash
  var _result306 TalkServiceVerifyPhoneNumberResult
  var _meta305 thrift.ResponseMeta
  _meta305, _err = p.Client_().Call(ctx, "verifyPhoneNumber", &_args304, &_result306)
  p.SetLastResponseMeta_(_meta305)
  if _err != nil {
    return
  }
  switch {
  case _result306.E!= nil:
    return _r, _result306.E
  }

  return _result306.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) CancelGroupInvitation(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (_err error) {
  var _args307 TalkServiceCancelGroupInvitationArgs
  _args307.ReqSeq = reqSeq
  _args307.GroupId = groupId
  _args307.ContactIds = contactIds
  var _result309 TalkServiceCancelGroupInvitationResult
  var _meta308 thrift.ResponseMeta
  _meta308, _err = p.Client_().Call(ctx, "cancelGroupInvitation", &_args307, &_result309)
  p.SetLastResponseMeta_(_meta308)
  if _err != nil {
    return
  }
  switch {
  case _result309.E!= nil:
    return _result309.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ContactIds
func (p *TalkServiceClient) CreateRoomV2(ctx context.Context, reqSeq int32, contactIds []string) (_r *Room, _err error) {
  var _args310 TalkServiceCreateRoomV2Args
  _args310.ReqSeq = reqSeq
  _args310.ContactIds = contactIds
  var _result312 TalkServiceCreateRoomV2Result
  var _meta311 thrift.ResponseMeta
  _meta311, _err = p.Client_().Call(ctx, "createRoomV2", &_args310, &_result312)
  p.SetLastResponseMeta_(_meta311)
  if _err != nil {
    return
  }
  switch {
  case _result312.E!= nil:
    return _r, _result312.E
  }

  return _result312.GetSuccess(), nil
}

// Parameters:
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindContactByMetaTag(ctx context.Context, searchId string, reference string) (_r *Contact, _err error) {
  var _args313 TalkServiceFindContactByMetaTagArgs
  _args313.SearchId = searchId
  _args313.Reference = reference
  var _result315 TalkServiceFindContactByMetaTagResult
  var _meta314 thrift.ResponseMeta
  _meta314, _err = p.Client_().Call(ctx, "findContactByMetaTag", &_args313, &_result315)
  p.SetLastResponseMeta_(_meta314)
  if _err != nil {
    return
  }
  switch {
  case _result315.E!= nil:
    return _r, _result315.E
  }

  return _result315.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetChats(ctx context.Context, request *GetChatsRequest) (_r *GetChatsResponse, _err error) {
  var _args316 TalkServiceGetChatsArgs
  _args316.Request = request
  var _result318 TalkServiceGetChatsResult
  var _meta317 thrift.ResponseMeta
  _meta317, _err = p.Client_().Call(ctx, "getChats", &_args316, &_result318)
  p.SetLastResponseMeta_(_meta317)
  if _err != nil {
    return
  }
  switch {
  case _result318.E!= nil:
    return _r, _result318.E
  }

  return _result318.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetGroupIdsJoined(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args319 TalkServiceGetGroupIdsJoinedArgs
  _args319.SyncReason = syncReason
  var _result321 TalkServiceGetGroupIdsJoinedResult
  var _meta320 thrift.ResponseMeta
  _meta320, _err = p.Client_().Call(ctx, "getGroupIdsJoined", &_args319, &_result321)
  p.SetLastResponseMeta_(_meta320)
  if _err != nil {
    return
  }
  switch {
  case _result321.E!= nil:
    return _r, _result321.E
  }

  return _result321.GetSuccess(), nil
}

// Parameters:
//  - RoomIds
func (p *TalkServiceClient) GetRoomsV2(ctx context.Context, roomIds []string) (_r []*Room, _err error) {
  var _args322 TalkServiceGetRoomsV2Args
  _args322.RoomIds = roomIds
  var _result324 TalkServiceGetRoomsV2Result
  var _meta323 thrift.ResponseMeta
  _meta323, _err = p.Client_().Call(ctx, "getRoomsV2", &_args322, &_result324)
  p.SetLastResponseMeta_(_meta323)
  if _err != nil {
    return
  }
  switch {
  case _result324.E!= nil:
    return _r, _result324.E
  }

  return _result324.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (_r *ReissueChatTicketResponse, _err error) {
  var _args325 TalkServiceReissueChatTicketArgs
  _args325.Request = request
  var _result327 TalkServiceReissueChatTicketResult
  var _meta326 thrift.ResponseMeta
  _meta326, _err = p.Client_().Call(ctx, "reissueChatTicket", &_args325, &_result327)
  p.SetLastResponseMeta_(_meta326)
  if _err != nil {
    return
  }
  switch {
  case _result327.E!= nil:
    return _r, _result327.E
  }

  return _result327.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) SendMessage(ctx context.Context, seq int32, message *Message) (_r *Message, _err error) {
  var _args328 TalkServiceSendMessageArgs
  _args328.Seq = seq
  _args328.Message = message
  var _result330 TalkServiceSendMessageResult
  var _meta329 thrift.ResponseMeta
  _meta329, _err = p.Client_().Call(ctx, "sendMessage", &_args328, &_result330)
  p.SetLastResponseMeta_(_meta329)
  if _err != nil {
    return
  }
  switch {
  case _result330.E!= nil:
    return _r, _result330.E
  }

  return _result330.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - MessageId
func (p *TalkServiceClient) UnsendMessage(ctx context.Context, seq int32, messageId string) (_err error) {
  var _args331 TalkServiceUnsendMessageArgs
  _args331.Seq = seq
  _args331.MessageId = messageId
  var _result333 TalkServiceUnsendMessageResult
  var _meta332 thrift.ResponseMeta
  _meta332, _err = p.Client_().Call(ctx, "unsendMessage", &_args331, &_result333)
  p.SetLastResponseMeta_(_meta332)
  if _err != nil {
    return
  }
  switch {
  case _result333.E!= nil:
    return _result333.E
  }

  return nil
}

// Parameters:
//  - ChatMid
//  - MediaType
//  - IsInitialHost
//  - Capabilities
func (p *TalkServiceClient) AcquireGroupCallRoute(ctx context.Context, chatMid string, mediaType MediaType, isInitialHost bool, capabilities []string) (_r *GroupCallRoute, _err error) {
  var _args334 TalkServiceAcquireGroupCallRouteArgs
  _args334.ChatMid = chatMid
  _args334.MediaType = mediaType
  _args334.IsInitialHost = isInitialHost
  _args334.Capabilities = capabilities
  var _result336 TalkServiceAcquireGroupCallRouteResult
  var _meta335 thrift.ResponseMeta
  _meta335, _err = p.Client_().Call(ctx, "acquireGroupCallRoute", &_args334, &_result336)
  p.SetLastResponseMeta_(_meta335)
  if _err != nil {
    return
  }
  switch {
  case _result336.E!= nil:
    return _r, _result336.E
  }

  return _result336.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitationByTicket(ctx context.Context, request *AcceptChatInvitationByTicketRequest) (_r *AcceptChatInvitationByTicketResponse, _err error) {
  var _args337 TalkServiceAcceptChatInvitationByTicketArgs
  _args337.Request = request
  var _result339 TalkServiceAcceptChatInvitationByTicketResult
  var _meta338 thrift.ResponseMeta
  _meta338, _err = p.Client_().Call(ctx, "acceptChatInvitationByTicket", &_args337, &_result339)
  p.SetLastResponseMeta_(_meta338)
  if _err != nil {
    return
  }
  switch {
  case _result339.E!= nil:
    return _r, _result339.E
  }

  return _result339.GetSuccess(), nil
}

// Parameters:
//  - TicketIdWithTag
func (p *TalkServiceClient) FindContactByUserTicket(ctx context.Context, ticketIdWithTag string) (_r *Contact, _err error) {
  var _args340 TalkServiceFindContactByUserTicketArgs
  _args340.TicketIdWithTag = ticketIdWithTag
  var _result342 TalkServiceFindContactByUserTicketResult
  var _meta341 thrift.ResponseMeta
  _meta341, _err = p.Client_().Call(ctx, "findContactByUserTicket", &_args340, &_result342)
  p.SetLastResponseMeta_(_meta341)
  if _err != nil {
    return
  }
  switch {
  case _result342.E!= nil:
    return _r, _result342.E
  }

  return _result342.GetSuccess(), nil
}

// Parameters:
//  - Mid
//  - KeyVersion
//  - KeyId
func (p *TalkServiceClient) GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (_r []*E2EEPublicKey, _err error) {
  var _args343 TalkServiceGetE2EEPublicKeyArgs
  _args343.Mid = mid
  _args343.KeyVersion = keyVersion
  _args343.KeyId = keyId
  var _result345 TalkServiceGetE2EEPublicKeyResult
  var _meta344 thrift.ResponseMeta
  _meta344, _err = p.Client_().Call(ctx, "getE2EEPublicKey", &_args343, &_result345)
  p.SetLastResponseMeta_(_meta344)
  if _err != nil {
    return
  }
  switch {
  case _result345.E!= nil:
    return _r, _result345.E
  }

  return _result345.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Provider
//  - Identifier
//  - Verifier
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterDeviceWithIdentityCredential(ctx context.Context, sessionId string, provider Provider, identifier string, verifier string, migrationPincodeSessionId string) (_r string, _err error) {
  var _args346 TalkServiceRegisterDeviceWithIdentityCredentialArgs
  _args346.SessionId = sessionId
  _args346.Provider = provider
  _args346.Identifier = identifier
  _args346.Verifier = verifier
  _args346.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result348 TalkServiceRegisterDeviceWithIdentityCredentialResult
  var _meta347 thrift.ResponseMeta
  _meta347, _err = p.Client_().Call(ctx, "registerDeviceWithIdentityCredential", &_args346, &_result348)
  p.SetLastResponseMeta_(_meta347)
  if _err != nil {
    return
  }
  switch {
  case _result348.E!= nil:
    return _r, _result348.E
  }

  return _result348.GetSuccess(), nil
}

// Parameters:
//  - GroupMid
func (p *TalkServiceClient) ReissueGroupTicket(ctx context.Context, groupMid string) (_r string, _err error) {
  var _args349 TalkServiceReissueGroupTicketArgs
  _args349.GroupMid = groupMid
  var _result351 TalkServiceReissueGroupTicketResult
  var _meta350 thrift.ResponseMeta
  _meta350, _err = p.Client_().Call(ctx, "reissueGroupTicket", &_args349, &_result351)
  p.SetLastResponseMeta_(_meta350)
  if _err != nil {
    return
  }
  switch {
  case _result351.E!= nil:
    return _r, _result351.E
  }

  return _result351.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Request
func (p *TalkServiceClient) UpdateProfileAttributes(ctx context.Context, reqSeq int32, request *UpdateProfileAttributesRequest) (_err error) {
  var _args352 TalkServiceUpdateProfileAttributesArgs
  _args352.ReqSeq = reqSeq
  _args352.Request = request
  var _result354 TalkServiceUpdateProfileAttributesResult
  var _meta353 thrift.ResponseMeta
  _meta353, _err = p.Client_().Call(ctx, "updateProfileAttributes", &_args352, &_result354)
  p.SetLastResponseMeta_(_meta353)
  if _err != nil {
    return
  }
  switch {
  case _result354.E!= nil:
    return _result354.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - Value
func (p *TalkServiceClient) UpdateProfileAttribute(ctx context.Context, reqSeq int32, attr Attr, value string) (_err error) {
  var _args355 TalkServiceUpdateProfileAttributeArgs
  _args355.ReqSeq = reqSeq
  _args355.Attr = attr
  _args355.Value = value
  var _result357 TalkServiceUpdateProfileAttributeResult
  var _meta356 thrift.ResponseMeta
  _meta356, _err = p.Client_().Call(ctx, "updateProfileAttribute", &_args355, &_result357)
  p.SetLastResponseMeta_(_meta356)
  if _err != nil {
    return
  }
  switch {
  case _result357.E!= nil:
    return _result357.E
  }

  return nil
}

// Parameters:
//  - Verifier
//  - PinCode
func (p *TalkServiceClient) VerifyQrcode(ctx context.Context, verifier string, pinCode string) (_r string, _err error) {
  var _args358 TalkServiceVerifyQrcodeArgs
  _args358.Verifier = verifier
  _args358.PinCode = pinCode
  var _result360 TalkServiceVerifyQrcodeResult
  var _meta359 thrift.ResponseMeta
  _meta359, _err = p.Client_().Call(ctx, "verifyQrcode", &_args358, &_result360)
  p.SetLastResponseMeta_(_meta359)
  if _err != nil {
    return
  }
  switch {
  case _result360.E!= nil:
    return _r, _result360.E
  }

  return _result360.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (_r *AcceptChatInvitationResponse, _err error) {
  var _args361 TalkServiceAcceptChatInvitationArgs
  _args361.Request = request
  var _result363 TalkServiceAcceptChatInvitationResult
  var _meta362 thrift.ResponseMeta
  _meta362, _err = p.Client_().Call(ctx, "acceptChatInvitation", &_args361, &_result363)
  p.SetLastResponseMeta_(_meta362)
  if _err != nil {
    return
  }
  switch {
  case _result363.E!= nil:
    return _r, _result363.E
  }

  return _result363.GetSuccess(), nil
}

// Parameters:
//  - EMid
func (p *TalkServiceClient) DecryptFollowEMid(ctx context.Context, eMid string) (_r string, _err error) {
  var _args364 TalkServiceDecryptFollowEMidArgs
  _args364.EMid = eMid
  var _result366 TalkServiceDecryptFollowEMidResult
  var _meta365 thrift.ResponseMeta
  _meta365, _err = p.Client_().Call(ctx, "decryptFollowEMid", &_args364, &_result366)
  p.SetLastResponseMeta_(_meta365)
  if _err != nil {
    return
  }
  switch {
  case _result366.E!= nil:
    return _r, _result366.E
  }

  return _result366.GetSuccess(), nil
}

// Parameters:
//  - SearchId
func (p *TalkServiceClient) FindContactByUserid(ctx context.Context, searchId string) (_r *Contact, _err error) {
  var _args367 TalkServiceFindContactByUseridArgs
  _args367.SearchId = searchId
  var _result369 TalkServiceFindContactByUseridResult
  var _meta368 thrift.ResponseMeta
  _meta368, _err = p.Client_().Call(ctx, "findContactByUserid", &_args367, &_result369)
  p.SetLastResponseMeta_(_meta368)
  if _err != nil {
    return
  }
  switch {
  case _result369.E!= nil:
    return _r, _result369.E
  }

  return _result369.GetSuccess(), nil
}

func (p *TalkServiceClient) GetServerTime(ctx context.Context) (_r int64, _err error) {
  var _args370 TalkServiceGetServerTimeArgs
  var _result372 TalkServiceGetServerTimeResult
  var _meta371 thrift.ResponseMeta
  _meta371, _err = p.Client_().Call(ctx, "getServerTime", &_args370, &_result372)
  p.SetLastResponseMeta_(_meta371)
  if _err != nil {
    return
  }
  switch {
  case _result372.E!= nil:
    return _r, _result372.E
  }

  return _result372.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (_r *InviteIntoChatResponse, _err error) {
  var _args373 TalkServiceInviteIntoChatArgs
  _args373.Request = request
  var _result375 TalkServiceInviteIntoChatResult
  var _meta374 thrift.ResponseMeta
  _meta374, _err = p.Client_().Call(ctx, "inviteIntoChat", &_args373, &_result375)
  p.SetLastResponseMeta_(_meta374)
  if _err != nil {
    return
  }
  switch {
  case _result375.E!= nil:
    return _r, _result375.E
  }

  return _result375.GetSuccess(), nil
}

// Parameters:
//  - ClientRevision
func (p *TalkServiceClient) WakeUpLongPolling(ctx context.Context, clientRevision int64) (_r bool, _err error) {
  var _args376 TalkServiceWakeUpLongPollingArgs
  _args376.ClientRevision = clientRevision
  var _result378 TalkServiceWakeUpLongPollingResult
  var _meta377 thrift.ResponseMeta
  _meta377, _err = p.Client_().Call(ctx, "wakeUpLongPolling", &_args376, &_result378)
  p.SetLastResponseMeta_(_meta377)
  if _err != nil {
    return
  }
  switch {
  case _result378.E!= nil:
    return _r, _result378.E
  }

  return _result378.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupMid
//  - TicketId
func (p *TalkServiceClient) AcceptGroupInvitationByTicket(ctx context.Context, reqSeq int32, groupMid string, ticketId string) (_err error) {
  var _args379 TalkServiceAcceptGroupInvitationByTicketArgs
  _args379.ReqSeq = reqSeq
  _args379.GroupMid = groupMid
  _args379.TicketId = ticketId
  var _result381 TalkServiceAcceptGroupInvitationByTicketResult
  var _meta380 thrift.ResponseMeta
  _meta380, _err = p.Client_().Call(ctx, "acceptGroupInvitationByTicket", &_args379, &_result381)
  p.SetLastResponseMeta_(_meta380)
  if _err != nil {
    return
  }
  switch {
  case _result381.E!= nil:
    return _result381.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (_r *DeleteOtherFromChatResponse, _err error) {
  var _args382 TalkServiceDeleteOtherFromChatArgs
  _args382.Request = request
  var _result384 TalkServiceDeleteOtherFromChatResult
  var _meta383 thrift.ResponseMeta
  _meta383, _err = p.Client_().Call(ctx, "deleteOtherFromChat", &_args382, &_result384)
  p.SetLastResponseMeta_(_meta383)
  if _err != nil {
    return
  }
  switch {
  case _result384.E!= nil:
    return _r, _result384.E
  }

  return _result384.GetSuccess(), nil
}

// Parameters:
//  - Phones
func (p *TalkServiceClient) FindContactsByPhone(ctx context.Context, phones []string) (_r map[string]*Contact, _err error) {
  var _args385 TalkServiceFindContactsByPhoneArgs
  _args385.Phones = phones
  var _result387 TalkServiceFindContactsByPhoneResult
  var _meta386 thrift.ResponseMeta
  _meta386, _err = p.Client_().Call(ctx, "findContactsByPhone", &_args385, &_result387)
  p.SetLastResponseMeta_(_meta386)
  if _err != nil {
    return
  }
  switch {
  case _result387.E!= nil:
    return _r, _result387.E
  }

  return _result387.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroupsV2(ctx context.Context, groupId []string) (_r []*Group, _err error) {
  var _args388 TalkServiceGetGroupsV2Args
  _args388.GroupId = groupId
  var _result390 TalkServiceGetGroupsV2Result
  var _meta389 thrift.ResponseMeta
  _meta389, _err = p.Client_().Call(ctx, "getGroupsV2", &_args388, &_result390)
  p.SetLastResponseMeta_(_meta389)
  if _err != nil {
    return
  }
  switch {
  case _result390.E!= nil:
    return _r, _result390.E
  }

  return _result390.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroups(ctx context.Context, groupId []string) (_r []*Group, _err error) {
  var _args391 TalkServiceGetGroupsArgs
  _args391.GroupId = groupId
  var _result393 TalkServiceGetGroupsResult
  var _meta392 thrift.ResponseMeta
  _meta392, _err = p.Client_().Call(ctx, "getGroups", &_args391, &_result393)
  p.SetLastResponseMeta_(_meta392)
  if _err != nil {
    return
  }
  switch {
  case _result393.E!= nil:
    return _r, _result393.E
  }

  return _result393.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroup(ctx context.Context, groupId string) (_r *Group, _err error) {
  var _args394 TalkServiceGetGroupArgs
  _args394.GroupId = groupId
  var _result396 TalkServiceGetGroupResult
  var _meta395 thrift.ResponseMeta
  _meta395, _err = p.Client_().Call(ctx, "getGroup", &_args394, &_result396)
  p.SetLastResponseMeta_(_meta395)
  if _err != nil {
    return
  }
  switch {
  case _result396.E!= nil:
    return _r, _result396.E
  }

  return _result396.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetCompactGroup(ctx context.Context, groupId string) (_r *Group, _err error) {
  var _args397 TalkServiceGetCompactGroupArgs
  _args397.GroupId = groupId
  var _result399 TalkServiceGetCompactGroupResult
  var _meta398 thrift.ResponseMeta
  _meta398, _err = p.Client_().Call(ctx, "getCompactGroup", &_args397, &_result399)
  p.SetLastResponseMeta_(_meta398)
  if _err != nil {
    return
  }
  switch {
  case _result399.E!= nil:
    return _r, _result399.E
  }

  return _result399.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroupWithoutMembers(ctx context.Context, groupId string) (_r *Group, _err error) {
  var _args400 TalkServiceGetGroupWithoutMembersArgs
  _args400.GroupId = groupId
  var _result402 TalkServiceGetGroupWithoutMembersResult
  var _meta401 thrift.ResponseMeta
  _meta401, _err = p.Client_().Call(ctx, "getGroupWithoutMembers", &_args400, &_result402)
  p.SetLastResponseMeta_(_meta401)
  if _err != nil {
    return
  }
  switch {
  case _result402.E!= nil:
    return _r, _result402.E
  }

  return _result402.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (_err error) {
  var _args403 TalkServiceInviteIntoGroupArgs
  _args403.ReqSeq = reqSeq
  _args403.GroupId = groupId
  _args403.ContactIds = contactIds
  var _result405 TalkServiceInviteIntoGroupResult
  var _meta404 thrift.ResponseMeta
  _meta404, _err = p.Client_().Call(ctx, "inviteIntoGroup", &_args403, &_result405)
  p.SetLastResponseMeta_(_meta404)
  if _err != nil {
    return
  }
  switch {
  case _result405.E!= nil:
    return _result405.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) AcceptGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (_err error) {
  var _args406 TalkServiceAcceptGroupInvitationArgs
  _args406.ReqSeq = reqSeq
  _args406.GroupId = groupId
  var _result408 TalkServiceAcceptGroupInvitationResult
  var _meta407 thrift.ResponseMeta
  _meta407, _err = p.Client_().Call(ctx, "acceptGroupInvitation", &_args406, &_result408)
  p.SetLastResponseMeta_(_meta407)
  if _err != nil {
    return
  }
  switch {
  case _result408.E!= nil:
    return _result408.E
  }

  return nil
}

// Parameters:
//  - ChatIds
//  - SyncReason
func (p *TalkServiceClient) GetMessageReadRange(ctx context.Context, chatIds []string, syncReason SyncReason) (_r []*TMessageReadRange, _err error) {
  var _args409 TalkServiceGetMessageReadRangeArgs
  _args409.ChatIds = chatIds
  _args409.SyncReason = syncReason
  var _result411 TalkServiceGetMessageReadRangeResult
  var _meta410 thrift.ResponseMeta
  _meta410, _err = p.Client_().Call(ctx, "getMessageReadRange", &_args409, &_result411)
  p.SetLastResponseMeta_(_meta410)
  if _err != nil {
    return
  }
  switch {
  case _result411.E!= nil:
    return _r, _result411.E
  }

  return _result411.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (_r *DeleteSelfFromChatResponse, _err error) {
  var _args412 TalkServiceDeleteSelfFromChatArgs
  _args412.Request = request
  var _result414 TalkServiceDeleteSelfFromChatResult
  var _meta413 thrift.ResponseMeta
  _meta413, _err = p.Client_().Call(ctx, "deleteSelfFromChat", &_args412, &_result414)
  p.SetLastResponseMeta_(_meta413)
  if _err != nil {
    return
  }
  switch {
  case _result414.E!= nil:
    return _r, _result414.E
  }

  return _result414.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args415 TalkServiceGetBlockedContactIdsArgs
  _args415.SyncReason = syncReason
  var _result417 TalkServiceGetBlockedContactIdsResult
  var _meta416 thrift.ResponseMeta
  _meta416, _err = p.Client_().Call(ctx, "getBlockedContactIds", &_args415, &_result417)
  p.SetLastResponseMeta_(_meta416)
  if _err != nil {
    return
  }
  switch {
  case _result417.E!= nil:
    return _r, _result417.E
  }

  return _result417.GetSuccess(), nil
}

// Parameters:
//  - AttributesToRetrieve
func (p *TalkServiceClient) GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []SettingsAttributes) (_r *Settings, _err error) {
  var _args418 TalkServiceGetSettingsAttributes2Args
  _args418.AttributesToRetrieve = attributesToRetrieve
  var _result420 TalkServiceGetSettingsAttributes2Result
  var _meta419 thrift.ResponseMeta
  _meta419, _err = p.Client_().Call(ctx, "getSettingsAttributes2", &_args418, &_result420)
  p.SetLastResponseMeta_(_meta419)
  if _err != nil {
    return
  }
  switch {
  case _result420.E!= nil:
    return _r, _result420.E
  }

  return _result420.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (_err error) {
  var _args421 TalkServiceInviteIntoRoomArgs
  _args421.ReqSeq = reqSeq
  _args421.RoomId = roomId
  _args421.ContactIds = contactIds
  var _result423 TalkServiceInviteIntoRoomResult
  var _meta422 thrift.ResponseMeta
  _meta422, _err = p.Client_().Call(ctx, "inviteIntoRoom", &_args421, &_result423)
  p.SetLastResponseMeta_(_meta422)
  if _err != nil {
    return
  }
  switch {
  case _result423.E!= nil:
    return _result423.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (_r *RejectChatInvitationResponse, _err error) {
  var _args424 TalkServiceRejectChatInvitationArgs
  _args424.Request = request
  var _result426 TalkServiceRejectChatInvitationResult
  var _meta425 thrift.ResponseMeta
  _meta425, _err = p.Client_().Call(ctx, "rejectChatInvitation", &_args424, &_result426)
  p.SetLastResponseMeta_(_meta425)
  if _err != nil {
    return
  }
  switch {
  case _result426.E!= nil:
    return _r, _result426.E
  }

  return _result426.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args427 TalkServiceGetBlockedRecommendationIdsArgs
  _args427.SyncReason = syncReason
  var _result429 TalkServiceGetBlockedRecommendationIdsResult
  var _meta428 thrift.ResponseMeta
  _meta428, _err = p.Client_().Call(ctx, "getBlockedRecommendationIds", &_args427, &_result429)
  p.SetLastResponseMeta_(_meta428)
  if _err != nil {
    return
  }
  switch {
  case _result429.E!= nil:
    return _r, _result429.E
  }

  return _result429.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ChatRoomMid
//  - ChatRoomBGMInfo
func (p *TalkServiceClient) UpdateChatRoomBGM(ctx context.Context, reqSeq int32, chatRoomMid string, chatRoomBGMInfo string) (_r *ChatRoomBGM, _err error) {
  var _args430 TalkServiceUpdateChatRoomBGMArgs
  _args430.ReqSeq = reqSeq
  _args430.ChatRoomMid = chatRoomMid
  _args430.ChatRoomBGMInfo = chatRoomBGMInfo
  var _result432 TalkServiceUpdateChatRoomBGMResult
  var _meta431 thrift.ResponseMeta
  _meta431, _err = p.Client_().Call(ctx, "updateChatRoomBGM", &_args430, &_result432)
  p.SetLastResponseMeta_(_meta431)
  if _err != nil {
    return
  }
  switch {
  case _result432.E!= nil:
    return _r, _result432.E
  }

  return _result432.GetSuccess(), nil
}

// Parameters:
//  - TicketId
func (p *TalkServiceClient) FindGroupByTicket(ctx context.Context, ticketId string) (_r *Group, _err error) {
  var _args433 TalkServiceFindGroupByTicketArgs
  _args433.TicketId = ticketId
  var _result435 TalkServiceFindGroupByTicketResult
  var _meta434 thrift.ResponseMeta
  _meta434, _err = p.Client_().Call(ctx, "findGroupByTicket", &_args433, &_result435)
  p.SetLastResponseMeta_(_meta434)
  if _err != nil {
    return
  }
  switch {
  case _result435.E!= nil:
    return _r, _result435.E
  }

  return _result435.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetRecentFriendRequests(ctx context.Context, syncReason SyncReason) (_r *FriendRequestsInfo, _err error) {
  var _args436 TalkServiceGetRecentFriendRequestsArgs
  _args436.SyncReason = syncReason
  var _result438 TalkServiceGetRecentFriendRequestsResult
  var _meta437 thrift.ResponseMeta
  _meta437, _err = p.Client_().Call(ctx, "getRecentFriendRequests", &_args436, &_result438)
  p.SetLastResponseMeta_(_meta437)
  if _err != nil {
    return
  }
  switch {
  case _result438.E!= nil:
    return _r, _result438.E
  }

  return _result438.GetSuccess(), nil
}

// Parameters:
//  - AttrBitset
func (p *TalkServiceClient) GetSettingsAttributes(ctx context.Context, attrBitset int32) (_r *Settings, _err error) {
  var _args439 TalkServiceGetSettingsAttributesArgs
  _args439.AttrBitset = attrBitset
  var _result441 TalkServiceGetSettingsAttributesResult
  var _meta440 thrift.ResponseMeta
  _meta440, _err = p.Client_().Call(ctx, "getSettingsAttributes", &_args439, &_result441)
  p.SetLastResponseMeta_(_meta440)
  if _err != nil {
    return
  }
  switch {
  case _result441.E!= nil:
    return _r, _result441.E
  }

  return _result441.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) RejectGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (_err error) {
  var _args442 TalkServiceRejectGroupInvitationArgs
  _args442.ReqSeq = reqSeq
  _args442.GroupId = groupId
  var _result444 TalkServiceRejectGroupInvitationResult
  var _meta443 thrift.ResponseMeta
  _meta443, _err = p.Client_().Call(ctx, "rejectGroupInvitation", &_args442, &_result444)
  p.SetLastResponseMeta_(_meta443)
  if _err != nil {
    return
  }
  switch {
  case _result444.E!= nil:
    return _result444.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) UpdateChat(ctx context.Context, request *UpdateChatRequest) (_r *UpdateChatResponse, _err error) {
  var _args445 TalkServiceUpdateChatArgs
  _args445.Request = request
  var _result447 TalkServiceUpdateChatResult
  var _meta446 thrift.ResponseMeta
  _meta446, _err = p.Client_().Call(ctx, "updateChat", &_args445, &_result447)
  p.SetLastResponseMeta_(_meta446)
  if _err != nil {
    return
  }
  switch {
  case _result447.E!= nil:
    return _r, _result447.E
  }

  return _result447.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
func (p *TalkServiceClient) UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingsAttributes, settings *Settings) (_r []SettingsAttributes, _err error) {
  var _args448 TalkServiceUpdateSettingsAttributes2Args
  _args448.ReqSeq = reqSeq
  _args448.AttributesToUpdate = attributesToUpdate
  _args448.Settings = settings
  var _result450 TalkServiceUpdateSettingsAttributes2Result
  var _meta449 thrift.ResponseMeta
  _meta449, _err = p.Client_().Call(ctx, "updateSettingsAttributes2", &_args448, &_result450)
  p.SetLastResponseMeta_(_meta449)
  if _err != nil {
    return
  }
  switch {
  case _result450.E!= nil:
    return _r, _result450.E
  }

  return _result450.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Type
func (p *TalkServiceClient) GetContactRegistration(ctx context.Context, id string, type_a1 MIDType) (_r *ContactRegistration, _err error) {
  var _args451 TalkServiceGetContactRegistrationArgs
  _args451.ID = id
  _args451.Type = type_a1
  var _result453 TalkServiceGetContactRegistrationResult
  var _meta452 thrift.ResponseMeta
  _meta452, _err = p.Client_().Call(ctx, "getContactRegistration", &_args451, &_result453)
  p.SetLastResponseMeta_(_meta452)
  if _err != nil {
    return
  }
  switch {
  case _result453.E!= nil:
    return _r, _result453.E
  }

  return _result453.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetSettings(ctx context.Context, syncReason SyncReason) (_r *Settings, _err error) {
  var _args454 TalkServiceGetSettingsArgs
  _args454.SyncReason = syncReason
  var _result456 TalkServiceGetSettingsResult
  var _meta455 thrift.ResponseMeta
  _meta455, _err = p.Client_().Call(ctx, "getSettings", &_args454, &_result456)
  p.SetLastResponseMeta_(_meta455)
  if _err != nil {
    return
  }
  switch {
  case _result456.E!= nil:
    return _r, _result456.E
  }

  return _result456.GetSuccess(), nil
}

func (p *TalkServiceClient) Noop(ctx context.Context) (_err error) {
  var _args457 TalkServiceNoopArgs
  var _result459 TalkServiceNoopResult
  var _meta458 thrift.ResponseMeta
  _meta458, _err = p.Client_().Call(ctx, "noop", &_args457, &_result459)
  p.SetLastResponseMeta_(_meta458)
  if _err != nil {
    return
  }
  switch {
  case _result459.E!= nil:
    return _result459.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - LastMessageId
func (p *TalkServiceClient) RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (_err error) {
  var _args460 TalkServiceRemoveAllMessagesArgs
  _args460.Seq = seq
  _args460.LastMessageId = lastMessageId
  var _result462 TalkServiceRemoveAllMessagesResult
  var _meta461 thrift.ResponseMeta
  _meta461, _err = p.Client_().Call(ctx, "removeAllMessages", &_args460, &_result462)
  p.SetLastResponseMeta_(_meta461)
  if _err != nil {
    return
  }
  switch {
  case _result462.E!= nil:
    return _result462.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
func (p *TalkServiceClient) UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactFlag, value string) (_err error) {
  var _args463 TalkServiceUpdateContactSettingArgs
  _args463.ReqSeq = reqSeq
  _args463.Mid = mid
  _args463.Flag = flag
  _args463.Value = value
  var _result465 TalkServiceUpdateContactSettingResult
  var _meta464 thrift.ResponseMeta
  _meta464, _err = p.Client_().Call(ctx, "updateContactSetting", &_args463, &_result465)
  p.SetLastResponseMeta_(_meta464)
  if _err != nil {
    return
  }
  switch {
  case _result465.E!= nil:
    return _result465.E
  }

  return nil
}

// Parameters:
//  - ChatMid
func (p *TalkServiceClient) GetGroupCall(ctx context.Context, chatMid string) (_r *GroupCall, _err error) {
  var _args466 TalkServiceGetGroupCallArgs
  _args466.ChatMid = chatMid
  var _result468 TalkServiceGetGroupCallResult
  var _meta467 thrift.ResponseMeta
  _meta467, _err = p.Client_().Call(ctx, "getGroupCall", &_args466, &_result468)
  p.SetLastResponseMeta_(_meta467)
  if _err != nil {
    return
  }
  switch {
  case _result468.E!= nil:
    return _r, _result468.E
  }

  return _result468.GetSuccess(), nil
}

// Parameters:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
func (p *TalkServiceClient) FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (_r []*Operation, _err error) {
  var _args469 TalkServiceFetchOpsArgs
  _args469.LocalRev = localRev
  _args469.Count = count
  _args469.GlobalRev = globalRev
  _args469.IndividualRev = individualRev
  var _result471 TalkServiceFetchOpsResult
  var _meta470 thrift.ResponseMeta
  _meta470, _err = p.Client_().Call(ctx, "fetchOps", &_args469, &_result471)
  p.SetLastResponseMeta_(_meta470)
  if _err != nil {
    return
  }
  switch {
  case _result471.E!= nil:
    return _r, _result471.E
  }

  return _result471.GetSuccess(), nil
}

// Parameters:
//  - LocalRev
//  - Count
func (p *TalkServiceClient) FetchOperations(ctx context.Context, localRev int64, count int32) (_r []*Operation, _err error) {
  var _args472 TalkServiceFetchOperationsArgs
  _args472.LocalRev = localRev
  _args472.Count = count
  var _result474 TalkServiceFetchOperationsResult
  var _meta473 thrift.ResponseMeta
  _meta473, _err = p.Client_().Call(ctx, "fetchOperations", &_args472, &_result474)
  p.SetLastResponseMeta_(_meta473)
  if _err != nil {
    return
  }
  switch {
  case _result474.E!= nil:
    return _r, _result474.E
  }

  return _result474.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) KickoutFromGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (_err error) {
  var _args475 TalkServiceKickoutFromGroupArgs
  _args475.ReqSeq = reqSeq
  _args475.GroupId = groupId
  _args475.ContactIds = contactIds
  var _result477 TalkServiceKickoutFromGroupResult
  var _meta476 thrift.ResponseMeta
  _meta476, _err = p.Client_().Call(ctx, "kickoutFromGroup", &_args475, &_result477)
  p.SetLastResponseMeta_(_meta476)
  if _err != nil {
    return
  }
  switch {
  case _result477.E!= nil:
    return _result477.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetExtendedProfile(ctx context.Context, syncReason SyncReason) (_r *ExtendedProfile, _err error) {
  var _args478 TalkServiceGetExtendedProfileArgs
  _args478.SyncReason = syncReason
  var _result480 TalkServiceGetExtendedProfileResult
  var _meta479 thrift.ResponseMeta
  _meta479, _err = p.Client_().Call(ctx, "getExtendedProfile", &_args478, &_result480)
  p.SetLastResponseMeta_(_meta479)
  if _err != nil {
    return
  }
  switch {
  case _result480.E!= nil:
    return _r, _result480.E
  }

  return _result480.GetSuccess(), nil
}

// Parameters:
//  - FeatureType
func (p *TalkServiceClient) AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureType) (_r string, _err error) {
  var _args481 TalkServiceAcquireEncryptedAccessTokenArgs
  _args481.FeatureType = featureType
  var _result483 TalkServiceAcquireEncryptedAccessTokenResult
  var _meta482 thrift.ResponseMeta
  _meta482, _err = p.Client_().Call(ctx, "acquireEncryptedAccessToken", &_args481, &_result483)
  p.SetLastResponseMeta_(_meta482)
  if _err != nil {
    return
  }
  switch {
  case _result483.E!= nil:
    return _r, _result483.E
  }

  return _result483.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ChatRoomMid
//  - Type
//  - Contents
func (p *TalkServiceClient) CreateChatRoomAnnouncement(ctx context.Context, reqSeq int32, chatRoomMid string, type_a1 ChatRoomAnnouncementType, contents *ChatRoomAnnouncementContents) (_r *ChatRoomAnnouncement, _err error) {
  var _args484 TalkServiceCreateChatRoomAnnouncementArgs
  _args484.ReqSeq = reqSeq
  _args484.ChatRoomMid = chatRoomMid
  _args484.Type = type_a1
  _args484.Contents = contents
  var _result486 TalkServiceCreateChatRoomAnnouncementResult
  var _meta485 thrift.ResponseMeta
  _meta485, _err = p.Client_().Call(ctx, "createChatRoomAnnouncement", &_args484, &_result486)
  p.SetLastResponseMeta_(_meta485)
  if _err != nil {
    return
  }
  switch {
  case _result486.E!= nil:
    return _r, _result486.E
  }

  return _result486.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindAndAddContactByMetaTag(ctx context.Context, reqSeq int32, searchId string, reference string) (_r *Contact, _err error) {
  var _args487 TalkServiceFindAndAddContactByMetaTagArgs
  _args487.ReqSeq = reqSeq
  _args487.SearchId = searchId
  _args487.Reference = reference
  var _result489 TalkServiceFindAndAddContactByMetaTagResult
  var _meta488 thrift.ResponseMeta
  _meta488, _err = p.Client_().Call(ctx, "findAndAddContactByMetaTag", &_args487, &_result489)
  p.SetLastResponseMeta_(_meta488)
  if _err != nil {
    return
  }
  switch {
  case _result489.E!= nil:
    return _r, _result489.E
  }

  return _result489.GetSuccess(), nil
}

// Parameters:
//  - FollowRequest
func (p *TalkServiceClient) Follow(ctx context.Context, followRequest *FollowRequest) (_err error) {
  var _args490 TalkServiceFollowArgs
  _args490.FollowRequest = followRequest
  var _result492 TalkServiceFollowResult
  var _meta491 thrift.ResponseMeta
  _meta491, _err = p.Client_().Call(ctx, "follow", &_args490, &_result492)
  p.SetLastResponseMeta_(_meta491)
  if _err != nil {
    return
  }
  switch {
  case _result492.E!= nil:
    return _result492.E
  }

  return nil
}

// Parameters:
//  - ID
func (p *TalkServiceClient) GetContact(ctx context.Context, id string) (_r *Contact, _err error) {
  var _args493 TalkServiceGetContactArgs
  _args493.ID = id
  var _result495 TalkServiceGetContactResult
  var _meta494 thrift.ResponseMeta
  _meta494, _err = p.Client_().Call(ctx, "getContact", &_args493, &_result495)
  p.SetLastResponseMeta_(_meta494)
  if _err != nil {
    return
  }
  switch {
  case _result495.E!= nil:
    return _r, _result495.E
  }

  return _result495.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) LeaveGroup(ctx context.Context, reqSeq int32, groupId string) (_err error) {
  var _args496 TalkServiceLeaveGroupArgs
  _args496.ReqSeq = reqSeq
  _args496.GroupId = groupId
  var _result498 TalkServiceLeaveGroupResult
  var _meta497 thrift.ResponseMeta
  _meta497, _err = p.Client_().Call(ctx, "leaveGroup", &_args496, &_result498)
  p.SetLastResponseMeta_(_meta497)
  if _err != nil {
    return
  }
  switch {
  case _result498.E!= nil:
    return _result498.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId []byte) (_err error) {
  var _args499 TalkServiceSendChatCheckedArgs
  _args499.Seq = seq
  _args499.ChatMid = chatMid
  _args499.LastMessageId = lastMessageId
  _args499.SessionId = sessionId
  var _result501 TalkServiceSendChatCheckedResult
  var _meta500 thrift.ResponseMeta
  _meta500, _err = p.Client_().Call(ctx, "sendChatChecked", &_args499, &_result501)
  p.SetLastResponseMeta_(_meta500)
  if _err != nil {
    return
  }
  switch {
  case _result501.E!= nil:
    return _result501.E
  }

  return nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *TalkServiceClient) UpdateIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error) {
  var _args502 TalkServiceUpdateIdentifierArgs
  _args502.AuthSessionId = authSessionId
  _args502.Request = request
  var _result504 TalkServiceUpdateIdentifierResult
  var _meta503 thrift.ResponseMeta
  _meta503, _err = p.Client_().Call(ctx, "updateIdentifier", &_args502, &_result504)
  p.SetLastResponseMeta_(_meta503)
  if _err != nil {
    return
  }
  switch {
  case _result504.E!= nil:
    return _r, _result504.E
  }

  return _result504.GetSuccess(), nil
}

type TalkServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TalkService
}

func (p *TalkServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TalkServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TalkServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTalkServiceProcessor(handler TalkService) *TalkServiceProcessor {

  self505 := &TalkServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self505.processorMap["tryFriendRequest"] = &talkServiceProcessorTryFriendRequest{handler:handler}
  self505.processorMap["updateExtendedProfileAttribute"] = &talkServiceProcessorUpdateExtendedProfileAttribute{handler:handler}
  self505.processorMap["verifyAccountMigration"] = &talkServiceProcessorVerifyAccountMigration{handler:handler}
  self505.processorMap["reportLocation"] = &talkServiceProcessorReportLocation{handler:handler}
  self505.processorMap["getPaidCallBalanceList"] = &talkServiceProcessorGetPaidCallBalanceList{handler:handler}
  self505.processorMap["createChat"] = &talkServiceProcessorCreateChat{handler:handler}
  self505.processorMap["findAndAddContactsByMid"] = &talkServiceProcessorFindAndAddContactsByMid{handler:handler}
  self505.processorMap["generateUserTicket"] = &talkServiceProcessorGenerateUserTicket{handler:handler}
  self505.processorMap["getContacts"] = &talkServiceProcessorGetContacts{handler:handler}
  self505.processorMap["getFollowers"] = &talkServiceProcessorGetFollowers{handler:handler}
  self505.processorMap["getLastE2EEPublicKeys"] = &talkServiceProcessorGetLastE2EEPublicKeys{handler:handler}
  self505.processorMap["leaveRoom"] = &talkServiceProcessorLeaveRoom{handler:handler}
  self505.processorMap["notifyRegistrationComplete"] = &talkServiceProcessorNotifyRegistrationComplete{handler:handler}
  self505.processorMap["removeChatRoomAnnouncement"] = &talkServiceProcessorRemoveChatRoomAnnouncement{handler:handler}
  self505.processorMap["sendChatRemoved"] = &talkServiceProcessorSendChatRemoved{handler:handler}
  self505.processorMap["updatePassword"] = &talkServiceProcessorUpdatePassword{handler:handler}
  self505.processorMap["unblockContact"] = &talkServiceProcessorUnblockContact{handler:handler}
  self505.processorMap["verifyIdentityCredentialWithResult"] = &talkServiceProcessorVerifyIdentityCredentialWithResult_{handler:handler}
  self505.processorMap["requestCleanupUserProvidedData"] = &talkServiceProcessorRequestCleanupUserProvidedData{handler:handler}
  self505.processorMap["getBuddyStatusBarV2"] = &talkServiceProcessorGetBuddyStatusBarV2{handler:handler}
  self505.processorMap["getPaidCallHistory"] = &talkServiceProcessorGetPaidCallHistory{handler:handler}
  self505.processorMap["blockContact"] = &talkServiceProcessorBlockContact{handler:handler}
  self505.processorMap["createGroupV2"] = &talkServiceProcessorCreateGroupV2{handler:handler}
  self505.processorMap["findAndAddContactsByPhone"] = &talkServiceProcessorFindAndAddContactsByPhone{handler:handler}
  self505.processorMap["getAcceptedProximityMatches"] = &talkServiceProcessorGetAcceptedProximityMatches{handler:handler}
  self505.processorMap["getChatRoomAnnouncementsBulk"] = &talkServiceProcessorGetChatRoomAnnouncementsBulk{handler:handler}
  self505.processorMap["getRecommendationIds"] = &talkServiceProcessorGetRecommendationIds{handler:handler}
  self505.processorMap["getCountries"] = &talkServiceProcessorGetCountries{handler:handler}
  self505.processorMap["getFollowings"] = &talkServiceProcessorGetFollowings{handler:handler}
  self505.processorMap["getLastOpRevision"] = &talkServiceProcessorGetLastOpRevision{handler:handler}
  self505.processorMap["getRingbackTone"] = &talkServiceProcessorGetRingbackTone{handler:handler}
  self505.processorMap["registerWithPhoneNumber"] = &talkServiceProcessorRegisterWithPhoneNumber{handler:handler}
  self505.processorMap["report"] = &talkServiceProcessorReport{handler:handler}
  self505.processorMap["unblockRecommendation"] = &talkServiceProcessorUnblockRecommendation{handler:handler}
  self505.processorMap["updateGroup"] = &talkServiceProcessorUpdateGroup{handler:handler}
  self505.processorMap["findBuddyContactsByQuery"] = &talkServiceProcessorFindBuddyContactsByQuery{handler:handler}
  self505.processorMap["getPaidCallMetadata"] = &talkServiceProcessorGetPaidCallMetadata{handler:handler}
  self505.processorMap["blockRecommendation"] = &talkServiceProcessorBlockRecommendation{handler:handler}
  self505.processorMap["findAndAddContactsByUserid"] = &talkServiceProcessorFindAndAddContactsByUserid{handler:handler}
  self505.processorMap["getAllChatMids"] = &talkServiceProcessorGetAllChatMids{handler:handler}
  self505.processorMap["getChatRoomAnnouncements"] = &talkServiceProcessorGetChatRoomAnnouncements{handler:handler}
  self505.processorMap["getCountryWithRequestIp"] = &talkServiceProcessorGetCountryWithRequestIp{handler:handler}
  self505.processorMap["getFriendRequests"] = &talkServiceProcessorGetFriendRequests{handler:handler}
  self505.processorMap["getRingtone"] = &talkServiceProcessorGetRingtone{handler:handler}
  self505.processorMap["updateProfile"] = &talkServiceProcessorUpdateProfile{handler:handler}
  self505.processorMap["notifySleep"] = &talkServiceProcessorNotifySleep{handler:handler}
  self505.processorMap["registerWithSnsIdAndIdentityCredential"] = &talkServiceProcessorRegisterWithSnsIdAndIdentityCredential{handler:handler}
  self505.processorMap["removeFollower"] = &talkServiceProcessorRemoveFollower{handler:handler}
  self505.processorMap["requestAccountPasswordReset"] = &talkServiceProcessorRequestAccountPasswordReset{handler:handler}
  self505.processorMap["sendEchoPush"] = &talkServiceProcessorSendEchoPush{handler:handler}
  self505.processorMap["unfollow"] = &talkServiceProcessorUnfollow{handler:handler}
  self505.processorMap["inviteIntoGroupCall"] = &talkServiceProcessorInviteIntoGroupCall{handler:handler}
  self505.processorMap["cancelChatInvitation"] = &talkServiceProcessorCancelChatInvitation{handler:handler}
  self505.processorMap["findChatByTicket"] = &talkServiceProcessorFindChatByTicket{handler:handler}
  self505.processorMap["getAllContactIds"] = &talkServiceProcessorGetAllContactIds{handler:handler}
  self505.processorMap["getChatRoomBGMs"] = &talkServiceProcessorGetChatRoomBGMs{handler:handler}
  self505.processorMap["getE2EEGroupSharedKey"] = &talkServiceProcessorGetE2EEGroupSharedKey{handler:handler}
  self505.processorMap["getGroupIdsInvited"] = &talkServiceProcessorGetGroupIdsInvited{handler:handler}
  self505.processorMap["getProfile"] = &talkServiceProcessorGetProfile{handler:handler}
  self505.processorMap["notifyUpdated"] = &talkServiceProcessorNotifyUpdated{handler:handler}
  self505.processorMap["registerWithSnsId"] = &talkServiceProcessorRegisterWithSnsId{handler:handler}
  self505.processorMap["removeFriendRequest"] = &talkServiceProcessorRemoveFriendRequest{handler:handler}
  self505.processorMap["openAuthSession"] = &talkServiceProcessorOpenAuthSession{handler:handler}
  self505.processorMap["verifyQrcodeWithE2EE"] = &talkServiceProcessorVerifyQrcodeWithE2EE{handler:handler}
  self505.processorMap["getBalance"] = &talkServiceProcessorGetBalance{handler:handler}
  self505.processorMap["unregisterUserAndDevice"] = &talkServiceProcessorUnregisterUserAndDevice{handler:handler}
  self505.processorMap["updateNotificationToken"] = &talkServiceProcessorUpdateNotificationToken{handler:handler}
  self505.processorMap["verifyPhoneNumber"] = &talkServiceProcessorVerifyPhoneNumber{handler:handler}
  self505.processorMap["cancelGroupInvitation"] = &talkServiceProcessorCancelGroupInvitation{handler:handler}
  self505.processorMap["createRoomV2"] = &talkServiceProcessorCreateRoomV2{handler:handler}
  self505.processorMap["findContactByMetaTag"] = &talkServiceProcessorFindContactByMetaTag{handler:handler}
  self505.processorMap["getChats"] = &talkServiceProcessorGetChats{handler:handler}
  self505.processorMap["getGroupIdsJoined"] = &talkServiceProcessorGetGroupIdsJoined{handler:handler}
  self505.processorMap["getRoomsV2"] = &talkServiceProcessorGetRoomsV2{handler:handler}
  self505.processorMap["reissueChatTicket"] = &talkServiceProcessorReissueChatTicket{handler:handler}
  self505.processorMap["sendMessage"] = &talkServiceProcessorSendMessage{handler:handler}
  self505.processorMap["unsendMessage"] = &talkServiceProcessorUnsendMessage{handler:handler}
  self505.processorMap["acquireGroupCallRoute"] = &talkServiceProcessorAcquireGroupCallRoute{handler:handler}
  self505.processorMap["acceptChatInvitationByTicket"] = &talkServiceProcessorAcceptChatInvitationByTicket{handler:handler}
  self505.processorMap["findContactByUserTicket"] = &talkServiceProcessorFindContactByUserTicket{handler:handler}
  self505.processorMap["getE2EEPublicKey"] = &talkServiceProcessorGetE2EEPublicKey{handler:handler}
  self505.processorMap["registerDeviceWithIdentityCredential"] = &talkServiceProcessorRegisterDeviceWithIdentityCredential{handler:handler}
  self505.processorMap["reissueGroupTicket"] = &talkServiceProcessorReissueGroupTicket{handler:handler}
  self505.processorMap["updateProfileAttributes"] = &talkServiceProcessorUpdateProfileAttributes{handler:handler}
  self505.processorMap["updateProfileAttribute"] = &talkServiceProcessorUpdateProfileAttribute{handler:handler}
  self505.processorMap["verifyQrcode"] = &talkServiceProcessorVerifyQrcode{handler:handler}
  self505.processorMap["acceptChatInvitation"] = &talkServiceProcessorAcceptChatInvitation{handler:handler}
  self505.processorMap["decryptFollowEMid"] = &talkServiceProcessorDecryptFollowEMid{handler:handler}
  self505.processorMap["findContactByUserid"] = &talkServiceProcessorFindContactByUserid{handler:handler}
  self505.processorMap["getServerTime"] = &talkServiceProcessorGetServerTime{handler:handler}
  self505.processorMap["inviteIntoChat"] = &talkServiceProcessorInviteIntoChat{handler:handler}
  self505.processorMap["wakeUpLongPolling"] = &talkServiceProcessorWakeUpLongPolling{handler:handler}
  self505.processorMap["acceptGroupInvitationByTicket"] = &talkServiceProcessorAcceptGroupInvitationByTicket{handler:handler}
  self505.processorMap["deleteOtherFromChat"] = &talkServiceProcessorDeleteOtherFromChat{handler:handler}
  self505.processorMap["findContactsByPhone"] = &talkServiceProcessorFindContactsByPhone{handler:handler}
  self505.processorMap["getGroupsV2"] = &talkServiceProcessorGetGroupsV2{handler:handler}
  self505.processorMap["getGroups"] = &talkServiceProcessorGetGroups{handler:handler}
  self505.processorMap["getGroup"] = &talkServiceProcessorGetGroup{handler:handler}
  self505.processorMap["getCompactGroup"] = &talkServiceProcessorGetCompactGroup{handler:handler}
  self505.processorMap["getGroupWithoutMembers"] = &talkServiceProcessorGetGroupWithoutMembers{handler:handler}
  self505.processorMap["inviteIntoGroup"] = &talkServiceProcessorInviteIntoGroup{handler:handler}
  self505.processorMap["acceptGroupInvitation"] = &talkServiceProcessorAcceptGroupInvitation{handler:handler}
  self505.processorMap["getMessageReadRange"] = &talkServiceProcessorGetMessageReadRange{handler:handler}
  self505.processorMap["deleteSelfFromChat"] = &talkServiceProcessorDeleteSelfFromChat{handler:handler}
  self505.processorMap["getBlockedContactIds"] = &talkServiceProcessorGetBlockedContactIds{handler:handler}
  self505.processorMap["getSettingsAttributes2"] = &talkServiceProcessorGetSettingsAttributes2{handler:handler}
  self505.processorMap["inviteIntoRoom"] = &talkServiceProcessorInviteIntoRoom{handler:handler}
  self505.processorMap["rejectChatInvitation"] = &talkServiceProcessorRejectChatInvitation{handler:handler}
  self505.processorMap["getBlockedRecommendationIds"] = &talkServiceProcessorGetBlockedRecommendationIds{handler:handler}
  self505.processorMap["updateChatRoomBGM"] = &talkServiceProcessorUpdateChatRoomBGM{handler:handler}
  self505.processorMap["findGroupByTicket"] = &talkServiceProcessorFindGroupByTicket{handler:handler}
  self505.processorMap["getRecentFriendRequests"] = &talkServiceProcessorGetRecentFriendRequests{handler:handler}
  self505.processorMap["getSettingsAttributes"] = &talkServiceProcessorGetSettingsAttributes{handler:handler}
  self505.processorMap["rejectGroupInvitation"] = &talkServiceProcessorRejectGroupInvitation{handler:handler}
  self505.processorMap["updateChat"] = &talkServiceProcessorUpdateChat{handler:handler}
  self505.processorMap["updateSettingsAttributes2"] = &talkServiceProcessorUpdateSettingsAttributes2{handler:handler}
  self505.processorMap["getContactRegistration"] = &talkServiceProcessorGetContactRegistration{handler:handler}
  self505.processorMap["getSettings"] = &talkServiceProcessorGetSettings{handler:handler}
  self505.processorMap["noop"] = &talkServiceProcessorNoop{handler:handler}
  self505.processorMap["removeAllMessages"] = &talkServiceProcessorRemoveAllMessages{handler:handler}
  self505.processorMap["updateContactSetting"] = &talkServiceProcessorUpdateContactSetting{handler:handler}
  self505.processorMap["getGroupCall"] = &talkServiceProcessorGetGroupCall{handler:handler}
  self505.processorMap["fetchOps"] = &talkServiceProcessorFetchOps{handler:handler}
  self505.processorMap["fetchOperations"] = &talkServiceProcessorFetchOperations{handler:handler}
  self505.processorMap["kickoutFromGroup"] = &talkServiceProcessorKickoutFromGroup{handler:handler}
  self505.processorMap["getExtendedProfile"] = &talkServiceProcessorGetExtendedProfile{handler:handler}
  self505.processorMap["acquireEncryptedAccessToken"] = &talkServiceProcessorAcquireEncryptedAccessToken{handler:handler}
  self505.processorMap["createChatRoomAnnouncement"] = &talkServiceProcessorCreateChatRoomAnnouncement{handler:handler}
  self505.processorMap["findAndAddContactByMetaTag"] = &talkServiceProcessorFindAndAddContactByMetaTag{handler:handler}
  self505.processorMap["follow"] = &talkServiceProcessorFollow{handler:handler}
  self505.processorMap["getContact"] = &talkServiceProcessorGetContact{handler:handler}
  self505.processorMap["leaveGroup"] = &talkServiceProcessorLeaveGroup{handler:handler}
  self505.processorMap["sendChatChecked"] = &talkServiceProcessorSendChatChecked{handler:handler}
  self505.processorMap["updateIdentifier"] = &talkServiceProcessorUpdateIdentifier{handler:handler}
return self505
}

func (p *TalkServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x506 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x506.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x506

}

type talkServiceProcessorTryFriendRequest struct {
  handler TalkService
}

func (p *talkServiceProcessorTryFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceTryFriendRequestArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "tryFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceTryFriendRequestResult{}
  if err2 = p.handler.TryFriendRequest(ctx, args.MidOrEMid, args.Method, args.FriendRequestParams); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing tryFriendRequest: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "tryFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "tryFriendRequest", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateExtendedProfileAttribute struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateExtendedProfileAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateExtendedProfileAttributeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateExtendedProfileAttributeResult{}
  if err2 = p.handler.UpdateExtendedProfileAttribute(ctx, args.ReqSeq, args.Attr, args.ExtendedProfile); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExtendedProfileAttribute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateExtendedProfileAttribute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyAccountMigration struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyAccountMigration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyAccountMigrationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyAccountMigration", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyAccountMigrationResult{}
  if err2 = p.handler.VerifyAccountMigration(ctx, args.MigrationSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyAccountMigration: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyAccountMigration", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyAccountMigration", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReportLocation struct {
  handler TalkService
}

func (p *talkServiceProcessorReportLocation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportLocationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reportLocation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReportLocationResult{}
  if err2 = p.handler.ReportLocation(ctx, args.Location, args.Trigger, args.NetworkStatus); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportLocation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reportLocation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reportLocation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetPaidCallBalanceList struct {
  handler TalkService
}

func (p *talkServiceProcessorGetPaidCallBalanceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetPaidCallBalanceListArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getPaidCallBalanceList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetPaidCallBalanceListResult{}
  var retval []*PaidCallBalance
  if retval, err2 = p.handler.GetPaidCallBalanceList(ctx, args.Language); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPaidCallBalanceList: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getPaidCallBalanceList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getPaidCallBalanceList", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateChat struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCreateChatResult{}
  var retval *CreateChatResponse
  if retval, err2 = p.handler.CreateChat(ctx, args.Requests); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "createChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "createChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByMid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByMidArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindAndAddContactsByMidResult{}
  var retval map[string]*Contact
  if retval, err2 = p.handler.FindAndAddContactsByMid(ctx, args.ReqSeq, args.Mid, args.Type, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findAndAddContactsByMid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGenerateUserTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorGenerateUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGenerateUserTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGenerateUserTicketResult{}
  var retval *Ticket
  if retval, err2 = p.handler.GenerateUserTicket(ctx, args.ExpirationTime, args.MaxUseCount); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateUserTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "generateUserTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContacts struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContacts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetContactsResult{}
  var retval []*Contact
  if retval, err2 = p.handler.GetContacts(ctx, args.Ids); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContacts: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getContacts", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetFollowers struct {
  handler TalkService
}

func (p *talkServiceProcessorGetFollowers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetFollowersArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getFollowers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetFollowersResult{}
  var retval *GetFollowersResponse
  if retval, err2 = p.handler.GetFollowers(ctx, args.GetFollowersRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFollowers: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getFollowers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getFollowers", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastE2EEPublicKeys struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastE2EEPublicKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastE2EEPublicKeysArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetLastE2EEPublicKeysResult{}
  var retval map[string]*E2EEPublicKey
  if retval, err2 = p.handler.GetLastE2EEPublicKeys(ctx, args.ChatMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastE2EEPublicKeys: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getLastE2EEPublicKeys", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorLeaveRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorLeaveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceLeaveRoomArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceLeaveRoomResult{}
  if err2 = p.handler.LeaveRoom(ctx, args.ReqSeq, args.RoomId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveRoom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "leaveRoom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifyRegistrationComplete struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifyRegistrationComplete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifyRegistrationCompleteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyRegistrationComplete", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNotifyRegistrationCompleteResult{}
  if err2 = p.handler.NotifyRegistrationComplete(ctx, args.UdidHash, args.ApplicationTypeWithExtensions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyRegistrationComplete: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyRegistrationComplete", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "notifyRegistrationComplete", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveChatRoomAnnouncement struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveChatRoomAnnouncement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveChatRoomAnnouncementArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeChatRoomAnnouncement", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRemoveChatRoomAnnouncementResult{}
  if err2 = p.handler.RemoveChatRoomAnnouncement(ctx, args.ReqSeq, args.ChatRoomMid, args.AnnouncementSeq); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeChatRoomAnnouncement: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeChatRoomAnnouncement", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeChatRoomAnnouncement", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendChatRemoved struct {
  handler TalkService
}

func (p *talkServiceProcessorSendChatRemoved) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendChatRemovedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendChatRemovedResult{}
  if err2 = p.handler.SendChatRemoved(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatRemoved: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendChatRemoved", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdatePassword struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdatePassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdatePasswordArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updatePassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdatePasswordResult{}
  var retval *IdentityCredentialResponse
  if retval, err2 = p.handler.UpdatePassword(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updatePassword: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updatePassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updatePassword", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnblockContact struct {
  handler TalkService
}

func (p *talkServiceProcessorUnblockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnblockContactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnblockContactResult{}
  if err2 = p.handler.UnblockContact(ctx, args.ReqSeq, args.ID, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockContact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unblockContact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyIdentityCredentialWithResult_ struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyIdentityCredentialWithResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyIdentityCredentialWithResultArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyIdentityCredentialWithResultResult{}
  var retval *UserAuthStatus
  if retval, err2 = p.handler.VerifyIdentityCredentialWithResult_(ctx, args.IdentityCredential, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyIdentityCredentialWithResult: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyIdentityCredentialWithResult", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRequestCleanupUserProvidedData struct {
  handler TalkService
}

func (p *talkServiceProcessorRequestCleanupUserProvidedData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRequestCleanupUserProvidedDataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "requestCleanupUserProvidedData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRequestCleanupUserProvidedDataResult{}
  if err2 = p.handler.RequestCleanupUserProvidedData(ctx, args.DataTypes); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestCleanupUserProvidedData: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "requestCleanupUserProvidedData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "requestCleanupUserProvidedData", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBuddyStatusBarV2 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBuddyStatusBarV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBuddyStatusBarV2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBuddyStatusBarV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetBuddyStatusBarV2Result{}
  var retval *BuddyStatusBar
  if retval, err2 = p.handler.GetBuddyStatusBarV2(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBuddyStatusBarV2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBuddyStatusBarV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBuddyStatusBarV2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetPaidCallHistory struct {
  handler TalkService
}

func (p *talkServiceProcessorGetPaidCallHistory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetPaidCallHistoryArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getPaidCallHistory", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetPaidCallHistoryResult{}
  var retval *PaidCallHistoryResult_
  if retval, err2 = p.handler.GetPaidCallHistory(ctx, args.Start, args.Size, args.Language); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPaidCallHistory: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getPaidCallHistory", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getPaidCallHistory", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorBlockContact struct {
  handler TalkService
}

func (p *talkServiceProcessorBlockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceBlockContactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "blockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceBlockContactResult{}
  if err2 = p.handler.BlockContact(ctx, args.ReqSeq, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockContact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "blockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "blockContact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateGroupV2 struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateGroupV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateGroupV2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createGroupV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCreateGroupV2Result{}
  var retval *Group
  if retval, err2 = p.handler.CreateGroupV2(ctx, args.Seq, args.Name, args.ContactIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGroupV2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "createGroupV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "createGroupV2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByPhone struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindAndAddContactsByPhoneResult{}
  var retval map[string]*Contact
  if retval, err2 = p.handler.FindAndAddContactsByPhone(ctx, args.ReqSeq, args.Phones, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByPhone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findAndAddContactsByPhone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAcceptedProximityMatches struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAcceptedProximityMatches) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAcceptedProximityMatchesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetAcceptedProximityMatchesResult{}
  var retval []string
  if retval, err2 = p.handler.GetAcceptedProximityMatches(ctx, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAcceptedProximityMatches: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAcceptedProximityMatches", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChatRoomAnnouncementsBulk struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChatRoomAnnouncementsBulk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatRoomAnnouncementsBulkArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncementsBulk", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetChatRoomAnnouncementsBulkResult{}
  var retval map[string][]*ChatRoomAnnouncement
  if retval, err2 = p.handler.GetChatRoomAnnouncementsBulk(ctx, args.ChatRoomMids, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncementsBulk: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncementsBulk", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncementsBulk", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRecommendationIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRecommendationIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRecommendationIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetRecommendationIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecommendationIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRecommendationIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetCountries struct {
  handler TalkService
}

func (p *talkServiceProcessorGetCountries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetCountriesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getCountries", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetCountriesResult{}
  var retval []string
  if retval, err2 = p.handler.GetCountries(ctx, args.CountryGroup); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountries: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getCountries", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getCountries", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetFollowings struct {
  handler TalkService
}

func (p *talkServiceProcessorGetFollowings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetFollowingsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getFollowings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetFollowingsResult{}
  var retval *GetFollowingsResponse
  if retval, err2 = p.handler.GetFollowings(ctx, args.GetFollowingsRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFollowings: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getFollowings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getFollowings", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastOpRevision struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastOpRevision) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastOpRevisionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastOpRevision", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetLastOpRevisionResult{}
  var retval int64
  if retval, err2 = p.handler.GetLastOpRevision(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastOpRevision: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastOpRevision", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getLastOpRevision", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRingbackTone struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRingbackTone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRingbackToneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRingbackToneResult{}
  var retval int64
  if retval, err2 = p.handler.GetRingbackTone(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRingbackTone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRingbackTone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterWithPhoneNumber struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterWithPhoneNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterWithPhoneNumberArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterWithPhoneNumberResult{}
  var retval *RegisterWithPhoneNumberResult_
  if retval, err2 = p.handler.RegisterWithPhoneNumber(ctx, args.SessionId, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithPhoneNumber: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerWithPhoneNumber", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReport struct {
  handler TalkService
}

func (p *talkServiceProcessorReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "report", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReportResult{}
  if err2 = p.handler.Report(ctx, args.SyncOpRevision, args.Category, args.Report); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing report: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "report", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "report", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnblockRecommendation struct {
  handler TalkService
}

func (p *talkServiceProcessorUnblockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnblockRecommendationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnblockRecommendationResult{}
  if err2 = p.handler.UnblockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockRecommendation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unblockRecommendation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateGroup struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateGroupArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateGroupResult{}
  if err2 = p.handler.UpdateGroup(ctx, args.ReqSeq, args.Group); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGroup: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateGroup", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindBuddyContactsByQuery struct {
  handler TalkService
}

func (p *talkServiceProcessorFindBuddyContactsByQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindBuddyContactsByQueryArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findBuddyContactsByQuery", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindBuddyContactsByQueryResult{}
  var retval []*BuddySearchResult_
  if retval, err2 = p.handler.FindBuddyContactsByQuery(ctx, args.Language, args.Country, args.Query, args.FromIndex, args.Count, args.RequestSource); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findBuddyContactsByQuery: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findBuddyContactsByQuery", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findBuddyContactsByQuery", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetPaidCallMetadata struct {
  handler TalkService
}

func (p *talkServiceProcessorGetPaidCallMetadata) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetPaidCallMetadataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getPaidCallMetadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetPaidCallMetadataResult{}
  var retval *PaidCallMetadataResult_
  if retval, err2 = p.handler.GetPaidCallMetadata(ctx, args.Language); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPaidCallMetadata: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getPaidCallMetadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getPaidCallMetadata", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorBlockRecommendation struct {
  handler TalkService
}

func (p *talkServiceProcessorBlockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceBlockRecommendationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "blockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceBlockRecommendationResult{}
  if err2 = p.handler.BlockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockRecommendation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "blockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "blockRecommendation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByUseridArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindAndAddContactsByUseridResult{}
  var retval map[string]*Contact
  if retval, err2 = p.handler.FindAndAddContactsByUserid(ctx, args.ReqSeq, args.SearchId, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByUserid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findAndAddContactsByUserid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAllChatMids struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAllChatMids) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAllChatMidsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllChatMids", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetAllChatMidsResult{}
  var retval *GetAllChatMidsResponse
  if retval, err2 = p.handler.GetAllChatMids(ctx, args.Request, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllChatMids: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllChatMids", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAllChatMids", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChatRoomAnnouncements struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChatRoomAnnouncements) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatRoomAnnouncementsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncements", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetChatRoomAnnouncementsResult{}
  var retval []*ChatRoomAnnouncement
  if retval, err2 = p.handler.GetChatRoomAnnouncements(ctx, args.ChatRoomMids); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncements: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncements", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncements", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetCountryWithRequestIp struct {
  handler TalkService
}

func (p *talkServiceProcessorGetCountryWithRequestIp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetCountryWithRequestIpArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getCountryWithRequestIp", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetCountryWithRequestIpResult{}
  var retval string
  if retval, err2 = p.handler.GetCountryWithRequestIp(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountryWithRequestIp: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getCountryWithRequestIp", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getCountryWithRequestIp", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetFriendRequests struct {
  handler TalkService
}

func (p *talkServiceProcessorGetFriendRequests) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetFriendRequestsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetFriendRequestsResult{}
  var retval []*FriendRequest
  if retval, err2 = p.handler.GetFriendRequests(ctx, args.Direction, args.LastSeenSeqId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFriendRequests: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getFriendRequests", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRingtone struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRingtone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRingtoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRingtone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRingtoneResult{}
  var retval *Ringtone
  if retval, err2 = p.handler.GetRingtone(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRingtone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRingtone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRingtone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateProfileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateProfileResult{}
  if err2 = p.handler.UpdateProfile(ctx, args.ReqSeq, args.Profile); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateProfile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifySleep struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifySleep) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifySleepArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "notifySleep", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNotifySleepResult{}
  if err2 = p.handler.NotifySleep(ctx, args.LastRev, args.Badge); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifySleep: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "notifySleep", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "notifySleep", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterWithSnsIdAndIdentityCredential struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsIdAndIdentityCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterWithSnsIdAndIdentityCredentialResult{}
  var retval string
  if retval, err2 = p.handler.RegisterWithSnsIdAndIdentityCredential(ctx, args.SnsIdType, args.SnsAccessToken, args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsIdAndIdentityCredential: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerWithSnsIdAndIdentityCredential", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveFollower struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveFollower) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveFollowerArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeFollower", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRemoveFollowerResult{}
  if err2 = p.handler.RemoveFollower(ctx, args.RemoveFollowerRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFollower: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeFollower", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeFollower", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRequestAccountPasswordReset struct {
  handler TalkService
}

func (p *talkServiceProcessorRequestAccountPasswordReset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRequestAccountPasswordResetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRequestAccountPasswordResetResult{}
  if err2 = p.handler.RequestAccountPasswordReset(ctx, args.Provider, args.Identifier, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestAccountPasswordReset: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendEchoPush struct {
  handler TalkService
}

func (p *talkServiceProcessorSendEchoPush) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendEchoPushArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendEchoPush", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendEchoPushResult{}
  if err2 = p.handler.SendEchoPush(ctx, args.Text); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEchoPush: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendEchoPush", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendEchoPush", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnfollow struct {
  handler TalkService
}

func (p *talkServiceProcessorUnfollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnfollowArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unfollow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnfollowResult{}
  if err2 = p.handler.Unfollow(ctx, args.UnfollowRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unfollow: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unfollow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unfollow", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoGroupCall struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoGroupCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoGroupCallArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoGroupCall", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteIntoGroupCallResult{}
  if err2 = p.handler.InviteIntoGroupCall(ctx, args.ChatMid, args.MemberMids, args.MediaType); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoGroupCall: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoGroupCall", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteIntoGroupCall", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCancelChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorCancelChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCancelChatInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCancelChatInvitationResult{}
  var retval *CancelChatInvitationResponse
  if retval, err2 = p.handler.CancelChatInvitation(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "cancelChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindChatByTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorFindChatByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindChatByTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findChatByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindChatByTicketResult{}
  var retval *FindChatByTicketResponse
  if retval, err2 = p.handler.FindChatByTicket(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findChatByTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findChatByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findChatByTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAllContactIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAllContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAllContactIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetAllContactIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetAllContactIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllContactIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAllContactIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChatRoomBGMs struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChatRoomBGMs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatRoomBGMsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomBGMs", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetChatRoomBGMsResult{}
  var retval map[string]*ChatRoomBGM
  if retval, err2 = p.handler.GetChatRoomBGMs(ctx, args.ChatRoomMids, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatRoomBGMs: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomBGMs", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChatRoomBGMs", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetE2EEGroupSharedKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetE2EEGroupSharedKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetE2EEGroupSharedKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetE2EEGroupSharedKeyResult{}
  var retval *E2EEGroupSharedKey
  if retval, err2 = p.handler.GetE2EEGroupSharedKey(ctx, args.KeyVersion, args.ChatMid, args.GroupKeyId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEGroupSharedKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getE2EEGroupSharedKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroupIdsInvited struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroupIdsInvited) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupIdsInvitedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupIdsInvited", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupIdsInvitedResult{}
  var retval []string
  if retval, err2 = p.handler.GetGroupIdsInvited(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsInvited: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupIdsInvited", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroupIdsInvited", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorGetProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetProfileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetProfileResult{}
  var retval *Profile
  if retval, err2 = p.handler.GetProfile(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getProfile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifyUpdated struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifyUpdated) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifyUpdatedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyUpdated", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNotifyUpdatedResult{}
  if err2 = p.handler.NotifyUpdated(ctx, args.LastRev, args.DeviceInfo, args.UdidHash, args.OldUdidHash); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyUpdated: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyUpdated", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "notifyUpdated", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterWithSnsId struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterWithSnsIdArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithSnsId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterWithSnsIdResult{}
  var retval *RegisterWithSnsIdResult_
  if retval, err2 = p.handler.RegisterWithSnsId(ctx, args.SnsIdType, args.SnsAccessToken, args.Region, args.UdidHash, args.DeviceInfo, args.Mid, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsId: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithSnsId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerWithSnsId", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveFriendRequest struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveFriendRequestArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRemoveFriendRequestResult{}
  if err2 = p.handler.RemoveFriendRequest(ctx, args.Direction, args.MidOrEMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFriendRequest: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeFriendRequest", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorOpenAuthSession struct {
  handler TalkService
}

func (p *talkServiceProcessorOpenAuthSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceOpenAuthSessionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "openAuthSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceOpenAuthSessionResult{}
  var retval string
  if retval, err2 = p.handler.OpenAuthSession(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openAuthSession: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "openAuthSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "openAuthSession", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyQrcodeWithE2EE struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyQrcodeWithE2EE) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyQrcodeWithE2EEArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcodeWithE2EE", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyQrcodeWithE2EEResult{}
  var retval string
  if retval, err2 = p.handler.VerifyQrcodeWithE2EE(ctx, args.Verifier, args.PinCode, args.ErrorCode, args.PublicKey, args.EncryptedKeyChain, args.HashKeyChain); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrcodeWithE2EE: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcodeWithE2EE", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyQrcodeWithE2EE", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBalance struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBalance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBalanceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBalance", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetBalanceResult{}
  var retval *GetBalanceResponse
  if retval, err2 = p.handler.GetBalance(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBalance: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBalance", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBalance", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnregisterUserAndDevice struct {
  handler TalkService
}

func (p *talkServiceProcessorUnregisterUserAndDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnregisterUserAndDeviceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unregisterUserAndDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnregisterUserAndDeviceResult{}
  var retval string
  if retval, err2 = p.handler.UnregisterUserAndDevice(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unregisterUserAndDevice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unregisterUserAndDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unregisterUserAndDevice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateNotificationToken struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateNotificationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateNotificationTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateNotificationToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateNotificationTokenResult{}
  if err2 = p.handler.UpdateNotificationToken(ctx, args.Type, args.Token); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotificationToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateNotificationToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateNotificationToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyPhoneNumber struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyPhoneNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyPhoneNumberArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyPhoneNumberResult{}
  var retval *PhoneVerificationResult_
  if retval, err2 = p.handler.VerifyPhoneNumber(ctx, args.SessionId, args.PinCode, args.UdidHash, args.MigrationPincodeSessionId, args.OldUdidHash); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyPhoneNumber: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyPhoneNumber", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCancelGroupInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorCancelGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCancelGroupInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCancelGroupInvitationResult{}
  if err2 = p.handler.CancelGroupInvitation(ctx, args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelGroupInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "cancelGroupInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateRoomV2 struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateRoomV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateRoomV2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createRoomV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCreateRoomV2Result{}
  var retval *Room
  if retval, err2 = p.handler.CreateRoomV2(ctx, args.ReqSeq, args.ContactIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRoomV2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "createRoomV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "createRoomV2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByMetaTag struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByMetaTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByMetaTagArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindContactByMetaTagResult{}
  var retval *Contact
  if retval, err2 = p.handler.FindContactByMetaTag(ctx, args.SearchId, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByMetaTag: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findContactByMetaTag", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChats struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetChatsResult{}
  var retval *GetChatsResponse
  if retval, err2 = p.handler.GetChats(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChats: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChats", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroupIdsJoined struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroupIdsJoined) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupIdsJoinedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupIdsJoined", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupIdsJoinedResult{}
  var retval []string
  if retval, err2 = p.handler.GetGroupIdsJoined(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsJoined: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupIdsJoined", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroupIdsJoined", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRoomsV2 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRoomsV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRoomsV2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRoomsV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRoomsV2Result{}
  var retval []*Room
  if retval, err2 = p.handler.GetRoomsV2(ctx, args.RoomIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRoomsV2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRoomsV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRoomsV2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReissueChatTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorReissueChatTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReissueChatTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reissueChatTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReissueChatTicketResult{}
  var retval *ReissueChatTicketResponse
  if retval, err2 = p.handler.ReissueChatTicket(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueChatTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reissueChatTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reissueChatTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorSendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendMessageArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendMessageResult{}
  var retval *Message
  if retval, err2 = p.handler.SendMessage(ctx, args.Seq, args.Message); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessage: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendMessage", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnsendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorUnsendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnsendMessageArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnsendMessageResult{}
  if err2 = p.handler.UnsendMessage(ctx, args.Seq, args.MessageId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsendMessage: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unsendMessage", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcquireGroupCallRoute struct {
  handler TalkService
}

func (p *talkServiceProcessorAcquireGroupCallRoute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcquireGroupCallRouteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireGroupCallRoute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcquireGroupCallRouteResult{}
  var retval *GroupCallRoute
  if retval, err2 = p.handler.AcquireGroupCallRoute(ctx, args.ChatMid, args.MediaType, args.IsInitialHost, args.Capabilities); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireGroupCallRoute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireGroupCallRoute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acquireGroupCallRoute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptChatInvitationByTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptChatInvitationByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptChatInvitationByTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcceptChatInvitationByTicketResult{}
  var retval *AcceptChatInvitationByTicketResponse
  if retval, err2 = p.handler.AcceptChatInvitationByTicket(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptChatInvitationByTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acceptChatInvitationByTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByUserTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByUserTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindContactByUserTicketResult{}
  var retval *Contact
  if retval, err2 = p.handler.FindContactByUserTicket(ctx, args.TicketIdWithTag); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findContactByUserTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetE2EEPublicKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetE2EEPublicKeyResult{}
  var retval []*E2EEPublicKey
  if retval, err2 = p.handler.GetE2EEPublicKey(ctx, args.Mid, args.KeyVersion, args.KeyId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterDeviceWithIdentityCredential struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterDeviceWithIdentityCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterDeviceWithIdentityCredentialArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterDeviceWithIdentityCredentialResult{}
  var retval string
  if retval, err2 = p.handler.RegisterDeviceWithIdentityCredential(ctx, args.SessionId, args.Provider, args.Identifier, args.Verifier, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerDeviceWithIdentityCredential: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerDeviceWithIdentityCredential", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReissueGroupTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorReissueGroupTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReissueGroupTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reissueGroupTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReissueGroupTicketResult{}
  var retval string
  if retval, err2 = p.handler.ReissueGroupTicket(ctx, args.GroupMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueGroupTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reissueGroupTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reissueGroupTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateProfileAttributes struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateProfileAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateProfileAttributesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttributes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateProfileAttributesResult{}
  if err2 = p.handler.UpdateProfileAttributes(ctx, args.ReqSeq, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttributes: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttributes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateProfileAttributes", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateProfileAttribute struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateProfileAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateProfileAttributeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateProfileAttributeResult{}
  if err2 = p.handler.UpdateProfileAttribute(ctx, args.ReqSeq, args.Attr, args.Value); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttribute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateProfileAttribute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyQrcode struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyQrcode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyQrcodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyQrcodeResult{}
  var retval string
  if retval, err2 = p.handler.VerifyQrcode(ctx, args.Verifier, args.PinCode); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrcode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyQrcode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptChatInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcceptChatInvitationResult{}
  var retval *AcceptChatInvitationResponse
  if retval, err2 = p.handler.AcceptChatInvitation(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acceptChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDecryptFollowEMid struct {
  handler TalkService
}

func (p *talkServiceProcessorDecryptFollowEMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDecryptFollowEMidArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "decryptFollowEMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceDecryptFollowEMidResult{}
  var retval string
  if retval, err2 = p.handler.DecryptFollowEMid(ctx, args.EMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decryptFollowEMid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "decryptFollowEMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "decryptFollowEMid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByUseridArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindContactByUseridResult{}
  var retval *Contact
  if retval, err2 = p.handler.FindContactByUserid(ctx, args.SearchId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findContactByUserid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetServerTime struct {
  handler TalkService
}

func (p *talkServiceProcessorGetServerTime) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetServerTimeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getServerTime", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetServerTimeResult{}
  var retval int64
  if retval, err2 = p.handler.GetServerTime(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getServerTime: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getServerTime", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getServerTime", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoChat struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteIntoChatResult{}
  var retval *InviteIntoChatResponse
  if retval, err2 = p.handler.InviteIntoChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteIntoChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorWakeUpLongPolling struct {
  handler TalkService
}

func (p *talkServiceProcessorWakeUpLongPolling) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceWakeUpLongPollingArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "wakeUpLongPolling", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceWakeUpLongPollingResult{}
  var retval bool
  if retval, err2 = p.handler.WakeUpLongPolling(ctx, args.ClientRevision); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing wakeUpLongPolling: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "wakeUpLongPolling", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "wakeUpLongPolling", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptGroupInvitationByTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptGroupInvitationByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptGroupInvitationByTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptGroupInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcceptGroupInvitationByTicketResult{}
  if err2 = p.handler.AcceptGroupInvitationByTicket(ctx, args.ReqSeq, args.GroupMid, args.TicketId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitationByTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptGroupInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acceptGroupInvitationByTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDeleteOtherFromChat struct {
  handler TalkService
}

func (p *talkServiceProcessorDeleteOtherFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDeleteOtherFromChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteOtherFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceDeleteOtherFromChatResult{}
  var retval *DeleteOtherFromChatResponse
  if retval, err2 = p.handler.DeleteOtherFromChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteOtherFromChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteOtherFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "deleteOtherFromChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactsByPhone struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactsByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactsByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindContactsByPhoneResult{}
  var retval map[string]*Contact
  if retval, err2 = p.handler.FindContactsByPhone(ctx, args.Phones); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactsByPhone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findContactsByPhone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroupsV2 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroupsV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupsV2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupsV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupsV2Result{}
  var retval []*Group
  if retval, err2 = p.handler.GetGroupsV2(ctx, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupsV2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupsV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroupsV2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroups struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroups) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroups", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupsResult{}
  var retval []*Group
  if retval, err2 = p.handler.GetGroups(ctx, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroups: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroups", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroups", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroup struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupResult{}
  var retval *Group
  if retval, err2 = p.handler.GetGroup(ctx, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroup: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroup", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetCompactGroup struct {
  handler TalkService
}

func (p *talkServiceProcessorGetCompactGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetCompactGroupArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getCompactGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetCompactGroupResult{}
  var retval *Group
  if retval, err2 = p.handler.GetCompactGroup(ctx, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCompactGroup: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getCompactGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getCompactGroup", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroupWithoutMembers struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroupWithoutMembers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupWithoutMembersArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupWithoutMembers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupWithoutMembersResult{}
  var retval *Group
  if retval, err2 = p.handler.GetGroupWithoutMembers(ctx, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupWithoutMembers: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupWithoutMembers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroupWithoutMembers", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoGroup struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoGroupArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteIntoGroupResult{}
  if err2 = p.handler.InviteIntoGroup(ctx, args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoGroup: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteIntoGroup", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptGroupInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptGroupInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcceptGroupInvitationResult{}
  if err2 = p.handler.AcceptGroupInvitation(ctx, args.ReqSeq, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acceptGroupInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetMessageReadRange struct {
  handler TalkService
}

func (p *talkServiceProcessorGetMessageReadRange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetMessageReadRangeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getMessageReadRange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetMessageReadRangeResult{}
  var retval []*TMessageReadRange
  if retval, err2 = p.handler.GetMessageReadRange(ctx, args.ChatIds, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageReadRange: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getMessageReadRange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getMessageReadRange", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDeleteSelfFromChat struct {
  handler TalkService
}

func (p *talkServiceProcessorDeleteSelfFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDeleteSelfFromChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteSelfFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceDeleteSelfFromChatResult{}
  var retval *DeleteSelfFromChatResponse
  if retval, err2 = p.handler.DeleteSelfFromChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSelfFromChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteSelfFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "deleteSelfFromChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBlockedContactIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBlockedContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBlockedContactIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetBlockedContactIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetBlockedContactIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBlockedContactIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetSettingsAttributes2 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetSettingsAttributes2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetSettingsAttributes2Result{}
  var retval *Settings
  if retval, err2 = p.handler.GetSettingsAttributes2(ctx, args.AttributesToRetrieve); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoRoomArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteIntoRoomResult{}
  if err2 = p.handler.InviteIntoRoom(ctx, args.ReqSeq, args.RoomId, args.ContactIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoRoom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteIntoRoom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRejectChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorRejectChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRejectChatInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "rejectChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRejectChatInvitationResult{}
  var retval *RejectChatInvitationResponse
  if retval, err2 = p.handler.RejectChatInvitation(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "rejectChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "rejectChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBlockedRecommendationIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBlockedRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBlockedRecommendationIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetBlockedRecommendationIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetBlockedRecommendationIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedRecommendationIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBlockedRecommendationIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateChatRoomBGM struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateChatRoomBGM) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateChatRoomBGMArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateChatRoomBGM", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateChatRoomBGMResult{}
  var retval *ChatRoomBGM
  if retval, err2 = p.handler.UpdateChatRoomBGM(ctx, args.ReqSeq, args.ChatRoomMid, args.ChatRoomBGMInfo); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateChatRoomBGM: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateChatRoomBGM", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateChatRoomBGM", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindGroupByTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorFindGroupByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindGroupByTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findGroupByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindGroupByTicketResult{}
  var retval *Group
  if retval, err2 = p.handler.FindGroupByTicket(ctx, args.TicketId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findGroupByTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findGroupByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findGroupByTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRecentFriendRequests struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRecentFriendRequests) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRecentFriendRequestsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecentFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRecentFriendRequestsResult{}
  var retval *FriendRequestsInfo
  if retval, err2 = p.handler.GetRecentFriendRequests(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecentFriendRequests: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecentFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRecentFriendRequests", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetSettingsAttributes struct {
  handler TalkService
}

func (p *talkServiceProcessorGetSettingsAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetSettingsAttributesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettingsAttributes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetSettingsAttributesResult{}
  var retval *Settings
  if retval, err2 = p.handler.GetSettingsAttributes(ctx, args.AttrBitset); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettingsAttributes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSettingsAttributes", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRejectGroupInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorRejectGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRejectGroupInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "rejectGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRejectGroupInvitationResult{}
  if err2 = p.handler.RejectGroupInvitation(ctx, args.ReqSeq, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectGroupInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "rejectGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "rejectGroupInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateChat struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateChatResult{}
  var retval *UpdateChatResponse
  if retval, err2 = p.handler.UpdateChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateSettingsAttributes2 struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateSettingsAttributes2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateSettingsAttributes2Result{}
  var retval []SettingsAttributes
  if retval, err2 = p.handler.UpdateSettingsAttributes2(ctx, args.ReqSeq, args.AttributesToUpdate, args.Settings); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContactRegistration struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContactRegistration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactRegistrationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getContactRegistration", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetContactRegistrationResult{}
  var retval *ContactRegistration
  if retval, err2 = p.handler.GetContactRegistration(ctx, args.ID, args.Type); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContactRegistration: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getContactRegistration", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getContactRegistration", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetSettings struct {
  handler TalkService
}

func (p *talkServiceProcessorGetSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetSettingsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetSettingsResult{}
  var retval *Settings
  if retval, err2 = p.handler.GetSettings(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettings: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSettings", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNoop struct {
  handler TalkService
}

func (p *talkServiceProcessorNoop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNoopArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "noop", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNoopResult{}
  if err2 = p.handler.Noop(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noop: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "noop", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "noop", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveAllMessages struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveAllMessages) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveAllMessagesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAllMessages", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRemoveAllMessagesResult{}
  if err2 = p.handler.RemoveAllMessages(ctx, args.Seq, args.LastMessageId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAllMessages: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAllMessages", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeAllMessages", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateContactSetting struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateContactSetting) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateContactSettingArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateContactSettingResult{}
  if err2 = p.handler.UpdateContactSetting(ctx, args.ReqSeq, args.Mid, args.Flag, args.Value); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateContactSetting: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateContactSetting", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroupCall struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroupCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupCallArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupCall", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupCallResult{}
  var retval *GroupCall
  if retval, err2 = p.handler.GetGroupCall(ctx, args.ChatMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupCall: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupCall", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroupCall", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFetchOps struct {
  handler TalkService
}

func (p *talkServiceProcessorFetchOps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFetchOpsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFetchOpsResult{}
  var retval []*Operation
  if retval, err2 = p.handler.FetchOps(ctx, args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOps: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fetchOps", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFetchOperations struct {
  handler TalkService
}

func (p *talkServiceProcessorFetchOperations) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFetchOperationsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOperations", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFetchOperationsResult{}
  var retval []*Operation
  if retval, err2 = p.handler.FetchOperations(ctx, args.LocalRev, args.Count); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOperations: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOperations", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fetchOperations", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorKickoutFromGroup struct {
  handler TalkService
}

func (p *talkServiceProcessorKickoutFromGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceKickoutFromGroupArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "kickoutFromGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceKickoutFromGroupResult{}
  if err2 = p.handler.KickoutFromGroup(ctx, args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing kickoutFromGroup: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "kickoutFromGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "kickoutFromGroup", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetExtendedProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorGetExtendedProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetExtendedProfileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getExtendedProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetExtendedProfileResult{}
  var retval *ExtendedProfile
  if retval, err2 = p.handler.GetExtendedProfile(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExtendedProfile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getExtendedProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getExtendedProfile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcquireEncryptedAccessToken struct {
  handler TalkService
}

func (p *talkServiceProcessorAcquireEncryptedAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcquireEncryptedAccessTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcquireEncryptedAccessTokenResult{}
  var retval string
  if retval, err2 = p.handler.AcquireEncryptedAccessToken(ctx, args.FeatureType); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireEncryptedAccessToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acquireEncryptedAccessToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateChatRoomAnnouncement struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateChatRoomAnnouncement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateChatRoomAnnouncementArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createChatRoomAnnouncement", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCreateChatRoomAnnouncementResult{}
  var retval *ChatRoomAnnouncement
  if retval, err2 = p.handler.CreateChatRoomAnnouncement(ctx, args.ReqSeq, args.ChatRoomMid, args.Type, args.Contents); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createChatRoomAnnouncement: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "createChatRoomAnnouncement", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "createChatRoomAnnouncement", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactByMetaTag struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactByMetaTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactByMetaTagArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindAndAddContactByMetaTagResult{}
  var retval *Contact
  if retval, err2 = p.handler.FindAndAddContactByMetaTag(ctx, args.ReqSeq, args.SearchId, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactByMetaTag: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findAndAddContactByMetaTag", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFollow struct {
  handler TalkService
}

func (p *talkServiceProcessorFollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFollowArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "follow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFollowResult{}
  if err2 = p.handler.Follow(ctx, args.FollowRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing follow: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "follow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "follow", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContact struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetContactResult{}
  var retval *Contact
  if retval, err2 = p.handler.GetContact(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getContact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorLeaveGroup struct {
  handler TalkService
}

func (p *talkServiceProcessorLeaveGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceLeaveGroupArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "leaveGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceLeaveGroupResult{}
  if err2 = p.handler.LeaveGroup(ctx, args.ReqSeq, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveGroup: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "leaveGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "leaveGroup", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendChatChecked struct {
  handler TalkService
}

func (p *talkServiceProcessorSendChatChecked) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendChatCheckedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendChatCheckedResult{}
  if err2 = p.handler.SendChatChecked(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatChecked: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendChatChecked", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateIdentifier struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateIdentifier) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateIdentifierArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateIdentifierResult{}
  var retval *IdentityCredentialResponse
  if retval, err2 = p.handler.UpdateIdentifier(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateIdentifier: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateIdentifier", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - MidOrEMid
//  - Method
//  - FriendRequestParams
type TalkServiceTryFriendRequestArgs struct {
  MidOrEMid string `thrift:"midOrEMid,1" db:"midOrEMid" json:"midOrEMid"`
  Method Method_ `thrift:"method,2" db:"method" json:"method"`
  FriendRequestParams string `thrift:"friendRequestParams,3" db:"friendRequestParams" json:"friendRequestParams"`
}

func NewTalkServiceTryFriendRequestArgs() *TalkServiceTryFriendRequestArgs {
  return &TalkServiceTryFriendRequestArgs{}
}


func (p *TalkServiceTryFriendRequestArgs) GetMidOrEMid() string {
  return p.MidOrEMid
}

func (p *TalkServiceTryFriendRequestArgs) GetMethod() Method_ {
  return p.Method
}

func (p *TalkServiceTryFriendRequestArgs) GetFriendRequestParams() string {
  return p.FriendRequestParams
}
func (p *TalkServiceTryFriendRequestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceTryFriendRequestArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MidOrEMid = v
}
  return nil
}

func (p *TalkServiceTryFriendRequestArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Method_(v)
  p.Method = temp
}
  return nil
}

func (p *TalkServiceTryFriendRequestArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FriendRequestParams = v
}
  return nil
}

func (p *TalkServiceTryFriendRequestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "tryFriendRequest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceTryFriendRequestArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "midOrEMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:midOrEMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MidOrEMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:midOrEMid: ", p), err) }
  return err
}

func (p *TalkServiceTryFriendRequestArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err) }
  return err
}

func (p *TalkServiceTryFriendRequestArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "friendRequestParams", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:friendRequestParams: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FriendRequestParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.friendRequestParams (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:friendRequestParams: ", p), err) }
  return err
}

func (p *TalkServiceTryFriendRequestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceTryFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceTryFriendRequestResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceTryFriendRequestResult() *TalkServiceTryFriendRequestResult {
  return &TalkServiceTryFriendRequestResult{}
}

var TalkServiceTryFriendRequestResult_E_DEFAULT *TalkException
func (p *TalkServiceTryFriendRequestResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceTryFriendRequestResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceTryFriendRequestResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceTryFriendRequestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceTryFriendRequestResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceTryFriendRequestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "tryFriendRequest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceTryFriendRequestResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceTryFriendRequestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceTryFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
type TalkServiceUpdateExtendedProfileAttributeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Attr UpdateExtendedProfileAttributeAttr `thrift:"attr,2" db:"attr" json:"attr"`
  ExtendedProfile *ExtendedProfile `thrift:"extendedProfile,3" db:"extendedProfile" json:"extendedProfile"`
}

func NewTalkServiceUpdateExtendedProfileAttributeArgs() *TalkServiceUpdateExtendedProfileAttributeArgs {
  return &TalkServiceUpdateExtendedProfileAttributeArgs{}
}


func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetAttr() UpdateExtendedProfileAttributeAttr {
  return p.Attr
}
var TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT *ExtendedProfile
func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetExtendedProfile() *ExtendedProfile {
  if !p.IsSetExtendedProfile() {
    return TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT
  }
return p.ExtendedProfile
}
func (p *TalkServiceUpdateExtendedProfileAttributeArgs) IsSetExtendedProfile() bool {
  return p.ExtendedProfile != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UpdateExtendedProfileAttributeAttr(v)
  p.Attr = temp
}
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ExtendedProfile = &ExtendedProfile{}
  if err := p.ExtendedProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtendedProfile), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateExtendedProfileAttribute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attr", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Attr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err) }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "extendedProfile", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extendedProfile: ", p), err) }
  if err := p.ExtendedProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtendedProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extendedProfile: ", p), err) }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateExtendedProfileAttributeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateExtendedProfileAttributeResult() *TalkServiceUpdateExtendedProfileAttributeResult {
  return &TalkServiceUpdateExtendedProfileAttributeResult{}
}

var TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateExtendedProfileAttributeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateExtendedProfileAttributeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateExtendedProfileAttribute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - MigrationSessionId
type TalkServiceVerifyAccountMigrationArgs struct {
  // unused field # 1
  MigrationSessionId string `thrift:"migrationSessionId,2" db:"migrationSessionId" json:"migrationSessionId"`
}

func NewTalkServiceVerifyAccountMigrationArgs() *TalkServiceVerifyAccountMigrationArgs {
  return &TalkServiceVerifyAccountMigrationArgs{}
}


func (p *TalkServiceVerifyAccountMigrationArgs) GetMigrationSessionId() string {
  return p.MigrationSessionId
}
func (p *TalkServiceVerifyAccountMigrationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MigrationSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyAccountMigration_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:migrationSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:migrationSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyAccountMigrationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceVerifyAccountMigrationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyAccountMigrationResult() *TalkServiceVerifyAccountMigrationResult {
  return &TalkServiceVerifyAccountMigrationResult{}
}

var TalkServiceVerifyAccountMigrationResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyAccountMigrationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyAccountMigrationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyAccountMigrationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyAccountMigrationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyAccountMigration_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyAccountMigrationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationResult(%+v)", *p)
}

// Attributes:
//  - Location
//  - Trigger
//  - NetworkStatus
type TalkServiceReportLocationArgs struct {
  Location *Geolocation `thrift:"location,1" db:"location" json:"location"`
  Trigger Trigger `thrift:"trigger,2" db:"trigger" json:"trigger"`
  NetworkStatus *ClientNetworkStatus `thrift:"networkStatus,3" db:"networkStatus" json:"networkStatus"`
}

func NewTalkServiceReportLocationArgs() *TalkServiceReportLocationArgs {
  return &TalkServiceReportLocationArgs{}
}

var TalkServiceReportLocationArgs_Location_DEFAULT *Geolocation
func (p *TalkServiceReportLocationArgs) GetLocation() *Geolocation {
  if !p.IsSetLocation() {
    return TalkServiceReportLocationArgs_Location_DEFAULT
  }
return p.Location
}

func (p *TalkServiceReportLocationArgs) GetTrigger() Trigger {
  return p.Trigger
}
var TalkServiceReportLocationArgs_NetworkStatus_DEFAULT *ClientNetworkStatus
func (p *TalkServiceReportLocationArgs) GetNetworkStatus() *ClientNetworkStatus {
  if !p.IsSetNetworkStatus() {
    return TalkServiceReportLocationArgs_NetworkStatus_DEFAULT
  }
return p.NetworkStatus
}
func (p *TalkServiceReportLocationArgs) IsSetLocation() bool {
  return p.Location != nil
}

func (p *TalkServiceReportLocationArgs) IsSetNetworkStatus() bool {
  return p.NetworkStatus != nil
}

func (p *TalkServiceReportLocationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportLocationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Location = &Geolocation{}
  if err := p.Location.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *TalkServiceReportLocationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Trigger(v)
  p.Trigger = temp
}
  return nil
}

func (p *TalkServiceReportLocationArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.NetworkStatus = &ClientNetworkStatus{}
  if err := p.NetworkStatus.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NetworkStatus), err)
  }
  return nil
}

func (p *TalkServiceReportLocationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportLocation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportLocationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err) }
  if err := p.Location.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err) }
  return err
}

func (p *TalkServiceReportLocationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trigger", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trigger: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Trigger)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trigger (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trigger: ", p), err) }
  return err
}

func (p *TalkServiceReportLocationArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "networkStatus", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:networkStatus: ", p), err) }
  if err := p.NetworkStatus.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NetworkStatus), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:networkStatus: ", p), err) }
  return err
}

func (p *TalkServiceReportLocationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportLocationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportLocationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportLocationResult() *TalkServiceReportLocationResult {
  return &TalkServiceReportLocationResult{}
}

var TalkServiceReportLocationResult_E_DEFAULT *TalkException
func (p *TalkServiceReportLocationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportLocationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportLocationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportLocationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportLocationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportLocationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportLocation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportLocationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportLocationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportLocationResult(%+v)", *p)
}

// Attributes:
//  - Language
type TalkServiceGetPaidCallBalanceListArgs struct {
  // unused field # 1
  Language string `thrift:"language,2" db:"language" json:"language"`
}

func NewTalkServiceGetPaidCallBalanceListArgs() *TalkServiceGetPaidCallBalanceListArgs {
  return &TalkServiceGetPaidCallBalanceListArgs{}
}


func (p *TalkServiceGetPaidCallBalanceListArgs) GetLanguage() string {
  return p.Language
}
func (p *TalkServiceGetPaidCallBalanceListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallBalanceListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *TalkServiceGetPaidCallBalanceListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPaidCallBalanceList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetPaidCallBalanceListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "language", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err) }
  return err
}

func (p *TalkServiceGetPaidCallBalanceListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetPaidCallBalanceListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetPaidCallBalanceListResult struct {
  Success []*PaidCallBalance `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetPaidCallBalanceListResult() *TalkServiceGetPaidCallBalanceListResult {
  return &TalkServiceGetPaidCallBalanceListResult{}
}

var TalkServiceGetPaidCallBalanceListResult_Success_DEFAULT []*PaidCallBalance

func (p *TalkServiceGetPaidCallBalanceListResult) GetSuccess() []*PaidCallBalance {
  return p.Success
}
var TalkServiceGetPaidCallBalanceListResult_E_DEFAULT *TalkException
func (p *TalkServiceGetPaidCallBalanceListResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetPaidCallBalanceListResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetPaidCallBalanceListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallBalanceListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PaidCallBalance, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem507 := &PaidCallBalance{}
    if err := _elem507.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem507), err)
    }
    p.Success = append(p.Success, _elem507)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallBalanceListResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPaidCallBalanceList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetPaidCallBalanceListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetPaidCallBalanceListResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetPaidCallBalanceListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetPaidCallBalanceListResult(%+v)", *p)
}

// Attributes:
//  - Requests
type TalkServiceCreateChatArgs struct {
  Requests *CreateChatRequest `thrift:"requests,1" db:"requests" json:"requests"`
}

func NewTalkServiceCreateChatArgs() *TalkServiceCreateChatArgs {
  return &TalkServiceCreateChatArgs{}
}

var TalkServiceCreateChatArgs_Requests_DEFAULT *CreateChatRequest
func (p *TalkServiceCreateChatArgs) GetRequests() *CreateChatRequest {
  if !p.IsSetRequests() {
    return TalkServiceCreateChatArgs_Requests_DEFAULT
  }
return p.Requests
}
func (p *TalkServiceCreateChatArgs) IsSetRequests() bool {
  return p.Requests != nil
}

func (p *TalkServiceCreateChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Requests = &CreateChatRequest{}
  if err := p.Requests.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Requests), err)
  }
  return nil
}

func (p *TalkServiceCreateChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requests", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requests: ", p), err) }
  if err := p.Requests.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Requests), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requests: ", p), err) }
  return err
}

func (p *TalkServiceCreateChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateChatResult struct {
  Success *CreateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateChatResult() *TalkServiceCreateChatResult {
  return &TalkServiceCreateChatResult{}
}

var TalkServiceCreateChatResult_Success_DEFAULT *CreateChatResponse
func (p *TalkServiceCreateChatResult) GetSuccess() *CreateChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceCreateChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCreateChatResult_E_DEFAULT *TalkException
func (p *TalkServiceCreateChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CreateChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
type TalkServiceFindAndAddContactsByMidArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Type MIDType `thrift:"type,3" db:"type" json:"type"`
  Reference string `thrift:"reference,4" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByMidArgs() *TalkServiceFindAndAddContactsByMidArgs {
  return &TalkServiceFindAndAddContactsByMidArgs{}
}


func (p *TalkServiceFindAndAddContactsByMidArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetType() MIDType {
  return p.Type
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByMidArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MIDType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByMid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByMidResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByMidResult() *TalkServiceFindAndAddContactsByMidResult {
  return &TalkServiceFindAndAddContactsByMidResult{}
}

var TalkServiceFindAndAddContactsByMidResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByMidResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByMidResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByMidResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByMidResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByMidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key508 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key508 = v
}
    _val509 := &Contact{}
    if err := _val509.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val509), err)
    }
    p.Success[_key508] = _val509
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByMid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByMidResult(%+v)", *p)
}

// Attributes:
//  - ExpirationTime
//  - MaxUseCount
type TalkServiceGenerateUserTicketArgs struct {
  // unused fields # 1 to 2
  ExpirationTime int64 `thrift:"expirationTime,3" db:"expirationTime" json:"expirationTime"`
  MaxUseCount int32 `thrift:"maxUseCount,4" db:"maxUseCount" json:"maxUseCount"`
}

func NewTalkServiceGenerateUserTicketArgs() *TalkServiceGenerateUserTicketArgs {
  return &TalkServiceGenerateUserTicketArgs{}
}


func (p *TalkServiceGenerateUserTicketArgs) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *TalkServiceGenerateUserTicketArgs) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *TalkServiceGenerateUserTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateUserTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expirationTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err) }
  return err
}

func (p *TalkServiceGenerateUserTicketArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxUseCount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUseCount: ", p), err) }
  return err
}

func (p *TalkServiceGenerateUserTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGenerateUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGenerateUserTicketResult struct {
  Success *Ticket `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGenerateUserTicketResult() *TalkServiceGenerateUserTicketResult {
  return &TalkServiceGenerateUserTicketResult{}
}

var TalkServiceGenerateUserTicketResult_Success_DEFAULT *Ticket
func (p *TalkServiceGenerateUserTicketResult) GetSuccess() *Ticket {
  if !p.IsSetSuccess() {
    return TalkServiceGenerateUserTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGenerateUserTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceGenerateUserTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGenerateUserTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGenerateUserTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGenerateUserTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGenerateUserTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ticket{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateUserTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGenerateUserTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGenerateUserTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGenerateUserTicketResult(%+v)", *p)
}

// Attributes:
//  - Ids
type TalkServiceGetContactsArgs struct {
  // unused field # 1
  Ids []string `thrift:"ids,2" db:"ids" json:"ids"`
}

func NewTalkServiceGetContactsArgs() *TalkServiceGetContactsArgs {
  return &TalkServiceGetContactsArgs{}
}


func (p *TalkServiceGetContactsArgs) GetIds() []string {
  return p.Ids
}
func (p *TalkServiceGetContactsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem510 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem510 = v
}
    p.Ids = append(p.Ids, _elem510)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetContactsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContacts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ids: ", p), err) }
  return err
}

func (p *TalkServiceGetContactsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactsResult struct {
  Success []*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactsResult() *TalkServiceGetContactsResult {
  return &TalkServiceGetContactsResult{}
}

var TalkServiceGetContactsResult_Success_DEFAULT []*Contact

func (p *TalkServiceGetContactsResult) GetSuccess() []*Contact {
  return p.Success
}
var TalkServiceGetContactsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem511 := &Contact{}
    if err := _elem511.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem511), err)
    }
    p.Success = append(p.Success, _elem511)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContacts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactsResult(%+v)", *p)
}

// Attributes:
//  - GetFollowersRequest
type TalkServiceGetFollowersArgs struct {
  // unused field # 1
  GetFollowersRequest *GetFollowersRequest `thrift:"getFollowersRequest,2" db:"getFollowersRequest" json:"getFollowersRequest"`
}

func NewTalkServiceGetFollowersArgs() *TalkServiceGetFollowersArgs {
  return &TalkServiceGetFollowersArgs{}
}

var TalkServiceGetFollowersArgs_GetFollowersRequest_DEFAULT *GetFollowersRequest
func (p *TalkServiceGetFollowersArgs) GetGetFollowersRequest() *GetFollowersRequest {
  if !p.IsSetGetFollowersRequest() {
    return TalkServiceGetFollowersArgs_GetFollowersRequest_DEFAULT
  }
return p.GetFollowersRequest
}
func (p *TalkServiceGetFollowersArgs) IsSetGetFollowersRequest() bool {
  return p.GetFollowersRequest != nil
}

func (p *TalkServiceGetFollowersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.GetFollowersRequest = &GetFollowersRequest{}
  if err := p.GetFollowersRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetFollowersRequest), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFollowers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowersArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getFollowersRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:getFollowersRequest: ", p), err) }
  if err := p.GetFollowersRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetFollowersRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:getFollowersRequest: ", p), err) }
  return err
}

func (p *TalkServiceGetFollowersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFollowersResult struct {
  Success *GetFollowersResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFollowersResult() *TalkServiceGetFollowersResult {
  return &TalkServiceGetFollowersResult{}
}

var TalkServiceGetFollowersResult_Success_DEFAULT *GetFollowersResponse
func (p *TalkServiceGetFollowersResult) GetSuccess() *GetFollowersResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetFollowersResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetFollowersResult_E_DEFAULT *TalkException
func (p *TalkServiceGetFollowersResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetFollowersResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetFollowersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetFollowersResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetFollowersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetFollowersResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFollowers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowersResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowersResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type TalkServiceGetLastE2EEPublicKeysArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetLastE2EEPublicKeysArgs() *TalkServiceGetLastE2EEPublicKeysArgs {
  return &TalkServiceGetLastE2EEPublicKeysArgs{}
}


func (p *TalkServiceGetLastE2EEPublicKeysArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *TalkServiceGetLastE2EEPublicKeysArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEPublicKeys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastE2EEPublicKeysResult struct {
  Success map[string]*E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastE2EEPublicKeysResult() *TalkServiceGetLastE2EEPublicKeysResult {
  return &TalkServiceGetLastE2EEPublicKeysResult{}
}

var TalkServiceGetLastE2EEPublicKeysResult_Success_DEFAULT map[string]*E2EEPublicKey

func (p *TalkServiceGetLastE2EEPublicKeysResult) GetSuccess() map[string]*E2EEPublicKey {
  return p.Success
}
var TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastE2EEPublicKeysResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*E2EEPublicKey, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key512 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key512 = v
}
    _val513 := &E2EEPublicKey{}
    if err := _val513.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val513), err)
    }
    p.Success[_key512] = _val513
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEPublicKeys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
type TalkServiceLeaveRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
}

func NewTalkServiceLeaveRoomArgs() *TalkServiceLeaveRoomArgs {
  return &TalkServiceLeaveRoomArgs{}
}


func (p *TalkServiceLeaveRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceLeaveRoomArgs) GetRoomId() string {
  return p.RoomId
}
func (p *TalkServiceLeaveRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceLeaveRoomArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *TalkServiceLeaveRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "leaveRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceLeaveRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *TalkServiceLeaveRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLeaveRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceLeaveRoomResult() *TalkServiceLeaveRoomResult {
  return &TalkServiceLeaveRoomResult{}
}

var TalkServiceLeaveRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceLeaveRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceLeaveRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceLeaveRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceLeaveRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "leaveRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveRoomResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceLeaveRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveRoomResult(%+v)", *p)
}

// Attributes:
//  - UdidHash
//  - ApplicationTypeWithExtensions
type TalkServiceNotifyRegistrationCompleteArgs struct {
  // unused field # 1
  UdidHash string `thrift:"udidHash,2" db:"udidHash" json:"udidHash"`
  ApplicationTypeWithExtensions string `thrift:"applicationTypeWithExtensions,3" db:"applicationTypeWithExtensions" json:"applicationTypeWithExtensions"`
}

func NewTalkServiceNotifyRegistrationCompleteArgs() *TalkServiceNotifyRegistrationCompleteArgs {
  return &TalkServiceNotifyRegistrationCompleteArgs{}
}


func (p *TalkServiceNotifyRegistrationCompleteArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) GetApplicationTypeWithExtensions() string {
  return p.ApplicationTypeWithExtensions
}
func (p *TalkServiceNotifyRegistrationCompleteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ApplicationTypeWithExtensions = v
}
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyRegistrationComplete_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationTypeWithExtensions", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationTypeWithExtensions: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationTypeWithExtensions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationTypeWithExtensions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationTypeWithExtensions: ", p), err) }
  return err
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyRegistrationCompleteArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyRegistrationCompleteResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyRegistrationCompleteResult() *TalkServiceNotifyRegistrationCompleteResult {
  return &TalkServiceNotifyRegistrationCompleteResult{}
}

var TalkServiceNotifyRegistrationCompleteResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifyRegistrationCompleteResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifyRegistrationCompleteResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifyRegistrationCompleteResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyRegistrationComplete_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifyRegistrationCompleteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyRegistrationCompleteResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatRoomMid
//  - AnnouncementSeq
type TalkServiceRemoveChatRoomAnnouncementArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatRoomMid string `thrift:"chatRoomMid,2" db:"chatRoomMid" json:"chatRoomMid"`
  AnnouncementSeq int64 `thrift:"announcementSeq,3" db:"announcementSeq" json:"announcementSeq"`
}

func NewTalkServiceRemoveChatRoomAnnouncementArgs() *TalkServiceRemoveChatRoomAnnouncementArgs {
  return &TalkServiceRemoveChatRoomAnnouncementArgs{}
}


func (p *TalkServiceRemoveChatRoomAnnouncementArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) GetChatRoomMid() string {
  return p.ChatRoomMid
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) GetAnnouncementSeq() int64 {
  return p.AnnouncementSeq
}
func (p *TalkServiceRemoveChatRoomAnnouncementArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatRoomMid = v
}
  return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AnnouncementSeq = v
}
  return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeChatRoomAnnouncement_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatRoomMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatRoomMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMid: ", p), err) }
  return err
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "announcementSeq", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:announcementSeq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AnnouncementSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.announcementSeq (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:announcementSeq: ", p), err) }
  return err
}

func (p *TalkServiceRemoveChatRoomAnnouncementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveChatRoomAnnouncementArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveChatRoomAnnouncementResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveChatRoomAnnouncementResult() *TalkServiceRemoveChatRoomAnnouncementResult {
  return &TalkServiceRemoveChatRoomAnnouncementResult{}
}

var TalkServiceRemoveChatRoomAnnouncementResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveChatRoomAnnouncementResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveChatRoomAnnouncementResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveChatRoomAnnouncementResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeChatRoomAnnouncement_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveChatRoomAnnouncementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveChatRoomAnnouncementResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatRemovedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
  SessionId []byte `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatRemovedArgs() *TalkServiceSendChatRemovedArgs {
  return &TalkServiceSendChatRemovedArgs{}
}


func (p *TalkServiceSendChatRemovedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceSendChatRemovedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceSendChatRemovedArgs) GetLastMessageId() string {
  return p.LastMessageId
}

func (p *TalkServiceSendChatRemovedArgs) GetSessionId() []byte {
  return p.SessionId
}
func (p *TalkServiceSendChatRemovedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatRemoved_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatRemovedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SessionId); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatRemovedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatRemovedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatRemovedResult() *TalkServiceSendChatRemovedResult {
  return &TalkServiceSendChatRemovedResult{}
}

var TalkServiceSendChatRemovedResult_E_DEFAULT *TalkException
func (p *TalkServiceSendChatRemovedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendChatRemovedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendChatRemovedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendChatRemovedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatRemoved_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatRemovedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendChatRemovedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatRemovedResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type TalkServiceUpdatePasswordArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  Request *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewTalkServiceUpdatePasswordArgs() *TalkServiceUpdatePasswordArgs {
  return &TalkServiceUpdatePasswordArgs{}
}


func (p *TalkServiceUpdatePasswordArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var TalkServiceUpdatePasswordArgs_Request_DEFAULT *IdentityCredentialRequest
func (p *TalkServiceUpdatePasswordArgs) GetRequest() *IdentityCredentialRequest {
  if !p.IsSetRequest() {
    return TalkServiceUpdatePasswordArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceUpdatePasswordArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceUpdatePasswordArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdatePasswordArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *TalkServiceUpdatePasswordArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IdentityCredentialRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceUpdatePasswordArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updatePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdatePasswordArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *TalkServiceUpdatePasswordArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err) }
  return err
}

func (p *TalkServiceUpdatePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdatePasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdatePasswordResult struct {
  Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdatePasswordResult() *TalkServiceUpdatePasswordResult {
  return &TalkServiceUpdatePasswordResult{}
}

var TalkServiceUpdatePasswordResult_Success_DEFAULT *IdentityCredentialResponse
func (p *TalkServiceUpdatePasswordResult) GetSuccess() *IdentityCredentialResponse {
  if !p.IsSetSuccess() {
    return TalkServiceUpdatePasswordResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceUpdatePasswordResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdatePasswordResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdatePasswordResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdatePasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdatePasswordResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdatePasswordResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdatePasswordResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdentityCredentialResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceUpdatePasswordResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdatePasswordResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updatePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdatePasswordResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdatePasswordResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdatePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdatePasswordResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
//  - Reference
type TalkServiceUnblockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceUnblockContactArgs() *TalkServiceUnblockContactArgs {
  return &TalkServiceUnblockContactArgs{}
}


func (p *TalkServiceUnblockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUnblockContactArgs) GetID() string {
  return p.ID
}

func (p *TalkServiceUnblockContactArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceUnblockContactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockContactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockContactResult() *TalkServiceUnblockContactResult {
  return &TalkServiceUnblockContactResult{}
}

var TalkServiceUnblockContactResult_E_DEFAULT *TalkException
func (p *TalkServiceUnblockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnblockContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnblockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnblockContactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockContactResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnblockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockContactResult(%+v)", *p)
}

// Attributes:
//  - IdentityCredential
//  - MigrationPincodeSessionId
type TalkServiceVerifyIdentityCredentialWithResultArgs struct {
  // unused field # 1
  IdentityCredential *IdentityCredential `thrift:"identityCredential,2" db:"identityCredential" json:"identityCredential"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,3" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceVerifyIdentityCredentialWithResultArgs() *TalkServiceVerifyIdentityCredentialWithResultArgs {
  return &TalkServiceVerifyIdentityCredentialWithResultArgs{}
}

var TalkServiceVerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT *IdentityCredential
func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) GetIdentityCredential() *IdentityCredential {
  if !p.IsSetIdentityCredential() {
    return TalkServiceVerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT
  }
return p.IdentityCredential
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) IsSetIdentityCredential() bool {
  return p.IdentityCredential != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.IdentityCredential = &IdentityCredential{}
  if err := p.IdentityCredential.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentityCredential), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyIdentityCredentialWithResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityCredential", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityCredential: ", p), err) }
  if err := p.IdentityCredential.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentityCredential), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityCredential: ", p), err) }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyIdentityCredentialWithResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyIdentityCredentialWithResultResult struct {
  Success *UserAuthStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyIdentityCredentialWithResultResult() *TalkServiceVerifyIdentityCredentialWithResultResult {
  return &TalkServiceVerifyIdentityCredentialWithResultResult{}
}

var TalkServiceVerifyIdentityCredentialWithResultResult_Success_DEFAULT *UserAuthStatus
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) GetSuccess() *UserAuthStatus {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyIdentityCredentialWithResultResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceVerifyIdentityCredentialWithResultResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyIdentityCredentialWithResultResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UserAuthStatus{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyIdentityCredentialWithResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyIdentityCredentialWithResultResult(%+v)", *p)
}

// Attributes:
//  - DataTypes
type TalkServiceRequestCleanupUserProvidedDataArgs struct {
  DataTypes []DataTypes `thrift:"dataTypes,1" db:"dataTypes" json:"dataTypes"`
}

func NewTalkServiceRequestCleanupUserProvidedDataArgs() *TalkServiceRequestCleanupUserProvidedDataArgs {
  return &TalkServiceRequestCleanupUserProvidedDataArgs{}
}


func (p *TalkServiceRequestCleanupUserProvidedDataArgs) GetDataTypes() []DataTypes {
  return p.DataTypes
}
func (p *TalkServiceRequestCleanupUserProvidedDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]DataTypes, 0, size)
  p.DataTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem514 DataTypes
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := DataTypes(v)
    _elem514 = temp
}
    p.DataTypes = append(p.DataTypes, _elem514)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestCleanupUserProvidedData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dataTypes", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataTypes: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.DataTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.DataTypes); i++ {
    for j := i+1; j<len(p.DataTypes); j++ {
      if func(tgt, src DataTypes) bool {
        if tgt != src { return false }
        return true
      }(p.DataTypes[i], p.DataTypes[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.DataTypes))
      }
    }
  }
  for _, v := range p.DataTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataTypes: ", p), err) }
  return err
}

func (p *TalkServiceRequestCleanupUserProvidedDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestCleanupUserProvidedDataArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestCleanupUserProvidedDataResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestCleanupUserProvidedDataResult() *TalkServiceRequestCleanupUserProvidedDataResult {
  return &TalkServiceRequestCleanupUserProvidedDataResult{}
}

var TalkServiceRequestCleanupUserProvidedDataResult_E_DEFAULT *TalkException
func (p *TalkServiceRequestCleanupUserProvidedDataResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRequestCleanupUserProvidedDataResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRequestCleanupUserProvidedDataResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestCleanupUserProvidedData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRequestCleanupUserProvidedDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestCleanupUserProvidedDataResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetBuddyStatusBarV2Args struct {
  Request *GetBuddyStatusBarV2Request `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetBuddyStatusBarV2Args() *TalkServiceGetBuddyStatusBarV2Args {
  return &TalkServiceGetBuddyStatusBarV2Args{}
}

var TalkServiceGetBuddyStatusBarV2Args_Request_DEFAULT *GetBuddyStatusBarV2Request
func (p *TalkServiceGetBuddyStatusBarV2Args) GetRequest() *GetBuddyStatusBarV2Request {
  if !p.IsSetRequest() {
    return TalkServiceGetBuddyStatusBarV2Args_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceGetBuddyStatusBarV2Args) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetBuddyStatusBarV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetBuddyStatusBarV2Request{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBuddyStatusBarV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetBuddyStatusBarV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBuddyStatusBarV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBuddyStatusBarV2Result struct {
  Success *BuddyStatusBar `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBuddyStatusBarV2Result() *TalkServiceGetBuddyStatusBarV2Result {
  return &TalkServiceGetBuddyStatusBarV2Result{}
}

var TalkServiceGetBuddyStatusBarV2Result_Success_DEFAULT *BuddyStatusBar
func (p *TalkServiceGetBuddyStatusBarV2Result) GetSuccess() *BuddyStatusBar {
  if !p.IsSetSuccess() {
    return TalkServiceGetBuddyStatusBarV2Result_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetBuddyStatusBarV2Result_E_DEFAULT *TalkException
func (p *TalkServiceGetBuddyStatusBarV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBuddyStatusBarV2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBuddyStatusBarV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &BuddyStatusBar{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBuddyStatusBarV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBuddyStatusBarV2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBuddyStatusBarV2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBuddyStatusBarV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBuddyStatusBarV2Result(%+v)", *p)
}

// Attributes:
//  - Start
//  - Size
//  - Language
type TalkServiceGetPaidCallHistoryArgs struct {
  // unused field # 1
  Start int64 `thrift:"start,2" db:"start" json:"start"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  Language string `thrift:"language,4" db:"language" json:"language"`
}

func NewTalkServiceGetPaidCallHistoryArgs() *TalkServiceGetPaidCallHistoryArgs {
  return &TalkServiceGetPaidCallHistoryArgs{}
}


func (p *TalkServiceGetPaidCallHistoryArgs) GetStart() int64 {
  return p.Start
}

func (p *TalkServiceGetPaidCallHistoryArgs) GetSize() int32 {
  return p.Size
}

func (p *TalkServiceGetPaidCallHistoryArgs) GetLanguage() string {
  return p.Language
}
func (p *TalkServiceGetPaidCallHistoryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPaidCallHistory_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetPaidCallHistoryArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err) }
  return err
}

func (p *TalkServiceGetPaidCallHistoryArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *TalkServiceGetPaidCallHistoryArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "language", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:language: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:language: ", p), err) }
  return err
}

func (p *TalkServiceGetPaidCallHistoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetPaidCallHistoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetPaidCallHistoryResult struct {
  Success *PaidCallHistoryResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetPaidCallHistoryResult() *TalkServiceGetPaidCallHistoryResult {
  return &TalkServiceGetPaidCallHistoryResult{}
}

var TalkServiceGetPaidCallHistoryResult_Success_DEFAULT *PaidCallHistoryResult_
func (p *TalkServiceGetPaidCallHistoryResult) GetSuccess() *PaidCallHistoryResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceGetPaidCallHistoryResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetPaidCallHistoryResult_E_DEFAULT *TalkException
func (p *TalkServiceGetPaidCallHistoryResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetPaidCallHistoryResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetPaidCallHistoryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetPaidCallHistoryResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetPaidCallHistoryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallHistoryResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PaidCallHistoryResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallHistoryResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallHistoryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPaidCallHistory_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetPaidCallHistoryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetPaidCallHistoryResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetPaidCallHistoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetPaidCallHistoryResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockContactArgs() *TalkServiceBlockContactArgs {
  return &TalkServiceBlockContactArgs{}
}


func (p *TalkServiceBlockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceBlockContactArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceBlockContactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockContactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceBlockContactArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceBlockContactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockContactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceBlockContactArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceBlockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockContactResult() *TalkServiceBlockContactResult {
  return &TalkServiceBlockContactResult{}
}

var TalkServiceBlockContactResult_E_DEFAULT *TalkException
func (p *TalkServiceBlockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceBlockContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceBlockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceBlockContactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockContactResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceBlockContactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockContactResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceBlockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockContactResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Name
//  - ContactIds
type TalkServiceCreateGroupV2Args struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceCreateGroupV2Args() *TalkServiceCreateGroupV2Args {
  return &TalkServiceCreateGroupV2Args{}
}


func (p *TalkServiceCreateGroupV2Args) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceCreateGroupV2Args) GetName() string {
  return p.Name
}

func (p *TalkServiceCreateGroupV2Args) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceCreateGroupV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateGroupV2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceCreateGroupV2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TalkServiceCreateGroupV2Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem515 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem515 = v
}
    p.ContactIds = append(p.ContactIds, _elem515)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceCreateGroupV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createGroupV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateGroupV2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceCreateGroupV2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *TalkServiceCreateGroupV2Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceCreateGroupV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateGroupV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateGroupV2Result struct {
  Success *Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateGroupV2Result() *TalkServiceCreateGroupV2Result {
  return &TalkServiceCreateGroupV2Result{}
}

var TalkServiceCreateGroupV2Result_Success_DEFAULT *Group
func (p *TalkServiceCreateGroupV2Result) GetSuccess() *Group {
  if !p.IsSetSuccess() {
    return TalkServiceCreateGroupV2Result_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCreateGroupV2Result_E_DEFAULT *TalkException
func (p *TalkServiceCreateGroupV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateGroupV2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateGroupV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateGroupV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateGroupV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateGroupV2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Group{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCreateGroupV2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateGroupV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createGroupV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateGroupV2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateGroupV2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateGroupV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateGroupV2Result(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Phones
//  - Reference
type TalkServiceFindAndAddContactsByPhoneArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Phones []string `thrift:"phones,2" db:"phones" json:"phones"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByPhoneArgs() *TalkServiceFindAndAddContactsByPhoneArgs {
  return &TalkServiceFindAndAddContactsByPhoneArgs{}
}


func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetPhones() []string {
  return p.Phones
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Phones =  tSet
  for i := 0; i < size; i ++ {
var _elem516 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem516 = v
}
    p.Phones = append(p.Phones, _elem516)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phones", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Phones); i++ {
    for j := i+1; j<len(p.Phones); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.Phones[i], p.Phones[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Phones))
      }
    }
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByPhoneResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByPhoneResult() *TalkServiceFindAndAddContactsByPhoneResult {
  return &TalkServiceFindAndAddContactsByPhoneResult{}
}

var TalkServiceFindAndAddContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByPhoneResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByPhoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key517 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key517 = v
}
    _val518 := &Contact{}
    if err := _val518.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val518), err)
    }
    p.Success[_key517] = _val518
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceGetAcceptedProximityMatchesArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceGetAcceptedProximityMatchesArgs() *TalkServiceGetAcceptedProximityMatchesArgs {
  return &TalkServiceGetAcceptedProximityMatchesArgs{}
}


func (p *TalkServiceGetAcceptedProximityMatchesArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceGetAcceptedProximityMatchesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAcceptedProximityMatches_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAcceptedProximityMatchesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAcceptedProximityMatchesResult() *TalkServiceGetAcceptedProximityMatchesResult {
  return &TalkServiceGetAcceptedProximityMatchesResult{}
}

var TalkServiceGetAcceptedProximityMatchesResult_Success_DEFAULT []string

func (p *TalkServiceGetAcceptedProximityMatchesResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAcceptedProximityMatchesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem519 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem519 = v
}
    p.Success = append(p.Success, _elem519)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAcceptedProximityMatches_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if func(tgt, src string) bool {
          if tgt != src { return false }
          return true
        }(p.Success[i], p.Success[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesResult(%+v)", *p)
}

// Attributes:
//  - ChatRoomMids
//  - SyncReason
type TalkServiceGetChatRoomAnnouncementsBulkArgs struct {
  // unused field # 1
  ChatRoomMids []string `thrift:"chatRoomMids,2" db:"chatRoomMids" json:"chatRoomMids"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetChatRoomAnnouncementsBulkArgs() *TalkServiceGetChatRoomAnnouncementsBulkArgs {
  return &TalkServiceGetChatRoomAnnouncementsBulkArgs{}
}


func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) GetChatRoomMids() []string {
  return p.ChatRoomMids
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatRoomMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem520 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem520 = v
}
    p.ChatRoomMids = append(p.ChatRoomMids, _elem520)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomAnnouncementsBulk_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomMids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ChatRoomMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatRoomMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMids: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsBulkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatRoomAnnouncementsBulkResult struct {
  Success map[string][]*ChatRoomAnnouncement `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatRoomAnnouncementsBulkResult() *TalkServiceGetChatRoomAnnouncementsBulkResult {
  return &TalkServiceGetChatRoomAnnouncementsBulkResult{}
}

var TalkServiceGetChatRoomAnnouncementsBulkResult_Success_DEFAULT map[string][]*ChatRoomAnnouncement

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) GetSuccess() map[string][]*ChatRoomAnnouncement {
  return p.Success
}
var TalkServiceGetChatRoomAnnouncementsBulkResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatRoomAnnouncementsBulkResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*ChatRoomAnnouncement, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key521 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key521 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*ChatRoomAnnouncement, 0, size)
    _val522 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem523 := &ChatRoomAnnouncement{}
      if err := _elem523.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem523), err)
      }
      _val522 = append(_val522, _elem523)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Success[_key521] = _val522
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomAnnouncementsBulk_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := v.Write(ctx, oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteListEnd(ctx); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsBulkResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetRecommendationIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetRecommendationIdsArgs() *TalkServiceGetRecommendationIdsArgs {
  return &TalkServiceGetRecommendationIdsArgs{}
}


func (p *TalkServiceGetRecommendationIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetRecommendationIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecommendationIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetRecommendationIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecommendationIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecommendationIdsResult() *TalkServiceGetRecommendationIdsResult {
  return &TalkServiceGetRecommendationIdsResult{}
}

var TalkServiceGetRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetRecommendationIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetRecommendationIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRecommendationIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRecommendationIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRecommendationIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRecommendationIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRecommendationIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem524 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem524 = v
}
    p.Success = append(p.Success, _elem524)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecommendationIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecommendationIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecommendationIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - CountryGroup
type TalkServiceGetCountriesArgs struct {
  // unused field # 1
  CountryGroup CountryGroup `thrift:"countryGroup,2" db:"countryGroup" json:"countryGroup"`
}

func NewTalkServiceGetCountriesArgs() *TalkServiceGetCountriesArgs {
  return &TalkServiceGetCountriesArgs{}
}


func (p *TalkServiceGetCountriesArgs) GetCountryGroup() CountryGroup {
  return p.CountryGroup
}
func (p *TalkServiceGetCountriesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountriesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := CountryGroup(v)
  p.CountryGroup = temp
}
  return nil
}

func (p *TalkServiceGetCountriesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCountries_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountriesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryGroup", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:countryGroup: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CountryGroup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryGroup (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:countryGroup: ", p), err) }
  return err
}

func (p *TalkServiceGetCountriesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCountriesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetCountriesResult() *TalkServiceGetCountriesResult {
  return &TalkServiceGetCountriesResult{}
}

var TalkServiceGetCountriesResult_Success_DEFAULT []string

func (p *TalkServiceGetCountriesResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetCountriesResult_E_DEFAULT *TalkException
func (p *TalkServiceGetCountriesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetCountriesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetCountriesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetCountriesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetCountriesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountriesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem525 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem525 = v
}
    p.Success = append(p.Success, _elem525)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetCountriesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetCountriesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCountries_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountriesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if func(tgt, src string) bool {
          if tgt != src { return false }
          return true
        }(p.Success[i], p.Success[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountriesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountriesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountriesResult(%+v)", *p)
}

// Attributes:
//  - GetFollowingsRequest
type TalkServiceGetFollowingsArgs struct {
  // unused field # 1
  GetFollowingsRequest *GetFollowingsRequest `thrift:"getFollowingsRequest,2" db:"getFollowingsRequest" json:"getFollowingsRequest"`
}

func NewTalkServiceGetFollowingsArgs() *TalkServiceGetFollowingsArgs {
  return &TalkServiceGetFollowingsArgs{}
}

var TalkServiceGetFollowingsArgs_GetFollowingsRequest_DEFAULT *GetFollowingsRequest
func (p *TalkServiceGetFollowingsArgs) GetGetFollowingsRequest() *GetFollowingsRequest {
  if !p.IsSetGetFollowingsRequest() {
    return TalkServiceGetFollowingsArgs_GetFollowingsRequest_DEFAULT
  }
return p.GetFollowingsRequest
}
func (p *TalkServiceGetFollowingsArgs) IsSetGetFollowingsRequest() bool {
  return p.GetFollowingsRequest != nil
}

func (p *TalkServiceGetFollowingsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.GetFollowingsRequest = &GetFollowingsRequest{}
  if err := p.GetFollowingsRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetFollowingsRequest), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFollowings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowingsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getFollowingsRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:getFollowingsRequest: ", p), err) }
  if err := p.GetFollowingsRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetFollowingsRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:getFollowingsRequest: ", p), err) }
  return err
}

func (p *TalkServiceGetFollowingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFollowingsResult struct {
  Success *GetFollowingsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFollowingsResult() *TalkServiceGetFollowingsResult {
  return &TalkServiceGetFollowingsResult{}
}

var TalkServiceGetFollowingsResult_Success_DEFAULT *GetFollowingsResponse
func (p *TalkServiceGetFollowingsResult) GetSuccess() *GetFollowingsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetFollowingsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetFollowingsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetFollowingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetFollowingsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetFollowingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetFollowingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetFollowingsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetFollowingsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFollowings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowingsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowingsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowingsResult(%+v)", *p)
}

type TalkServiceGetLastOpRevisionArgs struct {
}

func NewTalkServiceGetLastOpRevisionArgs() *TalkServiceGetLastOpRevisionArgs {
  return &TalkServiceGetLastOpRevisionArgs{}
}

func (p *TalkServiceGetLastOpRevisionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastOpRevision_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastOpRevisionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastOpRevisionResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastOpRevisionResult() *TalkServiceGetLastOpRevisionResult {
  return &TalkServiceGetLastOpRevisionResult{}
}

var TalkServiceGetLastOpRevisionResult_Success_DEFAULT int64
func (p *TalkServiceGetLastOpRevisionResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TalkServiceGetLastOpRevisionResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetLastOpRevisionResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastOpRevisionResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastOpRevisionResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastOpRevisionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastOpRevisionResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastOpRevisionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastOpRevision_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastOpRevisionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastOpRevisionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastOpRevisionResult(%+v)", *p)
}

type TalkServiceGetRingbackToneArgs struct {
}

func NewTalkServiceGetRingbackToneArgs() *TalkServiceGetRingbackToneArgs {
  return &TalkServiceGetRingbackToneArgs{}
}

func (p *TalkServiceGetRingbackToneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRingbackTone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingbackToneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingbackToneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRingbackToneResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRingbackToneResult() *TalkServiceGetRingbackToneResult {
  return &TalkServiceGetRingbackToneResult{}
}

var TalkServiceGetRingbackToneResult_Success_DEFAULT int64
func (p *TalkServiceGetRingbackToneResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TalkServiceGetRingbackToneResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetRingbackToneResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRingbackToneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRingbackToneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRingbackToneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRingbackToneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRingbackToneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetRingbackToneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRingbackTone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingbackToneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingbackToneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingbackToneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingbackToneResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithPhoneNumberArgs struct {
  SessionId string `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,2" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithPhoneNumberArgs() *TalkServiceRegisterWithPhoneNumberArgs {
  return &TalkServiceRegisterWithPhoneNumberArgs{}
}


func (p *TalkServiceRegisterWithPhoneNumberArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithPhoneNumberArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithPhoneNumber_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithPhoneNumberResult struct {
  Success *RegisterWithPhoneNumberResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithPhoneNumberResult() *TalkServiceRegisterWithPhoneNumberResult {
  return &TalkServiceRegisterWithPhoneNumberResult{}
}

var TalkServiceRegisterWithPhoneNumberResult_Success_DEFAULT *RegisterWithPhoneNumberResult_
func (p *TalkServiceRegisterWithPhoneNumberResult) GetSuccess() *RegisterWithPhoneNumberResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterWithPhoneNumberResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterWithPhoneNumberResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterWithPhoneNumberResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterWithPhoneNumberResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterWithPhoneNumberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RegisterWithPhoneNumberResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithPhoneNumber_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithPhoneNumberResult(%+v)", *p)
}

// Attributes:
//  - SyncOpRevision
//  - Category
//  - Report
type TalkServiceReportArgs struct {
  // unused field # 1
  SyncOpRevision int64 `thrift:"syncOpRevision,2" db:"syncOpRevision" json:"syncOpRevision"`
  Category ReportCategory `thrift:"category,3" db:"category" json:"category"`
  Report string `thrift:"report,4" db:"report" json:"report"`
}

func NewTalkServiceReportArgs() *TalkServiceReportArgs {
  return &TalkServiceReportArgs{}
}


func (p *TalkServiceReportArgs) GetSyncOpRevision() int64 {
  return p.SyncOpRevision
}

func (p *TalkServiceReportArgs) GetCategory() ReportCategory {
  return p.Category
}

func (p *TalkServiceReportArgs) GetReport() string {
  return p.Report
}
func (p *TalkServiceReportArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SyncOpRevision = v
}
  return nil
}

func (p *TalkServiceReportArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ReportCategory(v)
  p.Category = temp
}
  return nil
}

func (p *TalkServiceReportArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Report = v
}
  return nil
}

func (p *TalkServiceReportArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "report_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncOpRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncOpRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SyncOpRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncOpRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncOpRevision: ", p), err) }
  return err
}

func (p *TalkServiceReportArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Category)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category: ", p), err) }
  return err
}

func (p *TalkServiceReportArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "report", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:report: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Report)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.report (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:report: ", p), err) }
  return err
}

func (p *TalkServiceReportArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportResult() *TalkServiceReportResult {
  return &TalkServiceReportResult{}
}

var TalkServiceReportResult_E_DEFAULT *TalkException
func (p *TalkServiceReportResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "report_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceUnblockRecommendationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceUnblockRecommendationArgs() *TalkServiceUnblockRecommendationArgs {
  return &TalkServiceUnblockRecommendationArgs{}
}


func (p *TalkServiceUnblockRecommendationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUnblockRecommendationArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceUnblockRecommendationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockRecommendation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUnblockRecommendationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceUnblockRecommendationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockRecommendationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockRecommendationResult() *TalkServiceUnblockRecommendationResult {
  return &TalkServiceUnblockRecommendationResult{}
}

var TalkServiceUnblockRecommendationResult_E_DEFAULT *TalkException
func (p *TalkServiceUnblockRecommendationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnblockRecommendationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnblockRecommendationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnblockRecommendationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockRecommendation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnblockRecommendationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Group
type TalkServiceUpdateGroupArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Group *Group `thrift:"group,2" db:"group" json:"group"`
}

func NewTalkServiceUpdateGroupArgs() *TalkServiceUpdateGroupArgs {
  return &TalkServiceUpdateGroupArgs{}
}


func (p *TalkServiceUpdateGroupArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceUpdateGroupArgs_Group_DEFAULT *Group
func (p *TalkServiceUpdateGroupArgs) GetGroup() *Group {
  if !p.IsSetGroup() {
    return TalkServiceUpdateGroupArgs_Group_DEFAULT
  }
return p.Group
}
func (p *TalkServiceUpdateGroupArgs) IsSetGroup() bool {
  return p.Group != nil
}

func (p *TalkServiceUpdateGroupArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateGroupArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateGroupArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Group = &Group{}
  if err := p.Group.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Group), err)
  }
  return nil
}

func (p *TalkServiceUpdateGroupArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateGroupArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateGroupArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "group", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err) }
  if err := p.Group.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Group), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err) }
  return err
}

func (p *TalkServiceUpdateGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateGroupResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateGroupResult() *TalkServiceUpdateGroupResult {
  return &TalkServiceUpdateGroupResult{}
}

var TalkServiceUpdateGroupResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateGroupResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateGroupResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateGroupResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateGroupResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateGroupResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateGroupResult(%+v)", *p)
}

// Attributes:
//  - Language
//  - Country
//  - Query
//  - FromIndex
//  - Count
//  - RequestSource
type TalkServiceFindBuddyContactsByQueryArgs struct {
  // unused field # 1
  Language string `thrift:"language,2" db:"language" json:"language"`
  Country string `thrift:"country,3" db:"country" json:"country"`
  Query string `thrift:"query,4" db:"query" json:"query"`
  FromIndex int32 `thrift:"fromIndex,5" db:"fromIndex" json:"fromIndex"`
  Count int32 `thrift:"count,6" db:"count" json:"count"`
  RequestSource RequestsSource `thrift:"requestSource,7" db:"requestSource" json:"requestSource"`
}

func NewTalkServiceFindBuddyContactsByQueryArgs() *TalkServiceFindBuddyContactsByQueryArgs {
  return &TalkServiceFindBuddyContactsByQueryArgs{}
}


func (p *TalkServiceFindBuddyContactsByQueryArgs) GetLanguage() string {
  return p.Language
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetCountry() string {
  return p.Country
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetQuery() string {
  return p.Query
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetFromIndex() int32 {
  return p.FromIndex
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetCount() int32 {
  return p.Count
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) GetRequestSource() RequestsSource {
  return p.RequestSource
}
func (p *TalkServiceFindBuddyContactsByQueryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Country = v
}
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FromIndex = v
}
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := RequestsSource(v)
  p.RequestSource = temp
}
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findBuddyContactsByQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "language", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err) }
  return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "country", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:country: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Country)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:country: ", p), err) }
  return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:query: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:query: ", p), err) }
  return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromIndex", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fromIndex: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FromIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIndex (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fromIndex: ", p), err) }
  return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:count: ", p), err) }
  return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestSource", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:requestSource: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestSource)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestSource (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:requestSource: ", p), err) }
  return err
}

func (p *TalkServiceFindBuddyContactsByQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindBuddyContactsByQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindBuddyContactsByQueryResult struct {
  Success []*BuddySearchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindBuddyContactsByQueryResult() *TalkServiceFindBuddyContactsByQueryResult {
  return &TalkServiceFindBuddyContactsByQueryResult{}
}

var TalkServiceFindBuddyContactsByQueryResult_Success_DEFAULT []*BuddySearchResult_

func (p *TalkServiceFindBuddyContactsByQueryResult) GetSuccess() []*BuddySearchResult_ {
  return p.Success
}
var TalkServiceFindBuddyContactsByQueryResult_E_DEFAULT *TalkException
func (p *TalkServiceFindBuddyContactsByQueryResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindBuddyContactsByQueryResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindBuddyContactsByQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BuddySearchResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem526 := &BuddySearchResult_{}
    if err := _elem526.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem526), err)
    }
    p.Success = append(p.Success, _elem526)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findBuddyContactsByQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindBuddyContactsByQueryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindBuddyContactsByQueryResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindBuddyContactsByQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindBuddyContactsByQueryResult(%+v)", *p)
}

// Attributes:
//  - Language
type TalkServiceGetPaidCallMetadataArgs struct {
  // unused field # 1
  Language string `thrift:"language,2" db:"language" json:"language"`
}

func NewTalkServiceGetPaidCallMetadataArgs() *TalkServiceGetPaidCallMetadataArgs {
  return &TalkServiceGetPaidCallMetadataArgs{}
}


func (p *TalkServiceGetPaidCallMetadataArgs) GetLanguage() string {
  return p.Language
}
func (p *TalkServiceGetPaidCallMetadataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallMetadataArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *TalkServiceGetPaidCallMetadataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPaidCallMetadata_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetPaidCallMetadataArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "language", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err) }
  return err
}

func (p *TalkServiceGetPaidCallMetadataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetPaidCallMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetPaidCallMetadataResult struct {
  Success *PaidCallMetadataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetPaidCallMetadataResult() *TalkServiceGetPaidCallMetadataResult {
  return &TalkServiceGetPaidCallMetadataResult{}
}

var TalkServiceGetPaidCallMetadataResult_Success_DEFAULT *PaidCallMetadataResult_
func (p *TalkServiceGetPaidCallMetadataResult) GetSuccess() *PaidCallMetadataResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceGetPaidCallMetadataResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetPaidCallMetadataResult_E_DEFAULT *TalkException
func (p *TalkServiceGetPaidCallMetadataResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetPaidCallMetadataResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetPaidCallMetadataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetPaidCallMetadataResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetPaidCallMetadataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallMetadataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PaidCallMetadataResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallMetadataResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetPaidCallMetadataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPaidCallMetadata_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetPaidCallMetadataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetPaidCallMetadataResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetPaidCallMetadataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetPaidCallMetadataResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockRecommendationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockRecommendationArgs() *TalkServiceBlockRecommendationArgs {
  return &TalkServiceBlockRecommendationArgs{}
}


func (p *TalkServiceBlockRecommendationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceBlockRecommendationArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceBlockRecommendationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceBlockRecommendationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceBlockRecommendationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockRecommendation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockRecommendationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceBlockRecommendationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceBlockRecommendationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockRecommendationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockRecommendationResult() *TalkServiceBlockRecommendationResult {
  return &TalkServiceBlockRecommendationResult{}
}

var TalkServiceBlockRecommendationResult_E_DEFAULT *TalkException
func (p *TalkServiceBlockRecommendationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceBlockRecommendationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceBlockRecommendationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceBlockRecommendationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockRecommendation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockRecommendationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceBlockRecommendationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
//  - Reference
type TalkServiceFindAndAddContactsByUseridArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByUseridArgs() *TalkServiceFindAndAddContactsByUseridArgs {
  return &TalkServiceFindAndAddContactsByUseridArgs{}
}


func (p *TalkServiceFindAndAddContactsByUseridArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetSearchId() string {
  return p.SearchId
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByUseridArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByUseridResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByUseridResult() *TalkServiceFindAndAddContactsByUseridResult {
  return &TalkServiceFindAndAddContactsByUseridResult{}
}

var TalkServiceFindAndAddContactsByUseridResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByUseridResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key527 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key527 = v
}
    _val528 := &Contact{}
    if err := _val528.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val528), err)
    }
    p.Success[_key527] = _val528
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridResult(%+v)", *p)
}

// Attributes:
//  - Request
//  - SyncReason
type TalkServiceGetAllChatMidsArgs struct {
  Request *GetAllChatMidsRequest `thrift:"request,1" db:"request" json:"request"`
  SyncReason SyncReason `thrift:"syncReason,2" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllChatMidsArgs() *TalkServiceGetAllChatMidsArgs {
  return &TalkServiceGetAllChatMidsArgs{}
}

var TalkServiceGetAllChatMidsArgs_Request_DEFAULT *GetAllChatMidsRequest
func (p *TalkServiceGetAllChatMidsArgs) GetRequest() *GetAllChatMidsRequest {
  if !p.IsSetRequest() {
    return TalkServiceGetAllChatMidsArgs_Request_DEFAULT
  }
return p.Request
}

func (p *TalkServiceGetAllChatMidsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetAllChatMidsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetAllChatMidsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetAllChatMidsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllChatMids_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetAllChatMidsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetAllChatMidsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllChatMidsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllChatMidsResult struct {
  Success *GetAllChatMidsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllChatMidsResult() *TalkServiceGetAllChatMidsResult {
  return &TalkServiceGetAllChatMidsResult{}
}

var TalkServiceGetAllChatMidsResult_Success_DEFAULT *GetAllChatMidsResponse
func (p *TalkServiceGetAllChatMidsResult) GetSuccess() *GetAllChatMidsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetAllChatMidsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetAllChatMidsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAllChatMidsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAllChatMidsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAllChatMidsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAllChatMidsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAllChatMidsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetAllChatMidsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllChatMids_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllChatMidsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllChatMidsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllChatMidsResult(%+v)", *p)
}

// Attributes:
//  - ChatRoomMids
type TalkServiceGetChatRoomAnnouncementsArgs struct {
  // unused field # 1
  ChatRoomMids string `thrift:"chatRoomMids,2" db:"chatRoomMids" json:"chatRoomMids"`
}

func NewTalkServiceGetChatRoomAnnouncementsArgs() *TalkServiceGetChatRoomAnnouncementsArgs {
  return &TalkServiceGetChatRoomAnnouncementsArgs{}
}


func (p *TalkServiceGetChatRoomAnnouncementsArgs) GetChatRoomMids() string {
  return p.ChatRoomMids
}
func (p *TalkServiceGetChatRoomAnnouncementsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatRoomMids = v
}
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomAnnouncements_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomMids", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMids: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatRoomMids)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatRoomMids (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMids: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatRoomAnnouncementsResult struct {
  Success []*ChatRoomAnnouncement `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatRoomAnnouncementsResult() *TalkServiceGetChatRoomAnnouncementsResult {
  return &TalkServiceGetChatRoomAnnouncementsResult{}
}

var TalkServiceGetChatRoomAnnouncementsResult_Success_DEFAULT []*ChatRoomAnnouncement

func (p *TalkServiceGetChatRoomAnnouncementsResult) GetSuccess() []*ChatRoomAnnouncement {
  return p.Success
}
var TalkServiceGetChatRoomAnnouncementsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatRoomAnnouncementsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatRoomAnnouncementsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatRoomAnnouncementsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChatRoomAnnouncement, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem529 := &ChatRoomAnnouncement{}
    if err := _elem529.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem529), err)
    }
    p.Success = append(p.Success, _elem529)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomAnnouncements_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsResult(%+v)", *p)
}

type TalkServiceGetCountryWithRequestIpArgs struct {
}

func NewTalkServiceGetCountryWithRequestIpArgs() *TalkServiceGetCountryWithRequestIpArgs {
  return &TalkServiceGetCountryWithRequestIpArgs{}
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCountryWithRequestIp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountryWithRequestIpArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCountryWithRequestIpResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetCountryWithRequestIpResult() *TalkServiceGetCountryWithRequestIpResult {
  return &TalkServiceGetCountryWithRequestIpResult{}
}

var TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT string
func (p *TalkServiceGetCountryWithRequestIpResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetCountryWithRequestIpResult_E_DEFAULT *TalkException
func (p *TalkServiceGetCountryWithRequestIpResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetCountryWithRequestIpResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetCountryWithRequestIpResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCountryWithRequestIp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountryWithRequestIpResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - LastSeenSeqId
type TalkServiceGetFriendRequestsArgs struct {
  Direction Direction `thrift:"direction,1" db:"direction" json:"direction"`
  LastSeenSeqId int64 `thrift:"lastSeenSeqId,2" db:"lastSeenSeqId" json:"lastSeenSeqId"`
}

func NewTalkServiceGetFriendRequestsArgs() *TalkServiceGetFriendRequestsArgs {
  return &TalkServiceGetFriendRequestsArgs{}
}


func (p *TalkServiceGetFriendRequestsArgs) GetDirection() Direction {
  return p.Direction
}

func (p *TalkServiceGetFriendRequestsArgs) GetLastSeenSeqId() int64 {
  return p.LastSeenSeqId
}
func (p *TalkServiceGetFriendRequestsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFriendRequestsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Direction(v)
  p.Direction = temp
}
  return nil
}

func (p *TalkServiceGetFriendRequestsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastSeenSeqId = v
}
  return nil
}

func (p *TalkServiceGetFriendRequestsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFriendRequests_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFriendRequestsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "direction", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err) }
  return err
}

func (p *TalkServiceGetFriendRequestsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSeenSeqId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastSeenSeqId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSeenSeqId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenSeqId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastSeenSeqId: ", p), err) }
  return err
}

func (p *TalkServiceGetFriendRequestsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFriendRequestsResult struct {
  Success []*FriendRequest `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFriendRequestsResult() *TalkServiceGetFriendRequestsResult {
  return &TalkServiceGetFriendRequestsResult{}
}

var TalkServiceGetFriendRequestsResult_Success_DEFAULT []*FriendRequest

func (p *TalkServiceGetFriendRequestsResult) GetSuccess() []*FriendRequest {
  return p.Success
}
var TalkServiceGetFriendRequestsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetFriendRequestsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetFriendRequestsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetFriendRequestsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetFriendRequestsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetFriendRequestsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFriendRequestsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendRequest, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem530 := &FriendRequest{}
    if err := _elem530.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem530), err)
    }
    p.Success = append(p.Success, _elem530)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetFriendRequestsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetFriendRequestsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFriendRequests_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFriendRequestsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFriendRequestsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFriendRequestsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFriendRequestsResult(%+v)", *p)
}

type TalkServiceGetRingtoneArgs struct {
}

func NewTalkServiceGetRingtoneArgs() *TalkServiceGetRingtoneArgs {
  return &TalkServiceGetRingtoneArgs{}
}

func (p *TalkServiceGetRingtoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRingtone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingtoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingtoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRingtoneResult struct {
  Success *Ringtone `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRingtoneResult() *TalkServiceGetRingtoneResult {
  return &TalkServiceGetRingtoneResult{}
}

var TalkServiceGetRingtoneResult_Success_DEFAULT *Ringtone
func (p *TalkServiceGetRingtoneResult) GetSuccess() *Ringtone {
  if !p.IsSetSuccess() {
    return TalkServiceGetRingtoneResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRingtoneResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRingtoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRingtoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRingtoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRingtoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRingtoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ringtone{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRingtone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingtoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingtoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingtoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingtoneResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Profile
type TalkServiceUpdateProfileArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Profile *Profile `thrift:"profile,2" db:"profile" json:"profile"`
}

func NewTalkServiceUpdateProfileArgs() *TalkServiceUpdateProfileArgs {
  return &TalkServiceUpdateProfileArgs{}
}


func (p *TalkServiceUpdateProfileArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceUpdateProfileArgs_Profile_DEFAULT *Profile
func (p *TalkServiceUpdateProfileArgs) GetProfile() *Profile {
  if !p.IsSetProfile() {
    return TalkServiceUpdateProfileArgs_Profile_DEFAULT
  }
return p.Profile
}
func (p *TalkServiceUpdateProfileArgs) IsSetProfile() bool {
  return p.Profile != nil
}

func (p *TalkServiceUpdateProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateProfileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Profile = &Profile{}
  if err := p.Profile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Profile), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profile", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:profile: ", p), err) }
  if err := p.Profile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Profile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:profile: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileResult() *TalkServiceUpdateProfileResult {
  return &TalkServiceUpdateProfileResult{}
}

var TalkServiceUpdateProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileResult(%+v)", *p)
}

// Attributes:
//  - LastRev
//  - Badge
type TalkServiceNotifySleepArgs struct {
  // unused field # 1
  LastRev int64 `thrift:"lastRev,2" db:"lastRev" json:"lastRev"`
  Badge int32 `thrift:"badge,3" db:"badge" json:"badge"`
}

func NewTalkServiceNotifySleepArgs() *TalkServiceNotifySleepArgs {
  return &TalkServiceNotifySleepArgs{}
}


func (p *TalkServiceNotifySleepArgs) GetLastRev() int64 {
  return p.LastRev
}

func (p *TalkServiceNotifySleepArgs) GetBadge() int32 {
  return p.Badge
}
func (p *TalkServiceNotifySleepArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifySleepArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastRev = v
}
  return nil
}

func (p *TalkServiceNotifySleepArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Badge = v
}
  return nil
}

func (p *TalkServiceNotifySleepArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifySleep_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifySleepArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRev: ", p), err) }
  return err
}

func (p *TalkServiceNotifySleepArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "badge", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:badge: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Badge)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.badge (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:badge: ", p), err) }
  return err
}

func (p *TalkServiceNotifySleepArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifySleepArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifySleepResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifySleepResult() *TalkServiceNotifySleepResult {
  return &TalkServiceNotifySleepResult{}
}

var TalkServiceNotifySleepResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifySleepResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifySleepResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifySleepResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifySleepResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifySleepResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifySleepResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifySleep_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifySleepResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifySleepResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifySleepResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs struct {
  // unused field # 1
  SnsIdType SnSIdTyoe `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
  SnsAccessToken string `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
  IdentityCredential *IdentityCredential `thrift:"identityCredential,4" db:"identityCredential" json:"identityCredential"`
  Region string `thrift:"region,5" db:"region" json:"region"`
  UdidHash string `thrift:"udidHash,6" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,7" db:"deviceInfo" json:"deviceInfo"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,8" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithSnsIdAndIdentityCredentialArgs() *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs {
  return &TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs{}
}


func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetSnsIdType() SnSIdTyoe {
  return p.SnsIdType
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetSnsAccessToken() string {
  return p.SnsAccessToken
}
var TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT *IdentityCredential
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetIdentityCredential() *IdentityCredential {
  if !p.IsSetIdentityCredential() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT
  }
return p.IdentityCredential
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) IsSetIdentityCredential() bool {
  return p.IdentityCredential != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SnSIdTyoe(v)
  p.SnsIdType = temp
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SnsAccessToken = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.IdentityCredential = &IdentityCredential{}
  if err := p.IdentityCredential.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentityCredential), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithSnsIdAndIdentityCredential_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsIdType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SnsIdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsAccessToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SnsAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityCredential", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:identityCredential: ", p), err) }
  if err := p.IdentityCredential.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentityCredential), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:identityCredential: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "region", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:region: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:region: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithSnsIdAndIdentityCredentialResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithSnsIdAndIdentityCredentialResult() *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult {
  return &TalkServiceRegisterWithSnsIdAndIdentityCredentialResult{}
}

var TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT string
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithSnsIdAndIdentityCredential_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdAndIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - RemoveFollowerRequest
type TalkServiceRemoveFollowerArgs struct {
  // unused field # 1
  RemoveFollowerRequest *RemoveFollowerRequest `thrift:"removeFollowerRequest,2" db:"removeFollowerRequest" json:"removeFollowerRequest"`
}

func NewTalkServiceRemoveFollowerArgs() *TalkServiceRemoveFollowerArgs {
  return &TalkServiceRemoveFollowerArgs{}
}

var TalkServiceRemoveFollowerArgs_RemoveFollowerRequest_DEFAULT *RemoveFollowerRequest
func (p *TalkServiceRemoveFollowerArgs) GetRemoveFollowerRequest() *RemoveFollowerRequest {
  if !p.IsSetRemoveFollowerRequest() {
    return TalkServiceRemoveFollowerArgs_RemoveFollowerRequest_DEFAULT
  }
return p.RemoveFollowerRequest
}
func (p *TalkServiceRemoveFollowerArgs) IsSetRemoveFollowerRequest() bool {
  return p.RemoveFollowerRequest != nil
}

func (p *TalkServiceRemoveFollowerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.RemoveFollowerRequest = &RemoveFollowerRequest{}
  if err := p.RemoveFollowerRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RemoveFollowerRequest), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeFollower_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFollowerArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "removeFollowerRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:removeFollowerRequest: ", p), err) }
  if err := p.RemoveFollowerRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RemoveFollowerRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:removeFollowerRequest: ", p), err) }
  return err
}

func (p *TalkServiceRemoveFollowerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFollowerArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveFollowerResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveFollowerResult() *TalkServiceRemoveFollowerResult {
  return &TalkServiceRemoveFollowerResult{}
}

var TalkServiceRemoveFollowerResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveFollowerResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveFollowerResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveFollowerResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveFollowerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeFollower_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFollowerResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveFollowerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFollowerResult(%+v)", *p)
}

// Attributes:
//  - Provider
//  - Identifier
//  - Locale
type TalkServiceRequestAccountPasswordResetArgs struct {
  // unused field # 1
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  // unused field # 3
  Provider Provider `thrift:"provider,4" db:"provider" json:"provider"`
  Locale string `thrift:"locale,5" db:"locale" json:"locale"`
}

func NewTalkServiceRequestAccountPasswordResetArgs() *TalkServiceRequestAccountPasswordResetArgs {
  return &TalkServiceRequestAccountPasswordResetArgs{}
}


func (p *TalkServiceRequestAccountPasswordResetArgs) GetProvider() Provider {
  return p.Provider
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetLocale() string {
  return p.Locale
}
func (p *TalkServiceRequestAccountPasswordResetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Provider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestAccountPasswordReset_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:provider: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:locale: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestAccountPasswordResetResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestAccountPasswordResetResult() *TalkServiceRequestAccountPasswordResetResult {
  return &TalkServiceRequestAccountPasswordResetResult{}
}

var TalkServiceRequestAccountPasswordResetResult_E_DEFAULT *TalkException
func (p *TalkServiceRequestAccountPasswordResetResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRequestAccountPasswordResetResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRequestAccountPasswordResetResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestAccountPasswordReset_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetResult(%+v)", *p)
}

// Attributes:
//  - Text
type TalkServiceSendEchoPushArgs struct {
  // unused field # 1
  Text string `thrift:"text,2" db:"text" json:"text"`
}

func NewTalkServiceSendEchoPushArgs() *TalkServiceSendEchoPushArgs {
  return &TalkServiceSendEchoPushArgs{}
}


func (p *TalkServiceSendEchoPushArgs) GetText() string {
  return p.Text
}
func (p *TalkServiceSendEchoPushArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TalkServiceSendEchoPushArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendEchoPush_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendEchoPushArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *TalkServiceSendEchoPushArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendEchoPushArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendEchoPushResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendEchoPushResult() *TalkServiceSendEchoPushResult {
  return &TalkServiceSendEchoPushResult{}
}

var TalkServiceSendEchoPushResult_E_DEFAULT *TalkException
func (p *TalkServiceSendEchoPushResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendEchoPushResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendEchoPushResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendEchoPushResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendEchoPush_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendEchoPushResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendEchoPushResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendEchoPushResult(%+v)", *p)
}

// Attributes:
//  - UnfollowRequest
type TalkServiceUnfollowArgs struct {
  // unused field # 1
  UnfollowRequest *UnfollowRequest `thrift:"unfollowRequest,2" db:"unfollowRequest" json:"unfollowRequest"`
}

func NewTalkServiceUnfollowArgs() *TalkServiceUnfollowArgs {
  return &TalkServiceUnfollowArgs{}
}

var TalkServiceUnfollowArgs_UnfollowRequest_DEFAULT *UnfollowRequest
func (p *TalkServiceUnfollowArgs) GetUnfollowRequest() *UnfollowRequest {
  if !p.IsSetUnfollowRequest() {
    return TalkServiceUnfollowArgs_UnfollowRequest_DEFAULT
  }
return p.UnfollowRequest
}
func (p *TalkServiceUnfollowArgs) IsSetUnfollowRequest() bool {
  return p.UnfollowRequest != nil
}

func (p *TalkServiceUnfollowArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnfollowArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.UnfollowRequest = &UnfollowRequest{}
  if err := p.UnfollowRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnfollowRequest), err)
  }
  return nil
}

func (p *TalkServiceUnfollowArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unfollow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnfollowArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unfollowRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unfollowRequest: ", p), err) }
  if err := p.UnfollowRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnfollowRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unfollowRequest: ", p), err) }
  return err
}

func (p *TalkServiceUnfollowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnfollowArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnfollowResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnfollowResult() *TalkServiceUnfollowResult {
  return &TalkServiceUnfollowResult{}
}

var TalkServiceUnfollowResult_E_DEFAULT *TalkException
func (p *TalkServiceUnfollowResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnfollowResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnfollowResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnfollowResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnfollowResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnfollowResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unfollow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnfollowResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnfollowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnfollowResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - MemberMids
//  - MediaType
type TalkServiceInviteIntoGroupCallArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  MemberMids []string `thrift:"memberMids,3" db:"memberMids" json:"memberMids"`
  MediaType MediaType `thrift:"mediaType,4" db:"mediaType" json:"mediaType"`
}

func NewTalkServiceInviteIntoGroupCallArgs() *TalkServiceInviteIntoGroupCallArgs {
  return &TalkServiceInviteIntoGroupCallArgs{}
}


func (p *TalkServiceInviteIntoGroupCallArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceInviteIntoGroupCallArgs) GetMemberMids() []string {
  return p.MemberMids
}

func (p *TalkServiceInviteIntoGroupCallArgs) GetMediaType() MediaType {
  return p.MediaType
}
func (p *TalkServiceInviteIntoGroupCallArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem531 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem531 = v
}
    p.MemberMids = append(p.MemberMids, _elem531)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := MediaType(v)
  p.MediaType = temp
}
  return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoGroupCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoGroupCallArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoGroupCallArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:memberMids: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoGroupCallArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mediaType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mediaType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mediaType: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoGroupCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoGroupCallArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoGroupCallResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoGroupCallResult() *TalkServiceInviteIntoGroupCallResult {
  return &TalkServiceInviteIntoGroupCallResult{}
}

var TalkServiceInviteIntoGroupCallResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoGroupCallResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoGroupCallResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoGroupCallResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoGroupCallResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoGroupCallResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoGroupCallResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoGroupCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoGroupCallResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoGroupCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoGroupCallResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceCancelChatInvitationArgs struct {
  Request *CancelChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCancelChatInvitationArgs() *TalkServiceCancelChatInvitationArgs {
  return &TalkServiceCancelChatInvitationArgs{}
}

var TalkServiceCancelChatInvitationArgs_Request_DEFAULT *CancelChatInvitationRequest
func (p *TalkServiceCancelChatInvitationArgs) GetRequest() *CancelChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceCancelChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceCancelChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceCancelChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &CancelChatInvitationRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceCancelChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCancelChatInvitationResult struct {
  Success *CancelChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCancelChatInvitationResult() *TalkServiceCancelChatInvitationResult {
  return &TalkServiceCancelChatInvitationResult{}
}

var TalkServiceCancelChatInvitationResult_Success_DEFAULT *CancelChatInvitationResponse
func (p *TalkServiceCancelChatInvitationResult) GetSuccess() *CancelChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceCancelChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCancelChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceCancelChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCancelChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCancelChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCancelChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCancelChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CancelChatInvitationResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCancelChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCancelChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceFindChatByTicketArgs struct {
  Request *FindChatByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceFindChatByTicketArgs() *TalkServiceFindChatByTicketArgs {
  return &TalkServiceFindChatByTicketArgs{}
}

var TalkServiceFindChatByTicketArgs_Request_DEFAULT *FindChatByTicketRequest
func (p *TalkServiceFindChatByTicketArgs) GetRequest() *FindChatByTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceFindChatByTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceFindChatByTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceFindChatByTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &FindChatByTicketRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findChatByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindChatByTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceFindChatByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindChatByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindChatByTicketResult struct {
  Success *FindChatByTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindChatByTicketResult() *TalkServiceFindChatByTicketResult {
  return &TalkServiceFindChatByTicketResult{}
}

var TalkServiceFindChatByTicketResult_Success_DEFAULT *FindChatByTicketResponse
func (p *TalkServiceFindChatByTicketResult) GetSuccess() *FindChatByTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceFindChatByTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindChatByTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceFindChatByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindChatByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindChatByTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindChatByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindChatByTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &FindChatByTicketResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findChatByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindChatByTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindChatByTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindChatByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindChatByTicketResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetAllContactIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllContactIdsArgs() *TalkServiceGetAllContactIdsArgs {
  return &TalkServiceGetAllContactIdsArgs{}
}


func (p *TalkServiceGetAllContactIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetAllContactIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetAllContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllContactIdsResult() *TalkServiceGetAllContactIdsResult {
  return &TalkServiceGetAllContactIdsResult{}
}

var TalkServiceGetAllContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetAllContactIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetAllContactIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAllContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAllContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAllContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAllContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAllContactIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem532 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem532 = v
}
    p.Success = append(p.Success, _elem532)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllContactIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllContactIdsResult(%+v)", *p)
}

// Attributes:
//  - ChatRoomMids
//  - SyncReason
type TalkServiceGetChatRoomBGMsArgs struct {
  // unused field # 1
  ChatRoomMids []string `thrift:"chatRoomMids,2" db:"chatRoomMids" json:"chatRoomMids"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetChatRoomBGMsArgs() *TalkServiceGetChatRoomBGMsArgs {
  return &TalkServiceGetChatRoomBGMsArgs{}
}


func (p *TalkServiceGetChatRoomBGMsArgs) GetChatRoomMids() []string {
  return p.ChatRoomMids
}

func (p *TalkServiceGetChatRoomBGMsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetChatRoomBGMsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomBGMsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.ChatRoomMids =  tSet
  for i := 0; i < size; i ++ {
var _elem533 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem533 = v
}
    p.ChatRoomMids = append(p.ChatRoomMids, _elem533)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomBGMsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetChatRoomBGMsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomBGMs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomBGMsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomMids", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.ChatRoomMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.ChatRoomMids); i++ {
    for j := i+1; j<len(p.ChatRoomMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.ChatRoomMids[i], p.ChatRoomMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.ChatRoomMids))
      }
    }
  }
  for _, v := range p.ChatRoomMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMids: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomBGMsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomBGMsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomBGMsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatRoomBGMsResult struct {
  Success map[string]*ChatRoomBGM `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatRoomBGMsResult() *TalkServiceGetChatRoomBGMsResult {
  return &TalkServiceGetChatRoomBGMsResult{}
}

var TalkServiceGetChatRoomBGMsResult_Success_DEFAULT map[string]*ChatRoomBGM

func (p *TalkServiceGetChatRoomBGMsResult) GetSuccess() map[string]*ChatRoomBGM {
  return p.Success
}
var TalkServiceGetChatRoomBGMsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatRoomBGMsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatRoomBGMsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatRoomBGMsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatRoomBGMsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatRoomBGMsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomBGMsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ChatRoomBGM, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key534 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key534 = v
}
    _val535 := &ChatRoomBGM{}
    if err := _val535.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val535), err)
    }
    p.Success[_key534] = _val535
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomBGMsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomBGMsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomBGMs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomBGMsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomBGMsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomBGMsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomBGMsResult(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
type TalkServiceGetE2EEGroupSharedKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
  GroupKeyId int32 `thrift:"groupKeyId,4" db:"groupKeyId" json:"groupKeyId"`
}

func NewTalkServiceGetE2EEGroupSharedKeyArgs() *TalkServiceGetE2EEGroupSharedKeyArgs {
  return &TalkServiceGetE2EEGroupSharedKeyArgs{}
}


func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetGroupKeyId() int32 {
  return p.GroupKeyId
}
func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GroupKeyId = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEGroupSharedKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupKeyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groupKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GroupKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groupKeyId: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEGroupSharedKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEGroupSharedKeyResult() *TalkServiceGetE2EEGroupSharedKeyResult {
  return &TalkServiceGetE2EEGroupSharedKeyResult{}
}

var TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEGroupSharedKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetGroupIdsInvitedArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetGroupIdsInvitedArgs() *TalkServiceGetGroupIdsInvitedArgs {
  return &TalkServiceGetGroupIdsInvitedArgs{}
}


func (p *TalkServiceGetGroupIdsInvitedArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetGroupIdsInvitedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupIdsInvitedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetGroupIdsInvitedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupIdsInvited_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupIdsInvitedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupIdsInvitedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupIdsInvitedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupIdsInvitedResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupIdsInvitedResult() *TalkServiceGetGroupIdsInvitedResult {
  return &TalkServiceGetGroupIdsInvitedResult{}
}

var TalkServiceGetGroupIdsInvitedResult_Success_DEFAULT []string

func (p *TalkServiceGetGroupIdsInvitedResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetGroupIdsInvitedResult_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupIdsInvitedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupIdsInvitedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupIdsInvitedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem536 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem536 = v
}
    p.Success = append(p.Success, _elem536)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupIdsInvited_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupIdsInvitedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupIdsInvitedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupIdsInvitedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupIdsInvitedResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetProfileArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetProfileArgs() *TalkServiceGetProfileArgs {
  return &TalkServiceGetProfileArgs{}
}


func (p *TalkServiceGetProfileArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProfileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetProfileResult struct {
  Success *Profile `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetProfileResult() *TalkServiceGetProfileResult {
  return &TalkServiceGetProfileResult{}
}

var TalkServiceGetProfileResult_Success_DEFAULT *Profile
func (p *TalkServiceGetProfileResult) GetSuccess() *Profile {
  if !p.IsSetSuccess() {
    return TalkServiceGetProfileResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceGetProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Profile{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProfileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
type TalkServiceNotifyUpdatedArgs struct {
  // unused field # 1
  LastRev int64 `thrift:"lastRev,2" db:"lastRev" json:"lastRev"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,3" db:"deviceInfo" json:"deviceInfo"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  OldUdidHash string `thrift:"oldUdidHash,5" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceNotifyUpdatedArgs() *TalkServiceNotifyUpdatedArgs {
  return &TalkServiceNotifyUpdatedArgs{}
}


func (p *TalkServiceNotifyUpdatedArgs) GetLastRev() int64 {
  return p.LastRev
}
var TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceNotifyUpdatedArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceNotifyUpdatedArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceNotifyUpdatedArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceNotifyUpdatedArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceNotifyUpdatedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastRev = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyUpdated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRev: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldUdidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyUpdatedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyUpdatedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyUpdatedResult() *TalkServiceNotifyUpdatedResult {
  return &TalkServiceNotifyUpdatedResult{}
}

var TalkServiceNotifyUpdatedResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifyUpdatedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifyUpdatedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifyUpdatedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifyUpdatedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyUpdated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifyUpdatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyUpdatedResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Mid
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithSnsIdArgs struct {
  // unused field # 1
  SnsIdType SnSIdTyoe `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
  SnsAccessToken string `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
  Region string `thrift:"region,4" db:"region" json:"region"`
  UdidHash string `thrift:"udidHash,5" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,6" db:"deviceInfo" json:"deviceInfo"`
  Mid string `thrift:"mid,7" db:"mid" json:"mid"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,8" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithSnsIdArgs() *TalkServiceRegisterWithSnsIdArgs {
  return &TalkServiceRegisterWithSnsIdArgs{}
}


func (p *TalkServiceRegisterWithSnsIdArgs) GetSnsIdType() SnSIdTyoe {
  return p.SnsIdType
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetSnsAccessToken() string {
  return p.SnsAccessToken
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceRegisterWithSnsIdArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceRegisterWithSnsIdArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceRegisterWithSnsIdArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithSnsIdArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SnSIdTyoe(v)
  p.SnsIdType = temp
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SnsAccessToken = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithSnsId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsIdType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SnsIdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsAccessToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SnsAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "region", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:region: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:region: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:mid: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithSnsIdResult struct {
  Success *RegisterWithSnsIdResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithSnsIdResult() *TalkServiceRegisterWithSnsIdResult {
  return &TalkServiceRegisterWithSnsIdResult{}
}

var TalkServiceRegisterWithSnsIdResult_Success_DEFAULT *RegisterWithSnsIdResult_
func (p *TalkServiceRegisterWithSnsIdResult) GetSuccess() *RegisterWithSnsIdResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterWithSnsIdResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterWithSnsIdResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterWithSnsIdResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterWithSnsIdResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterWithSnsIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterWithSnsIdResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterWithSnsIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RegisterWithSnsIdResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithSnsId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - MidOrEMid
type TalkServiceRemoveFriendRequestArgs struct {
  Direction Direction `thrift:"direction,1" db:"direction" json:"direction"`
  MidOrEMid string `thrift:"midOrEMid,2" db:"midOrEMid" json:"midOrEMid"`
}

func NewTalkServiceRemoveFriendRequestArgs() *TalkServiceRemoveFriendRequestArgs {
  return &TalkServiceRemoveFriendRequestArgs{}
}


func (p *TalkServiceRemoveFriendRequestArgs) GetDirection() Direction {
  return p.Direction
}

func (p *TalkServiceRemoveFriendRequestArgs) GetMidOrEMid() string {
  return p.MidOrEMid
}
func (p *TalkServiceRemoveFriendRequestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Direction(v)
  p.Direction = temp
}
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MidOrEMid = v
}
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeFriendRequest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "direction", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err) }
  return err
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "midOrEMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midOrEMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MidOrEMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midOrEMid: ", p), err) }
  return err
}

func (p *TalkServiceRemoveFriendRequestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveFriendRequestResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveFriendRequestResult() *TalkServiceRemoveFriendRequestResult {
  return &TalkServiceRemoveFriendRequestResult{}
}

var TalkServiceRemoveFriendRequestResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveFriendRequestResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveFriendRequestResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveFriendRequestResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveFriendRequestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFriendRequestResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveFriendRequestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeFriendRequest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFriendRequestResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveFriendRequestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceOpenAuthSessionArgs struct {
  // unused field # 1
  Request *AuthSessionRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceOpenAuthSessionArgs() *TalkServiceOpenAuthSessionArgs {
  return &TalkServiceOpenAuthSessionArgs{}
}

var TalkServiceOpenAuthSessionArgs_Request_DEFAULT *AuthSessionRequest
func (p *TalkServiceOpenAuthSessionArgs) GetRequest() *AuthSessionRequest {
  if !p.IsSetRequest() {
    return TalkServiceOpenAuthSessionArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceOpenAuthSessionArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceOpenAuthSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceOpenAuthSessionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &AuthSessionRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceOpenAuthSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "openAuthSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceOpenAuthSessionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err) }
  return err
}

func (p *TalkServiceOpenAuthSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceOpenAuthSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceOpenAuthSessionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceOpenAuthSessionResult() *TalkServiceOpenAuthSessionResult {
  return &TalkServiceOpenAuthSessionResult{}
}

var TalkServiceOpenAuthSessionResult_Success_DEFAULT string
func (p *TalkServiceOpenAuthSessionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceOpenAuthSessionResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceOpenAuthSessionResult_E_DEFAULT *TalkException
func (p *TalkServiceOpenAuthSessionResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceOpenAuthSessionResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceOpenAuthSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceOpenAuthSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceOpenAuthSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceOpenAuthSessionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceOpenAuthSessionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceOpenAuthSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "openAuthSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceOpenAuthSessionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceOpenAuthSessionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceOpenAuthSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceOpenAuthSessionResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PinCode
//  - ErrorCode
//  - PublicKey
//  - EncryptedKeyChain
//  - HashKeyChain
type TalkServiceVerifyQrcodeWithE2EEArgs struct {
  // unused field # 1
  Verifier string `thrift:"verifier,2" db:"verifier" json:"verifier"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
  ErrorCode ErrorCode `thrift:"errorCode,4" db:"errorCode" json:"errorCode"`
  PublicKey *E2EEPublicKey `thrift:"publicKey,5" db:"publicKey" json:"publicKey"`
  EncryptedKeyChain []byte `thrift:"encryptedKeyChain,6" db:"encryptedKeyChain" json:"encryptedKeyChain"`
  HashKeyChain []byte `thrift:"hashKeyChain,7" db:"hashKeyChain" json:"hashKeyChain"`
}

func NewTalkServiceVerifyQrcodeWithE2EEArgs() *TalkServiceVerifyQrcodeWithE2EEArgs {
  return &TalkServiceVerifyQrcodeWithE2EEArgs{}
}


func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetVerifier() string {
  return p.Verifier
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetPinCode() string {
  return p.PinCode
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetErrorCode() ErrorCode {
  return p.ErrorCode
}
var TalkServiceVerifyQrcodeWithE2EEArgs_PublicKey_DEFAULT *E2EEPublicKey
func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetPublicKey() *E2EEPublicKey {
  if !p.IsSetPublicKey() {
    return TalkServiceVerifyQrcodeWithE2EEArgs_PublicKey_DEFAULT
  }
return p.PublicKey
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetEncryptedKeyChain() []byte {
  return p.EncryptedKeyChain
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) GetHashKeyChain() []byte {
  return p.HashKeyChain
}
func (p *TalkServiceVerifyQrcodeWithE2EEArgs) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.PublicKey = &E2EEPublicKey{}
  if err := p.PublicKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EncryptedKeyChain = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.HashKeyChain = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcodeWithE2EE_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:errorCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicKey", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:publicKey: ", p), err) }
  if err := p.PublicKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:publicKey: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedKeyChain", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:encryptedKeyChain: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EncryptedKeyChain); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedKeyChain (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:encryptedKeyChain: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hashKeyChain", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:hashKeyChain: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.HashKeyChain); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashKeyChain (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:hashKeyChain: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeWithE2EEArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyQrcodeWithE2EEResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyQrcodeWithE2EEResult() *TalkServiceVerifyQrcodeWithE2EEResult {
  return &TalkServiceVerifyQrcodeWithE2EEResult{}
}

var TalkServiceVerifyQrcodeWithE2EEResult_Success_DEFAULT string
func (p *TalkServiceVerifyQrcodeWithE2EEResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyQrcodeWithE2EEResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceVerifyQrcodeWithE2EEResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyQrcodeWithE2EEResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyQrcodeWithE2EEResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyQrcodeWithE2EEResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcodeWithE2EE_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeWithE2EEResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeWithE2EEResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetBalanceArgs struct {
  Request *GetBalanceRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetBalanceArgs() *TalkServiceGetBalanceArgs {
  return &TalkServiceGetBalanceArgs{}
}

var TalkServiceGetBalanceArgs_Request_DEFAULT *GetBalanceRequest
func (p *TalkServiceGetBalanceArgs) GetRequest() *GetBalanceRequest {
  if !p.IsSetRequest() {
    return TalkServiceGetBalanceArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceGetBalanceArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetBalanceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBalanceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetBalanceRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetBalanceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBalance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBalanceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetBalanceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBalanceResult struct {
  Success *GetBalanceResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBalanceResult() *TalkServiceGetBalanceResult {
  return &TalkServiceGetBalanceResult{}
}

var TalkServiceGetBalanceResult_Success_DEFAULT *GetBalanceResponse
func (p *TalkServiceGetBalanceResult) GetSuccess() *GetBalanceResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetBalanceResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetBalanceResult_E_DEFAULT *TalkException
func (p *TalkServiceGetBalanceResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBalanceResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBalanceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBalanceResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBalanceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBalanceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetBalanceResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetBalanceResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBalanceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBalance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBalanceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBalanceResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBalanceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBalanceResult(%+v)", *p)
}

type TalkServiceUnregisterUserAndDeviceArgs struct {
}

func NewTalkServiceUnregisterUserAndDeviceArgs() *TalkServiceUnregisterUserAndDeviceArgs {
  return &TalkServiceUnregisterUserAndDeviceArgs{}
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unregisterUserAndDevice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUnregisterUserAndDeviceResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnregisterUserAndDeviceResult() *TalkServiceUnregisterUserAndDeviceResult {
  return &TalkServiceUnregisterUserAndDeviceResult{}
}

var TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT string
func (p *TalkServiceUnregisterUserAndDeviceResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT *TalkException
func (p *TalkServiceUnregisterUserAndDeviceResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unregisterUserAndDevice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - Token
type TalkServiceUpdateNotificationTokenArgs struct {
  // unused field # 1
  Type UpdateNotificationType `thrift:"type,2" db:"type" json:"type"`
  Token string `thrift:"token,3" db:"token" json:"token"`
}

func NewTalkServiceUpdateNotificationTokenArgs() *TalkServiceUpdateNotificationTokenArgs {
  return &TalkServiceUpdateNotificationTokenArgs{}
}


func (p *TalkServiceUpdateNotificationTokenArgs) GetType() UpdateNotificationType {
  return p.Type
}

func (p *TalkServiceUpdateNotificationTokenArgs) GetToken() string {
  return p.Token
}
func (p *TalkServiceUpdateNotificationTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UpdateNotificationType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateNotificationToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:token: ", p), err) }
  return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateNotificationTokenArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateNotificationTokenResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateNotificationTokenResult() *TalkServiceUpdateNotificationTokenResult {
  return &TalkServiceUpdateNotificationTokenResult{}
}

var TalkServiceUpdateNotificationTokenResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateNotificationTokenResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateNotificationTokenResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateNotificationTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateNotificationToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateNotificationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateNotificationTokenResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
type TalkServiceVerifyPhoneNumberArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,5" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
  OldUdidHash string `thrift:"oldUdidHash,6" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceVerifyPhoneNumberArgs() *TalkServiceVerifyPhoneNumberArgs {
  return &TalkServiceVerifyPhoneNumberArgs{}
}


func (p *TalkServiceVerifyPhoneNumberArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetPinCode() string {
  return p.PinCode
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceVerifyPhoneNumberArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPhoneNumber_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldUdidHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyPhoneNumberResult struct {
  Success *PhoneVerificationResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyPhoneNumberResult() *TalkServiceVerifyPhoneNumberResult {
  return &TalkServiceVerifyPhoneNumberResult{}
}

var TalkServiceVerifyPhoneNumberResult_Success_DEFAULT *PhoneVerificationResult_
func (p *TalkServiceVerifyPhoneNumberResult) GetSuccess() *PhoneVerificationResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyPhoneNumberResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceVerifyPhoneNumberResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyPhoneNumberResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyPhoneNumberResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyPhoneNumberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PhoneVerificationResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPhoneNumber_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyPhoneNumberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyPhoneNumberResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type TalkServiceCancelGroupInvitationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceCancelGroupInvitationArgs() *TalkServiceCancelGroupInvitationArgs {
  return &TalkServiceCancelGroupInvitationArgs{}
}


func (p *TalkServiceCancelGroupInvitationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceCancelGroupInvitationArgs) GetGroupId() string {
  return p.GroupId
}

func (p *TalkServiceCancelGroupInvitationArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceCancelGroupInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelGroupInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceCancelGroupInvitationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceCancelGroupInvitationArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem537 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem537 = v
}
    p.ContactIds = append(p.ContactIds, _elem537)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelGroupInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelGroupInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceCancelGroupInvitationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceCancelGroupInvitationArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceCancelGroupInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceCancelGroupInvitationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCancelGroupInvitationResult() *TalkServiceCancelGroupInvitationResult {
  return &TalkServiceCancelGroupInvitationResult{}
}

var TalkServiceCancelGroupInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceCancelGroupInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCancelGroupInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCancelGroupInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCancelGroupInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelGroupInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCancelGroupInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelGroupInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelGroupInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCancelGroupInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ContactIds
type TalkServiceCreateRoomV2Args struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ContactIds []string `thrift:"contactIds,2" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceCreateRoomV2Args() *TalkServiceCreateRoomV2Args {
  return &TalkServiceCreateRoomV2Args{}
}


func (p *TalkServiceCreateRoomV2Args) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceCreateRoomV2Args) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceCreateRoomV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateRoomV2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceCreateRoomV2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem538 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem538 = v
}
    p.ContactIds = append(p.ContactIds, _elem538)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceCreateRoomV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createRoomV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateRoomV2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceCreateRoomV2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceCreateRoomV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateRoomV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateRoomV2Result struct {
  Success *Room `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateRoomV2Result() *TalkServiceCreateRoomV2Result {
  return &TalkServiceCreateRoomV2Result{}
}

var TalkServiceCreateRoomV2Result_Success_DEFAULT *Room
func (p *TalkServiceCreateRoomV2Result) GetSuccess() *Room {
  if !p.IsSetSuccess() {
    return TalkServiceCreateRoomV2Result_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCreateRoomV2Result_E_DEFAULT *TalkException
func (p *TalkServiceCreateRoomV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateRoomV2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateRoomV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateRoomV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateRoomV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateRoomV2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Room{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCreateRoomV2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateRoomV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createRoomV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateRoomV2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateRoomV2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateRoomV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateRoomV2Result(%+v)", *p)
}

// Attributes:
//  - SearchId
//  - Reference
type TalkServiceFindContactByMetaTagArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindContactByMetaTagArgs() *TalkServiceFindContactByMetaTagArgs {
  return &TalkServiceFindContactByMetaTagArgs{}
}


func (p *TalkServiceFindContactByMetaTagArgs) GetSearchId() string {
  return p.SearchId
}

func (p *TalkServiceFindContactByMetaTagArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindContactByMetaTagArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByMetaTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByMetaTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByMetaTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByMetaTagResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByMetaTagResult() *TalkServiceFindContactByMetaTagResult {
  return &TalkServiceFindContactByMetaTagResult{}
}

var TalkServiceFindContactByMetaTagResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByMetaTagResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByMetaTagResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByMetaTagResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByMetaTagResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByMetaTagResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByMetaTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByMetaTagResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByMetaTagResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByMetaTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByMetaTagResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByMetaTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByMetaTagResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetChatsArgs struct {
  Request *GetChatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetChatsArgs() *TalkServiceGetChatsArgs {
  return &TalkServiceGetChatsArgs{}
}

var TalkServiceGetChatsArgs_Request_DEFAULT *GetChatsRequest
func (p *TalkServiceGetChatsArgs) GetRequest() *GetChatsRequest {
  if !p.IsSetRequest() {
    return TalkServiceGetChatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceGetChatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetChatsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetChatsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetChatsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetChatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatsResult struct {
  Success *GetChatsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatsResult() *TalkServiceGetChatsResult {
  return &TalkServiceGetChatsResult{}
}

var TalkServiceGetChatsResult_Success_DEFAULT *GetChatsResponse
func (p *TalkServiceGetChatsResult) GetSuccess() *GetChatsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetChatsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetChatsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetChatsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatsResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetGroupIdsJoinedArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetGroupIdsJoinedArgs() *TalkServiceGetGroupIdsJoinedArgs {
  return &TalkServiceGetGroupIdsJoinedArgs{}
}


func (p *TalkServiceGetGroupIdsJoinedArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetGroupIdsJoinedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupIdsJoinedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetGroupIdsJoinedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupIdsJoined_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupIdsJoinedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupIdsJoinedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupIdsJoinedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupIdsJoinedResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupIdsJoinedResult() *TalkServiceGetGroupIdsJoinedResult {
  return &TalkServiceGetGroupIdsJoinedResult{}
}

var TalkServiceGetGroupIdsJoinedResult_Success_DEFAULT []string

func (p *TalkServiceGetGroupIdsJoinedResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetGroupIdsJoinedResult_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupIdsJoinedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupIdsJoinedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupIdsJoinedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem539 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem539 = v
}
    p.Success = append(p.Success, _elem539)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupIdsJoined_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupIdsJoinedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupIdsJoinedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupIdsJoinedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupIdsJoinedResult(%+v)", *p)
}

// Attributes:
//  - RoomIds
type TalkServiceGetRoomsV2Args struct {
  // unused field # 1
  RoomIds []string `thrift:"roomIds,2" db:"roomIds" json:"roomIds"`
}

func NewTalkServiceGetRoomsV2Args() *TalkServiceGetRoomsV2Args {
  return &TalkServiceGetRoomsV2Args{}
}


func (p *TalkServiceGetRoomsV2Args) GetRoomIds() []string {
  return p.RoomIds
}
func (p *TalkServiceGetRoomsV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRoomsV2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.RoomIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem540 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem540 = v
}
    p.RoomIds = append(p.RoomIds, _elem540)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetRoomsV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRoomsV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRoomsV2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roomIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.RoomIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RoomIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomIds: ", p), err) }
  return err
}

func (p *TalkServiceGetRoomsV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRoomsV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRoomsV2Result struct {
  Success []*Room `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRoomsV2Result() *TalkServiceGetRoomsV2Result {
  return &TalkServiceGetRoomsV2Result{}
}

var TalkServiceGetRoomsV2Result_Success_DEFAULT []*Room

func (p *TalkServiceGetRoomsV2Result) GetSuccess() []*Room {
  return p.Success
}
var TalkServiceGetRoomsV2Result_E_DEFAULT *TalkException
func (p *TalkServiceGetRoomsV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRoomsV2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRoomsV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRoomsV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRoomsV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRoomsV2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Room, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem541 := &Room{}
    if err := _elem541.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem541), err)
    }
    p.Success = append(p.Success, _elem541)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetRoomsV2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRoomsV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRoomsV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRoomsV2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRoomsV2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRoomsV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRoomsV2Result(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceReissueChatTicketArgs struct {
  Request *ReissueChatTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceReissueChatTicketArgs() *TalkServiceReissueChatTicketArgs {
  return &TalkServiceReissueChatTicketArgs{}
}

var TalkServiceReissueChatTicketArgs_Request_DEFAULT *ReissueChatTicketRequest
func (p *TalkServiceReissueChatTicketArgs) GetRequest() *ReissueChatTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceReissueChatTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceReissueChatTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceReissueChatTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ReissueChatTicketRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reissueChatTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceReissueChatTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueChatTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueChatTicketResult struct {
  Success *ReissueChatTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReissueChatTicketResult() *TalkServiceReissueChatTicketResult {
  return &TalkServiceReissueChatTicketResult{}
}

var TalkServiceReissueChatTicketResult_Success_DEFAULT *ReissueChatTicketResponse
func (p *TalkServiceReissueChatTicketResult) GetSuccess() *ReissueChatTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceReissueChatTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceReissueChatTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceReissueChatTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReissueChatTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReissueChatTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceReissueChatTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReissueChatTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ReissueChatTicketResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reissueChatTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueChatTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueChatTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueChatTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueChatTicketResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Message
type TalkServiceSendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  Message *Message `thrift:"message,2" db:"message" json:"message"`
}

func NewTalkServiceSendMessageArgs() *TalkServiceSendMessageArgs {
  return &TalkServiceSendMessageArgs{}
}


func (p *TalkServiceSendMessageArgs) GetSeq() int32 {
  return p.Seq
}
var TalkServiceSendMessageArgs_Message_DEFAULT *Message
func (p *TalkServiceSendMessageArgs) GetMessage() *Message {
  if !p.IsSetMessage() {
    return TalkServiceSendMessageArgs_Message_DEFAULT
  }
return p.Message
}
func (p *TalkServiceSendMessageArgs) IsSetMessage() bool {
  return p.Message != nil
}

func (p *TalkServiceSendMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendMessageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Message = &Message{}
  if err := p.Message.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *TalkServiceSendMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := p.Message.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TalkServiceSendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSendMessageResult struct {
  Success *Message `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendMessageResult() *TalkServiceSendMessageResult {
  return &TalkServiceSendMessageResult{}
}

var TalkServiceSendMessageResult_Success_DEFAULT *Message
func (p *TalkServiceSendMessageResult) GetSuccess() *Message {
  if !p.IsSetSuccess() {
    return TalkServiceSendMessageResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceSendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceSendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceSendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Message{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendMessageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendMessageResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendMessageResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - MessageId
type TalkServiceUnsendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  MessageId string `thrift:"messageId,2" db:"messageId" json:"messageId"`
}

func NewTalkServiceUnsendMessageArgs() *TalkServiceUnsendMessageArgs {
  return &TalkServiceUnsendMessageArgs{}
}


func (p *TalkServiceUnsendMessageArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceUnsendMessageArgs) GetMessageId() string {
  return p.MessageId
}
func (p *TalkServiceUnsendMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceUnsendMessageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *TalkServiceUnsendMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unsendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnsendMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceUnsendMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageId: ", p), err) }
  return err
}

func (p *TalkServiceUnsendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnsendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnsendMessageResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnsendMessageResult() *TalkServiceUnsendMessageResult {
  return &TalkServiceUnsendMessageResult{}
}

var TalkServiceUnsendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceUnsendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnsendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnsendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnsendMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unsendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnsendMessageResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnsendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnsendMessageResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - MediaType
//  - IsInitialHost
//  - Capabilities
type TalkServiceAcquireGroupCallRouteArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  MediaType MediaType `thrift:"mediaType,3" db:"mediaType" json:"mediaType"`
  IsInitialHost bool `thrift:"isInitialHost,4" db:"isInitialHost" json:"isInitialHost"`
  Capabilities []string `thrift:"capabilities,5" db:"capabilities" json:"capabilities"`
}

func NewTalkServiceAcquireGroupCallRouteArgs() *TalkServiceAcquireGroupCallRouteArgs {
  return &TalkServiceAcquireGroupCallRouteArgs{}
}


func (p *TalkServiceAcquireGroupCallRouteArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceAcquireGroupCallRouteArgs) GetMediaType() MediaType {
  return p.MediaType
}

func (p *TalkServiceAcquireGroupCallRouteArgs) GetIsInitialHost() bool {
  return p.IsInitialHost
}

func (p *TalkServiceAcquireGroupCallRouteArgs) GetCapabilities() []string {
  return p.Capabilities
}
func (p *TalkServiceAcquireGroupCallRouteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MediaType(v)
  p.MediaType = temp
}
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsInitialHost = v
}
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Capabilities =  tSlice
  for i := 0; i < size; i ++ {
var _elem542 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem542 = v
}
    p.Capabilities = append(p.Capabilities, _elem542)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireGroupCallRoute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceAcquireGroupCallRouteArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mediaType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mediaType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mediaType: ", p), err) }
  return err
}

func (p *TalkServiceAcquireGroupCallRouteArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isInitialHost", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isInitialHost: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsInitialHost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isInitialHost (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isInitialHost: ", p), err) }
  return err
}

func (p *TalkServiceAcquireGroupCallRouteArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capabilities", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:capabilities: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Capabilities)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Capabilities {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:capabilities: ", p), err) }
  return err
}

func (p *TalkServiceAcquireGroupCallRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcquireGroupCallRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcquireGroupCallRouteResult struct {
  Success *GroupCallRoute `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcquireGroupCallRouteResult() *TalkServiceAcquireGroupCallRouteResult {
  return &TalkServiceAcquireGroupCallRouteResult{}
}

var TalkServiceAcquireGroupCallRouteResult_Success_DEFAULT *GroupCallRoute
func (p *TalkServiceAcquireGroupCallRouteResult) GetSuccess() *GroupCallRoute {
  if !p.IsSetSuccess() {
    return TalkServiceAcquireGroupCallRouteResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceAcquireGroupCallRouteResult_E_DEFAULT *TalkException
func (p *TalkServiceAcquireGroupCallRouteResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcquireGroupCallRouteResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcquireGroupCallRouteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GroupCallRoute{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireGroupCallRoute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcquireGroupCallRouteResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcquireGroupCallRouteResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcquireGroupCallRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcquireGroupCallRouteResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationByTicketArgs struct {
  Request *AcceptChatInvitationByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationByTicketArgs() *TalkServiceAcceptChatInvitationByTicketArgs {
  return &TalkServiceAcceptChatInvitationByTicketArgs{}
}

var TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT *AcceptChatInvitationByTicketRequest
func (p *TalkServiceAcceptChatInvitationByTicketArgs) GetRequest() *AcceptChatInvitationByTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceAcceptChatInvitationByTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &AcceptChatInvitationByTicketRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitationByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcceptChatInvitationByTicketResult struct {
  Success *AcceptChatInvitationByTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationByTicketResult() *TalkServiceAcceptChatInvitationByTicketResult {
  return &TalkServiceAcceptChatInvitationByTicketResult{}
}

var TalkServiceAcceptChatInvitationByTicketResult_Success_DEFAULT *AcceptChatInvitationByTicketResponse
func (p *TalkServiceAcceptChatInvitationByTicketResult) GetSuccess() *AcceptChatInvitationByTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceAcceptChatInvitationByTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptChatInvitationByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptChatInvitationByTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AcceptChatInvitationByTicketResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitationByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketResult(%+v)", *p)
}

// Attributes:
//  - TicketIdWithTag
type TalkServiceFindContactByUserTicketArgs struct {
  // unused field # 1
  TicketIdWithTag string `thrift:"ticketIdWithTag,2" db:"ticketIdWithTag" json:"ticketIdWithTag"`
}

func NewTalkServiceFindContactByUserTicketArgs() *TalkServiceFindContactByUserTicketArgs {
  return &TalkServiceFindContactByUserTicketArgs{}
}


func (p *TalkServiceFindContactByUserTicketArgs) GetTicketIdWithTag() string {
  return p.TicketIdWithTag
}
func (p *TalkServiceFindContactByUserTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TicketIdWithTag = v
}
  return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketIdWithTag", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ticketIdWithTag: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketIdWithTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketIdWithTag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ticketIdWithTag: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByUserTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUserTicketResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUserTicketResult() *TalkServiceFindContactByUserTicketResult {
  return &TalkServiceFindContactByUserTicketResult{}
}

var TalkServiceFindContactByUserTicketResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByUserTicketResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByUserTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByUserTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByUserTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByUserTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByUserTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByUserTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByUserTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUserTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUserTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUserTicketResult(%+v)", *p)
}

// Attributes:
//  - Mid
//  - KeyVersion
//  - KeyId
type TalkServiceGetE2EEPublicKeyArgs struct {
  // unused field # 1
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  KeyVersion int32 `thrift:"keyVersion,3" db:"keyVersion" json:"keyVersion"`
  KeyId int32 `thrift:"keyId,4" db:"keyId" json:"keyId"`
}

func NewTalkServiceGetE2EEPublicKeyArgs() *TalkServiceGetE2EEPublicKeyArgs {
  return &TalkServiceGetE2EEPublicKeyArgs{}
}


func (p *TalkServiceGetE2EEPublicKeyArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyId() int32 {
  return p.KeyId
}
func (p *TalkServiceGetE2EEPublicKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeyId = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyId: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEPublicKeyResult struct {
  Success []*E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEPublicKeyResult() *TalkServiceGetE2EEPublicKeyResult {
  return &TalkServiceGetE2EEPublicKeyResult{}
}

var TalkServiceGetE2EEPublicKeyResult_Success_DEFAULT []*E2EEPublicKey

func (p *TalkServiceGetE2EEPublicKeyResult) GetSuccess() []*E2EEPublicKey {
  return p.Success
}
var TalkServiceGetE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*E2EEPublicKey, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem543 := &E2EEPublicKey{}
    if err := _elem543.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem543), err)
    }
    p.Success = append(p.Success, _elem543)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Provider
//  - Identifier
//  - Verifier
//  - MigrationPincodeSessionId
type TalkServiceRegisterDeviceWithIdentityCredentialArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  Identifier string `thrift:"identifier,3" db:"identifier" json:"identifier"`
  Verifier string `thrift:"verifier,4" db:"verifier" json:"verifier"`
  Provider Provider `thrift:"provider,5" db:"provider" json:"provider"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,6" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterDeviceWithIdentityCredentialArgs() *TalkServiceRegisterDeviceWithIdentityCredentialArgs {
  return &TalkServiceRegisterDeviceWithIdentityCredentialArgs{}
}


func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetProvider() Provider {
  return p.Provider
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetVerifier() string {
  return p.Verifier
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Provider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerDeviceWithIdentityCredential_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identifier: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:verifier: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:provider: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterDeviceWithIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterDeviceWithIdentityCredentialResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterDeviceWithIdentityCredentialResult() *TalkServiceRegisterDeviceWithIdentityCredentialResult {
  return &TalkServiceRegisterDeviceWithIdentityCredentialResult{}
}

var TalkServiceRegisterDeviceWithIdentityCredentialResult_Success_DEFAULT string
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterDeviceWithIdentityCredentialResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceRegisterDeviceWithIdentityCredentialResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterDeviceWithIdentityCredentialResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerDeviceWithIdentityCredential_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterDeviceWithIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - GroupMid
type TalkServiceReissueGroupTicketArgs struct {
  GroupMid string `thrift:"groupMid,1" db:"groupMid" json:"groupMid"`
}

func NewTalkServiceReissueGroupTicketArgs() *TalkServiceReissueGroupTicketArgs {
  return &TalkServiceReissueGroupTicketArgs{}
}


func (p *TalkServiceReissueGroupTicketArgs) GetGroupMid() string {
  return p.GroupMid
}
func (p *TalkServiceReissueGroupTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueGroupTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GroupMid = v
}
  return nil
}

func (p *TalkServiceReissueGroupTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reissueGroupTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueGroupTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupMid: ", p), err) }
  return err
}

func (p *TalkServiceReissueGroupTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueGroupTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueGroupTicketResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReissueGroupTicketResult() *TalkServiceReissueGroupTicketResult {
  return &TalkServiceReissueGroupTicketResult{}
}

var TalkServiceReissueGroupTicketResult_Success_DEFAULT string
func (p *TalkServiceReissueGroupTicketResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceReissueGroupTicketResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceReissueGroupTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceReissueGroupTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReissueGroupTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReissueGroupTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceReissueGroupTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReissueGroupTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueGroupTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceReissueGroupTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReissueGroupTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reissueGroupTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueGroupTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueGroupTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueGroupTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueGroupTicketResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Request
type TalkServiceUpdateProfileAttributesArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Request *UpdateProfileAttributesRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceUpdateProfileAttributesArgs() *TalkServiceUpdateProfileAttributesArgs {
  return &TalkServiceUpdateProfileAttributesArgs{}
}


func (p *TalkServiceUpdateProfileAttributesArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceUpdateProfileAttributesArgs_Request_DEFAULT *UpdateProfileAttributesRequest
func (p *TalkServiceUpdateProfileAttributesArgs) GetRequest() *UpdateProfileAttributesRequest {
  if !p.IsSetRequest() {
    return TalkServiceUpdateProfileAttributesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceUpdateProfileAttributesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &UpdateProfileAttributesRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttributes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileAttributesResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileAttributesResult() *TalkServiceUpdateProfileAttributesResult {
  return &TalkServiceUpdateProfileAttributesResult{}
}

var TalkServiceUpdateProfileAttributesResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateProfileAttributesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateProfileAttributesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateProfileAttributesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateProfileAttributesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttributes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateProfileAttributesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - Value
type TalkServiceUpdateProfileAttributeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Attr Attr `thrift:"attr,2" db:"attr" json:"attr"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewTalkServiceUpdateProfileAttributeArgs() *TalkServiceUpdateProfileAttributeArgs {
  return &TalkServiceUpdateProfileAttributeArgs{}
}


func (p *TalkServiceUpdateProfileAttributeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateProfileAttributeArgs) GetAttr() Attr {
  return p.Attr
}

func (p *TalkServiceUpdateProfileAttributeArgs) GetValue() string {
  return p.Value
}
func (p *TalkServiceUpdateProfileAttributeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Attr(v)
  p.Attr = temp
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttribute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attr", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Attr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileAttributeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileAttributeResult() *TalkServiceUpdateProfileAttributeResult {
  return &TalkServiceUpdateProfileAttributeResult{}
}

var TalkServiceUpdateProfileAttributeResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateProfileAttributeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateProfileAttributeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateProfileAttributeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateProfileAttributeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttribute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateProfileAttributeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PinCode
type TalkServiceVerifyQrcodeArgs struct {
  // unused field # 1
  Verifier string `thrift:"verifier,2" db:"verifier" json:"verifier"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
}

func NewTalkServiceVerifyQrcodeArgs() *TalkServiceVerifyQrcodeArgs {
  return &TalkServiceVerifyQrcodeArgs{}
}


func (p *TalkServiceVerifyQrcodeArgs) GetVerifier() string {
  return p.Verifier
}

func (p *TalkServiceVerifyQrcodeArgs) GetPinCode() string {
  return p.PinCode
}
func (p *TalkServiceVerifyQrcodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyQrcodeResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyQrcodeResult() *TalkServiceVerifyQrcodeResult {
  return &TalkServiceVerifyQrcodeResult{}
}

var TalkServiceVerifyQrcodeResult_Success_DEFAULT string
func (p *TalkServiceVerifyQrcodeResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyQrcodeResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceVerifyQrcodeResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyQrcodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyQrcodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyQrcodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyQrcodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyQrcodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationArgs struct {
  Request *AcceptChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationArgs() *TalkServiceAcceptChatInvitationArgs {
  return &TalkServiceAcceptChatInvitationArgs{}
}

var TalkServiceAcceptChatInvitationArgs_Request_DEFAULT *AcceptChatInvitationRequest
func (p *TalkServiceAcceptChatInvitationArgs) GetRequest() *AcceptChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceAcceptChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceAcceptChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &AcceptChatInvitationRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceAcceptChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcceptChatInvitationResult struct {
  Success *AcceptChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationResult() *TalkServiceAcceptChatInvitationResult {
  return &TalkServiceAcceptChatInvitationResult{}
}

var TalkServiceAcceptChatInvitationResult_Success_DEFAULT *AcceptChatInvitationResponse
func (p *TalkServiceAcceptChatInvitationResult) GetSuccess() *AcceptChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceAcceptChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceAcceptChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcceptChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AcceptChatInvitationResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - EMid
type TalkServiceDecryptFollowEMidArgs struct {
  // unused field # 1
  EMid string `thrift:"eMid,2" db:"eMid" json:"eMid"`
}

func NewTalkServiceDecryptFollowEMidArgs() *TalkServiceDecryptFollowEMidArgs {
  return &TalkServiceDecryptFollowEMidArgs{}
}


func (p *TalkServiceDecryptFollowEMidArgs) GetEMid() string {
  return p.EMid
}
func (p *TalkServiceDecryptFollowEMidArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDecryptFollowEMidArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *TalkServiceDecryptFollowEMidArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "decryptFollowEMid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDecryptFollowEMidArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eMid: ", p), err) }
  return err
}

func (p *TalkServiceDecryptFollowEMidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDecryptFollowEMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDecryptFollowEMidResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDecryptFollowEMidResult() *TalkServiceDecryptFollowEMidResult {
  return &TalkServiceDecryptFollowEMidResult{}
}

var TalkServiceDecryptFollowEMidResult_Success_DEFAULT string
func (p *TalkServiceDecryptFollowEMidResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceDecryptFollowEMidResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceDecryptFollowEMidResult_E_DEFAULT *TalkException
func (p *TalkServiceDecryptFollowEMidResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDecryptFollowEMidResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDecryptFollowEMidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDecryptFollowEMidResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDecryptFollowEMidResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "decryptFollowEMid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDecryptFollowEMidResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDecryptFollowEMidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDecryptFollowEMidResult(%+v)", *p)
}

// Attributes:
//  - SearchId
type TalkServiceFindContactByUseridArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceFindContactByUseridArgs() *TalkServiceFindContactByUseridArgs {
  return &TalkServiceFindContactByUseridArgs{}
}


func (p *TalkServiceFindContactByUseridArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceFindContactByUseridArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindContactByUseridArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUseridArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUseridResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUseridResult() *TalkServiceFindContactByUseridResult {
  return &TalkServiceFindContactByUseridResult{}
}

var TalkServiceFindContactByUseridResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByUseridResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByUseridResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByUseridResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUseridResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUseridResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUseridResult(%+v)", *p)
}

type TalkServiceGetServerTimeArgs struct {
}

func NewTalkServiceGetServerTimeArgs() *TalkServiceGetServerTimeArgs {
  return &TalkServiceGetServerTimeArgs{}
}

func (p *TalkServiceGetServerTimeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getServerTime_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetServerTimeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetServerTimeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetServerTimeResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetServerTimeResult() *TalkServiceGetServerTimeResult {
  return &TalkServiceGetServerTimeResult{}
}

var TalkServiceGetServerTimeResult_Success_DEFAULT int64
func (p *TalkServiceGetServerTimeResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TalkServiceGetServerTimeResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetServerTimeResult_E_DEFAULT *TalkException
func (p *TalkServiceGetServerTimeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetServerTimeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetServerTimeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetServerTimeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetServerTimeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetServerTimeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getServerTime_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetServerTimeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetServerTimeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetServerTimeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetServerTimeResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceInviteIntoChatArgs struct {
  Request *InviteIntoChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceInviteIntoChatArgs() *TalkServiceInviteIntoChatArgs {
  return &TalkServiceInviteIntoChatArgs{}
}

var TalkServiceInviteIntoChatArgs_Request_DEFAULT *InviteIntoChatRequest
func (p *TalkServiceInviteIntoChatArgs) GetRequest() *InviteIntoChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceInviteIntoChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceInviteIntoChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceInviteIntoChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &InviteIntoChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceInviteIntoChatResult struct {
  Success *InviteIntoChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoChatResult() *TalkServiceInviteIntoChatResult {
  return &TalkServiceInviteIntoChatResult{}
}

var TalkServiceInviteIntoChatResult_Success_DEFAULT *InviteIntoChatResponse
func (p *TalkServiceInviteIntoChatResult) GetSuccess() *InviteIntoChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceInviteIntoChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceInviteIntoChatResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceInviteIntoChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &InviteIntoChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoChatResult(%+v)", *p)
}

// Attributes:
//  - ClientRevision
type TalkServiceWakeUpLongPollingArgs struct {
  // unused field # 1
  ClientRevision int64 `thrift:"clientRevision,2" db:"clientRevision" json:"clientRevision"`
}

func NewTalkServiceWakeUpLongPollingArgs() *TalkServiceWakeUpLongPollingArgs {
  return &TalkServiceWakeUpLongPollingArgs{}
}


func (p *TalkServiceWakeUpLongPollingArgs) GetClientRevision() int64 {
  return p.ClientRevision
}
func (p *TalkServiceWakeUpLongPollingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceWakeUpLongPollingArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ClientRevision = v
}
  return nil
}

func (p *TalkServiceWakeUpLongPollingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wakeUpLongPolling_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceWakeUpLongPollingArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "clientRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ClientRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientRevision: ", p), err) }
  return err
}

func (p *TalkServiceWakeUpLongPollingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceWakeUpLongPollingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceWakeUpLongPollingResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceWakeUpLongPollingResult() *TalkServiceWakeUpLongPollingResult {
  return &TalkServiceWakeUpLongPollingResult{}
}

var TalkServiceWakeUpLongPollingResult_Success_DEFAULT bool
func (p *TalkServiceWakeUpLongPollingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TalkServiceWakeUpLongPollingResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceWakeUpLongPollingResult_E_DEFAULT *TalkException
func (p *TalkServiceWakeUpLongPollingResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceWakeUpLongPollingResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceWakeUpLongPollingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceWakeUpLongPollingResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceWakeUpLongPollingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wakeUpLongPolling_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceWakeUpLongPollingResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceWakeUpLongPollingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceWakeUpLongPollingResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
//  - TicketId
type TalkServiceAcceptGroupInvitationByTicketArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
  TicketId string `thrift:"ticketId,3" db:"ticketId" json:"ticketId"`
}

func NewTalkServiceAcceptGroupInvitationByTicketArgs() *TalkServiceAcceptGroupInvitationByTicketArgs {
  return &TalkServiceAcceptGroupInvitationByTicketArgs{}
}


func (p *TalkServiceAcceptGroupInvitationByTicketArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) GetGroupMid() string {
  return p.GroupMid
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) GetTicketId() string {
  return p.TicketId
}
func (p *TalkServiceAcceptGroupInvitationByTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupMid = v
}
  return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptGroupInvitationByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err) }
  return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ticketId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ticketId: ", p), err) }
  return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptGroupInvitationByTicketArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptGroupInvitationByTicketResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptGroupInvitationByTicketResult() *TalkServiceAcceptGroupInvitationByTicketResult {
  return &TalkServiceAcceptGroupInvitationByTicketResult{}
}

var TalkServiceAcceptGroupInvitationByTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptGroupInvitationByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptGroupInvitationByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptGroupInvitationByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptGroupInvitationByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptGroupInvitationByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptGroupInvitationByTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteOtherFromChatArgs struct {
  Request *DeleteOtherFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteOtherFromChatArgs() *TalkServiceDeleteOtherFromChatArgs {
  return &TalkServiceDeleteOtherFromChatArgs{}
}

var TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT *DeleteOtherFromChatRequest
func (p *TalkServiceDeleteOtherFromChatArgs) GetRequest() *DeleteOtherFromChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceDeleteOtherFromChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DeleteOtherFromChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteOtherFromChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceDeleteOtherFromChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteOtherFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteOtherFromChatResult struct {
  Success *DeleteOtherFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteOtherFromChatResult() *TalkServiceDeleteOtherFromChatResult {
  return &TalkServiceDeleteOtherFromChatResult{}
}

var TalkServiceDeleteOtherFromChatResult_Success_DEFAULT *DeleteOtherFromChatResponse
func (p *TalkServiceDeleteOtherFromChatResult) GetSuccess() *DeleteOtherFromChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceDeleteOtherFromChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceDeleteOtherFromChatResult_E_DEFAULT *TalkException
func (p *TalkServiceDeleteOtherFromChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDeleteOtherFromChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDeleteOtherFromChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DeleteOtherFromChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteOtherFromChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteOtherFromChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteOtherFromChatResult(%+v)", *p)
}

// Attributes:
//  - Phones
type TalkServiceFindContactsByPhoneArgs struct {
  // unused field # 1
  Phones []string `thrift:"phones,2" db:"phones" json:"phones"`
}

func NewTalkServiceFindContactsByPhoneArgs() *TalkServiceFindContactsByPhoneArgs {
  return &TalkServiceFindContactsByPhoneArgs{}
}


func (p *TalkServiceFindContactsByPhoneArgs) GetPhones() []string {
  return p.Phones
}
func (p *TalkServiceFindContactsByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Phones =  tSet
  for i := 0; i < size; i ++ {
var _elem544 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem544 = v
}
    p.Phones = append(p.Phones, _elem544)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactsByPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phones", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Phones); i++ {
    for j := i+1; j<len(p.Phones); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.Phones[i], p.Phones[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Phones))
      }
    }
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err) }
  return err
}

func (p *TalkServiceFindContactsByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactsByPhoneResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactsByPhoneResult() *TalkServiceFindContactsByPhoneResult {
  return &TalkServiceFindContactsByPhoneResult{}
}

var TalkServiceFindContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindContactsByPhoneResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindContactsByPhoneResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactsByPhoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactsByPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactsByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactsByPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactsByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key545 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key545 = v
}
    _val546 := &Contact{}
    if err := _val546.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val546), err)
    }
    p.Success[_key545] = _val546
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactsByPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactsByPhoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactsByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupsV2Args struct {
  // unused field # 1
  GroupId []string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupsV2Args() *TalkServiceGetGroupsV2Args {
  return &TalkServiceGetGroupsV2Args{}
}


func (p *TalkServiceGetGroupsV2Args) GetGroupId() []string {
  return p.GroupId
}
func (p *TalkServiceGetGroupsV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupsV2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupId =  tSlice
  for i := 0; i < size; i ++ {
var _elem547 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem547 = v
}
    p.GroupId = append(p.GroupId, _elem547)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetGroupsV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupsV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupsV2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.GroupId)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupId {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupsV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupsV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupsV2Result struct {
  Success []*Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupsV2Result() *TalkServiceGetGroupsV2Result {
  return &TalkServiceGetGroupsV2Result{}
}

var TalkServiceGetGroupsV2Result_Success_DEFAULT []*Group

func (p *TalkServiceGetGroupsV2Result) GetSuccess() []*Group {
  return p.Success
}
var TalkServiceGetGroupsV2Result_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupsV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupsV2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupsV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupsV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupsV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupsV2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Group, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem548 := &Group{}
    if err := _elem548.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem548), err)
    }
    p.Success = append(p.Success, _elem548)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetGroupsV2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupsV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupsV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupsV2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupsV2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupsV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupsV2Result(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupsArgs struct {
  // unused field # 1
  GroupId []string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupsArgs() *TalkServiceGetGroupsArgs {
  return &TalkServiceGetGroupsArgs{}
}


func (p *TalkServiceGetGroupsArgs) GetGroupId() []string {
  return p.GroupId
}
func (p *TalkServiceGetGroupsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupId =  tSlice
  for i := 0; i < size; i ++ {
var _elem549 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem549 = v
}
    p.GroupId = append(p.GroupId, _elem549)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetGroupsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.GroupId)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupId {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupsResult struct {
  Success []*Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupsResult() *TalkServiceGetGroupsResult {
  return &TalkServiceGetGroupsResult{}
}

var TalkServiceGetGroupsResult_Success_DEFAULT []*Group

func (p *TalkServiceGetGroupsResult) GetSuccess() []*Group {
  return p.Success
}
var TalkServiceGetGroupsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Group, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem550 := &Group{}
    if err := _elem550.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem550), err)
    }
    p.Success = append(p.Success, _elem550)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetGroupsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupsResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupArgs struct {
  // unused field # 1
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupArgs() *TalkServiceGetGroupArgs {
  return &TalkServiceGetGroupArgs{}
}


func (p *TalkServiceGetGroupArgs) GetGroupId() string {
  return p.GroupId
}
func (p *TalkServiceGetGroupArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceGetGroupArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupResult struct {
  Success *Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupResult() *TalkServiceGetGroupResult {
  return &TalkServiceGetGroupResult{}
}

var TalkServiceGetGroupResult_Success_DEFAULT *Group
func (p *TalkServiceGetGroupResult) GetSuccess() *Group {
  if !p.IsSetSuccess() {
    return TalkServiceGetGroupResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetGroupResult_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Group{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetGroupResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetCompactGroupArgs struct {
  // unused field # 1
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetCompactGroupArgs() *TalkServiceGetCompactGroupArgs {
  return &TalkServiceGetCompactGroupArgs{}
}


func (p *TalkServiceGetCompactGroupArgs) GetGroupId() string {
  return p.GroupId
}
func (p *TalkServiceGetCompactGroupArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCompactGroupArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceGetCompactGroupArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCompactGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCompactGroupArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceGetCompactGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCompactGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCompactGroupResult struct {
  Success *Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetCompactGroupResult() *TalkServiceGetCompactGroupResult {
  return &TalkServiceGetCompactGroupResult{}
}

var TalkServiceGetCompactGroupResult_Success_DEFAULT *Group
func (p *TalkServiceGetCompactGroupResult) GetSuccess() *Group {
  if !p.IsSetSuccess() {
    return TalkServiceGetCompactGroupResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetCompactGroupResult_E_DEFAULT *TalkException
func (p *TalkServiceGetCompactGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetCompactGroupResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetCompactGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetCompactGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetCompactGroupResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCompactGroupResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Group{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetCompactGroupResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetCompactGroupResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCompactGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCompactGroupResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCompactGroupResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCompactGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCompactGroupResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupWithoutMembersArgs struct {
  // unused field # 1
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupWithoutMembersArgs() *TalkServiceGetGroupWithoutMembersArgs {
  return &TalkServiceGetGroupWithoutMembersArgs{}
}


func (p *TalkServiceGetGroupWithoutMembersArgs) GetGroupId() string {
  return p.GroupId
}
func (p *TalkServiceGetGroupWithoutMembersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupWithoutMembers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupWithoutMembersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupWithoutMembersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupWithoutMembersResult struct {
  Success *Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupWithoutMembersResult() *TalkServiceGetGroupWithoutMembersResult {
  return &TalkServiceGetGroupWithoutMembersResult{}
}

var TalkServiceGetGroupWithoutMembersResult_Success_DEFAULT *Group
func (p *TalkServiceGetGroupWithoutMembersResult) GetSuccess() *Group {
  if !p.IsSetSuccess() {
    return TalkServiceGetGroupWithoutMembersResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetGroupWithoutMembersResult_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupWithoutMembersResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupWithoutMembersResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupWithoutMembersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Group{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupWithoutMembers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupWithoutMembersResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupWithoutMembersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupWithoutMembersResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type TalkServiceInviteIntoGroupArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceInviteIntoGroupArgs() *TalkServiceInviteIntoGroupArgs {
  return &TalkServiceInviteIntoGroupArgs{}
}


func (p *TalkServiceInviteIntoGroupArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceInviteIntoGroupArgs) GetGroupId() string {
  return p.GroupId
}

func (p *TalkServiceInviteIntoGroupArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceInviteIntoGroupArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoGroupArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceInviteIntoGroupArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceInviteIntoGroupArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem551 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem551 = v
}
    p.ContactIds = append(p.ContactIds, _elem551)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceInviteIntoGroupArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoGroupArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoGroupArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoGroupArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoGroupResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoGroupResult() *TalkServiceInviteIntoGroupResult {
  return &TalkServiceInviteIntoGroupResult{}
}

var TalkServiceInviteIntoGroupResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoGroupResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoGroupResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoGroupResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoGroupResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoGroupResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoGroupResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceAcceptGroupInvitationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceAcceptGroupInvitationArgs() *TalkServiceAcceptGroupInvitationArgs {
  return &TalkServiceAcceptGroupInvitationArgs{}
}


func (p *TalkServiceAcceptGroupInvitationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceAcceptGroupInvitationArgs) GetGroupId() string {
  return p.GroupId
}
func (p *TalkServiceAcceptGroupInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptGroupInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceAcceptGroupInvitationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceAcceptGroupInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptGroupInvitationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptGroupInvitationResult() *TalkServiceAcceptGroupInvitationResult {
  return &TalkServiceAcceptGroupInvitationResult{}
}

var TalkServiceAcceptGroupInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptGroupInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptGroupInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptGroupInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptGroupInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptGroupInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptGroupInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - ChatIds
//  - SyncReason
type TalkServiceGetMessageReadRangeArgs struct {
  // unused field # 1
  ChatIds []string `thrift:"chatIds,2" db:"chatIds" json:"chatIds"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetMessageReadRangeArgs() *TalkServiceGetMessageReadRangeArgs {
  return &TalkServiceGetMessageReadRangeArgs{}
}


func (p *TalkServiceGetMessageReadRangeArgs) GetChatIds() []string {
  return p.ChatIds
}

func (p *TalkServiceGetMessageReadRangeArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetMessageReadRangeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem552 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem552 = v
}
    p.ChatIds = append(p.ChatIds, _elem552)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMessageReadRange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ChatIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatIds: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageReadRangeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageReadRangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageReadRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetMessageReadRangeResult struct {
  Success []*TMessageReadRange `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetMessageReadRangeResult() *TalkServiceGetMessageReadRangeResult {
  return &TalkServiceGetMessageReadRangeResult{}
}

var TalkServiceGetMessageReadRangeResult_Success_DEFAULT []*TMessageReadRange

func (p *TalkServiceGetMessageReadRangeResult) GetSuccess() []*TMessageReadRange {
  return p.Success
}
var TalkServiceGetMessageReadRangeResult_E_DEFAULT *TalkException
func (p *TalkServiceGetMessageReadRangeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetMessageReadRangeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetMessageReadRangeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetMessageReadRangeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetMessageReadRangeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMessageReadRange, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem553 := &TMessageReadRange{}
    if err := _elem553.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem553), err)
    }
    p.Success = append(p.Success, _elem553)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMessageReadRange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageReadRangeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageReadRangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageReadRangeResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteSelfFromChatArgs struct {
  Request *DeleteSelfFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteSelfFromChatArgs() *TalkServiceDeleteSelfFromChatArgs {
  return &TalkServiceDeleteSelfFromChatArgs{}
}

var TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT *DeleteSelfFromChatRequest
func (p *TalkServiceDeleteSelfFromChatArgs) GetRequest() *DeleteSelfFromChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceDeleteSelfFromChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DeleteSelfFromChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteSelfFromChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceDeleteSelfFromChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteSelfFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteSelfFromChatResult struct {
  Success *DeleteSelfFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteSelfFromChatResult() *TalkServiceDeleteSelfFromChatResult {
  return &TalkServiceDeleteSelfFromChatResult{}
}

var TalkServiceDeleteSelfFromChatResult_Success_DEFAULT *DeleteSelfFromChatResponse
func (p *TalkServiceDeleteSelfFromChatResult) GetSuccess() *DeleteSelfFromChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceDeleteSelfFromChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceDeleteSelfFromChatResult_E_DEFAULT *TalkException
func (p *TalkServiceDeleteSelfFromChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDeleteSelfFromChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDeleteSelfFromChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DeleteSelfFromChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteSelfFromChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteSelfFromChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteSelfFromChatResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedContactIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedContactIdsArgs() *TalkServiceGetBlockedContactIdsArgs {
  return &TalkServiceGetBlockedContactIdsArgs{}
}


func (p *TalkServiceGetBlockedContactIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetBlockedContactIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetBlockedContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedContactIdsResult() *TalkServiceGetBlockedContactIdsResult {
  return &TalkServiceGetBlockedContactIdsResult{}
}

var TalkServiceGetBlockedContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedContactIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetBlockedContactIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetBlockedContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBlockedContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBlockedContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem554 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem554 = v
}
    p.Success = append(p.Success, _elem554)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedContactIdsResult(%+v)", *p)
}

// Attributes:
//  - AttributesToRetrieve
type TalkServiceGetSettingsAttributes2Args struct {
  // unused field # 1
  AttributesToRetrieve []SettingsAttributes `thrift:"attributesToRetrieve,2" db:"attributesToRetrieve" json:"attributesToRetrieve"`
}

func NewTalkServiceGetSettingsAttributes2Args() *TalkServiceGetSettingsAttributes2Args {
  return &TalkServiceGetSettingsAttributes2Args{}
}


func (p *TalkServiceGetSettingsAttributes2Args) GetAttributesToRetrieve() []SettingsAttributes {
  return p.AttributesToRetrieve
}
func (p *TalkServiceGetSettingsAttributes2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingsAttributes, 0, size)
  p.AttributesToRetrieve =  tSet
  for i := 0; i < size; i ++ {
var _elem555 SettingsAttributes
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingsAttributes(v)
    _elem555 = temp
}
    p.AttributesToRetrieve = append(p.AttributesToRetrieve, _elem555)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettingsAttributes2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributesToRetrieve", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributesToRetrieve: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AttributesToRetrieve)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AttributesToRetrieve); i++ {
    for j := i+1; j<len(p.AttributesToRetrieve); j++ {
      if func(tgt, src SettingsAttributes) bool {
        if tgt != src { return false }
        return true
      }(p.AttributesToRetrieve[i], p.AttributesToRetrieve[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToRetrieve))
      }
    }
  }
  for _, v := range p.AttributesToRetrieve {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributesToRetrieve: ", p), err) }
  return err
}

func (p *TalkServiceGetSettingsAttributes2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsAttributes2Result struct {
  Success *Settings `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsAttributes2Result() *TalkServiceGetSettingsAttributes2Result {
  return &TalkServiceGetSettingsAttributes2Result{}
}

var TalkServiceGetSettingsAttributes2Result_Success_DEFAULT *Settings
func (p *TalkServiceGetSettingsAttributes2Result) GetSuccess() *Settings {
  if !p.IsSetSuccess() {
    return TalkServiceGetSettingsAttributes2Result_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetSettingsAttributes2Result_E_DEFAULT *TalkException
func (p *TalkServiceGetSettingsAttributes2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetSettingsAttributes2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetSettingsAttributes2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Settings{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettingsAttributes2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsAttributes2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
//  - ContactIds
type TalkServiceInviteIntoRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceInviteIntoRoomArgs() *TalkServiceInviteIntoRoomArgs {
  return &TalkServiceInviteIntoRoomArgs{}
}


func (p *TalkServiceInviteIntoRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceInviteIntoRoomArgs) GetRoomId() string {
  return p.RoomId
}

func (p *TalkServiceInviteIntoRoomArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceInviteIntoRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem556 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem556 = v
}
    p.ContactIds = append(p.ContactIds, _elem556)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoRoomResult() *TalkServiceInviteIntoRoomResult {
  return &TalkServiceInviteIntoRoomResult{}
}

var TalkServiceInviteIntoRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoRoomResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceRejectChatInvitationArgs struct {
  Request *RejectChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceRejectChatInvitationArgs() *TalkServiceRejectChatInvitationArgs {
  return &TalkServiceRejectChatInvitationArgs{}
}

var TalkServiceRejectChatInvitationArgs_Request_DEFAULT *RejectChatInvitationRequest
func (p *TalkServiceRejectChatInvitationArgs) GetRequest() *RejectChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceRejectChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceRejectChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceRejectChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &RejectChatInvitationRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rejectChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceRejectChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRejectChatInvitationResult struct {
  Success *RejectChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRejectChatInvitationResult() *TalkServiceRejectChatInvitationResult {
  return &TalkServiceRejectChatInvitationResult{}
}

var TalkServiceRejectChatInvitationResult_Success_DEFAULT *RejectChatInvitationResponse
func (p *TalkServiceRejectChatInvitationResult) GetSuccess() *RejectChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceRejectChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRejectChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceRejectChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRejectChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRejectChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRejectChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRejectChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RejectChatInvitationResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rejectChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRejectChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRejectChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedRecommendationIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedRecommendationIdsArgs() *TalkServiceGetBlockedRecommendationIdsArgs {
  return &TalkServiceGetBlockedRecommendationIdsArgs{}
}


func (p *TalkServiceGetBlockedRecommendationIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetBlockedRecommendationIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedRecommendationIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedRecommendationIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedRecommendationIdsResult() *TalkServiceGetBlockedRecommendationIdsResult {
  return &TalkServiceGetBlockedRecommendationIdsResult{}
}

var TalkServiceGetBlockedRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedRecommendationIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetBlockedRecommendationIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem557 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem557 = v
}
    p.Success = append(p.Success, _elem557)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedRecommendationIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatRoomMid
//  - ChatRoomBGMInfo
type TalkServiceUpdateChatRoomBGMArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatRoomMid string `thrift:"chatRoomMid,2" db:"chatRoomMid" json:"chatRoomMid"`
  ChatRoomBGMInfo string `thrift:"chatRoomBGMInfo,3" db:"chatRoomBGMInfo" json:"chatRoomBGMInfo"`
}

func NewTalkServiceUpdateChatRoomBGMArgs() *TalkServiceUpdateChatRoomBGMArgs {
  return &TalkServiceUpdateChatRoomBGMArgs{}
}


func (p *TalkServiceUpdateChatRoomBGMArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateChatRoomBGMArgs) GetChatRoomMid() string {
  return p.ChatRoomMid
}

func (p *TalkServiceUpdateChatRoomBGMArgs) GetChatRoomBGMInfo() string {
  return p.ChatRoomBGMInfo
}
func (p *TalkServiceUpdateChatRoomBGMArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatRoomMid = v
}
  return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatRoomBGMInfo = v
}
  return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateChatRoomBGM_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatRoomBGMArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateChatRoomBGMArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatRoomMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatRoomMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMid: ", p), err) }
  return err
}

func (p *TalkServiceUpdateChatRoomBGMArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomBGMInfo", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatRoomBGMInfo: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatRoomBGMInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatRoomBGMInfo (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatRoomBGMInfo: ", p), err) }
  return err
}

func (p *TalkServiceUpdateChatRoomBGMArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatRoomBGMArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateChatRoomBGMResult struct {
  Success *ChatRoomBGM `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateChatRoomBGMResult() *TalkServiceUpdateChatRoomBGMResult {
  return &TalkServiceUpdateChatRoomBGMResult{}
}

var TalkServiceUpdateChatRoomBGMResult_Success_DEFAULT *ChatRoomBGM
func (p *TalkServiceUpdateChatRoomBGMResult) GetSuccess() *ChatRoomBGM {
  if !p.IsSetSuccess() {
    return TalkServiceUpdateChatRoomBGMResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceUpdateChatRoomBGMResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateChatRoomBGMResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateChatRoomBGMResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateChatRoomBGMResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatRoomBGMResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChatRoomBGM{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatRoomBGMResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateChatRoomBGM_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatRoomBGMResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatRoomBGMResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatRoomBGMResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatRoomBGMResult(%+v)", *p)
}

// Attributes:
//  - TicketId
type TalkServiceFindGroupByTicketArgs struct {
  TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewTalkServiceFindGroupByTicketArgs() *TalkServiceFindGroupByTicketArgs {
  return &TalkServiceFindGroupByTicketArgs{}
}


func (p *TalkServiceFindGroupByTicketArgs) GetTicketId() string {
  return p.TicketId
}
func (p *TalkServiceFindGroupByTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindGroupByTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *TalkServiceFindGroupByTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findGroupByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindGroupByTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err) }
  return err
}

func (p *TalkServiceFindGroupByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindGroupByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindGroupByTicketResult struct {
  Success *Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindGroupByTicketResult() *TalkServiceFindGroupByTicketResult {
  return &TalkServiceFindGroupByTicketResult{}
}

var TalkServiceFindGroupByTicketResult_Success_DEFAULT *Group
func (p *TalkServiceFindGroupByTicketResult) GetSuccess() *Group {
  if !p.IsSetSuccess() {
    return TalkServiceFindGroupByTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindGroupByTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceFindGroupByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindGroupByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindGroupByTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindGroupByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindGroupByTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindGroupByTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Group{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindGroupByTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindGroupByTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findGroupByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindGroupByTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindGroupByTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindGroupByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindGroupByTicketResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetRecentFriendRequestsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetRecentFriendRequestsArgs() *TalkServiceGetRecentFriendRequestsArgs {
  return &TalkServiceGetRecentFriendRequestsArgs{}
}


func (p *TalkServiceGetRecentFriendRequestsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetRecentFriendRequestsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecentFriendRequests_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetRecentFriendRequestsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecentFriendRequestsResult struct {
  Success *FriendRequestsInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecentFriendRequestsResult() *TalkServiceGetRecentFriendRequestsResult {
  return &TalkServiceGetRecentFriendRequestsResult{}
}

var TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT *FriendRequestsInfo
func (p *TalkServiceGetRecentFriendRequestsResult) GetSuccess() *FriendRequestsInfo {
  if !p.IsSetSuccess() {
    return TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRecentFriendRequestsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRecentFriendRequestsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRecentFriendRequestsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRecentFriendRequestsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &FriendRequestsInfo{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecentFriendRequests_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentFriendRequestsResult(%+v)", *p)
}

// Attributes:
//  - AttrBitset
type TalkServiceGetSettingsAttributesArgs struct {
  // unused field # 1
  AttrBitset int32 `thrift:"attrBitset,2" db:"attrBitset" json:"attrBitset"`
}

func NewTalkServiceGetSettingsAttributesArgs() *TalkServiceGetSettingsAttributesArgs {
  return &TalkServiceGetSettingsAttributesArgs{}
}


func (p *TalkServiceGetSettingsAttributesArgs) GetAttrBitset() int32 {
  return p.AttrBitset
}
func (p *TalkServiceGetSettingsAttributesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AttrBitset = v
}
  return nil
}

func (p *TalkServiceGetSettingsAttributesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettingsAttributes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsAttributesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attrBitset", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attrBitset: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AttrBitset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attrBitset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attrBitset: ", p), err) }
  return err
}

func (p *TalkServiceGetSettingsAttributesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsAttributesResult struct {
  Success *Settings `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsAttributesResult() *TalkServiceGetSettingsAttributesResult {
  return &TalkServiceGetSettingsAttributesResult{}
}

var TalkServiceGetSettingsAttributesResult_Success_DEFAULT *Settings
func (p *TalkServiceGetSettingsAttributesResult) GetSuccess() *Settings {
  if !p.IsSetSuccess() {
    return TalkServiceGetSettingsAttributesResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetSettingsAttributesResult_E_DEFAULT *TalkException
func (p *TalkServiceGetSettingsAttributesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetSettingsAttributesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetSettingsAttributesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetSettingsAttributesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetSettingsAttributesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Settings{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettingsAttributes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsAttributesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsAttributesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsAttributesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsAttributesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceRejectGroupInvitationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceRejectGroupInvitationArgs() *TalkServiceRejectGroupInvitationArgs {
  return &TalkServiceRejectGroupInvitationArgs{}
}


func (p *TalkServiceRejectGroupInvitationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRejectGroupInvitationArgs) GetGroupId() string {
  return p.GroupId
}
func (p *TalkServiceRejectGroupInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectGroupInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRejectGroupInvitationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rejectGroupInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectGroupInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRejectGroupInvitationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceRejectGroupInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRejectGroupInvitationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRejectGroupInvitationResult() *TalkServiceRejectGroupInvitationResult {
  return &TalkServiceRejectGroupInvitationResult{}
}

var TalkServiceRejectGroupInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceRejectGroupInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRejectGroupInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRejectGroupInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRejectGroupInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectGroupInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRejectGroupInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rejectGroupInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectGroupInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRejectGroupInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceUpdateChatArgs struct {
  Request *UpdateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceUpdateChatArgs() *TalkServiceUpdateChatArgs {
  return &TalkServiceUpdateChatArgs{}
}

var TalkServiceUpdateChatArgs_Request_DEFAULT *UpdateChatRequest
func (p *TalkServiceUpdateChatArgs) GetRequest() *UpdateChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceUpdateChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceUpdateChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceUpdateChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &UpdateChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceUpdateChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateChatResult struct {
  Success *UpdateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateChatResult() *TalkServiceUpdateChatResult {
  return &TalkServiceUpdateChatResult{}
}

var TalkServiceUpdateChatResult_Success_DEFAULT *UpdateChatResponse
func (p *TalkServiceUpdateChatResult) GetSuccess() *UpdateChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceUpdateChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceUpdateChatResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
type TalkServiceUpdateSettingsAttributes2Args struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  // unused field # 2
  Settings *Settings `thrift:"settings,3" db:"settings" json:"settings"`
  AttributesToUpdate []SettingsAttributes `thrift:"attributesToUpdate,4" db:"attributesToUpdate" json:"attributesToUpdate"`
}

func NewTalkServiceUpdateSettingsAttributes2Args() *TalkServiceUpdateSettingsAttributes2Args {
  return &TalkServiceUpdateSettingsAttributes2Args{}
}


func (p *TalkServiceUpdateSettingsAttributes2Args) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateSettingsAttributes2Args) GetAttributesToUpdate() []SettingsAttributes {
  return p.AttributesToUpdate
}
var TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT *Settings
func (p *TalkServiceUpdateSettingsAttributes2Args) GetSettings() *Settings {
  if !p.IsSetSettings() {
    return TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT
  }
return p.Settings
}
func (p *TalkServiceUpdateSettingsAttributes2Args) IsSetSettings() bool {
  return p.Settings != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingsAttributes, 0, size)
  p.AttributesToUpdate =  tSet
  for i := 0; i < size; i ++ {
var _elem558 SettingsAttributes
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingsAttributes(v)
    _elem558 = temp
}
    p.AttributesToUpdate = append(p.AttributesToUpdate, _elem558)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Settings = &Settings{}
  if err := p.Settings.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSettingsAttributes2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "settings", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settings: ", p), err) }
  if err := p.Settings.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settings: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributesToUpdate", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributesToUpdate: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AttributesToUpdate)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AttributesToUpdate); i++ {
    for j := i+1; j<len(p.AttributesToUpdate); j++ {
      if func(tgt, src SettingsAttributes) bool {
        if tgt != src { return false }
        return true
      }(p.AttributesToUpdate[i], p.AttributesToUpdate[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToUpdate))
      }
    }
  }
  for _, v := range p.AttributesToUpdate {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributesToUpdate: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateSettingsAttributes2Result struct {
  Success []SettingsAttributes `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateSettingsAttributes2Result() *TalkServiceUpdateSettingsAttributes2Result {
  return &TalkServiceUpdateSettingsAttributes2Result{}
}

var TalkServiceUpdateSettingsAttributes2Result_Success_DEFAULT []SettingsAttributes

func (p *TalkServiceUpdateSettingsAttributes2Result) GetSuccess() []SettingsAttributes {
  return p.Success
}
var TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT *TalkException
func (p *TalkServiceUpdateSettingsAttributes2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingsAttributes, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem559 SettingsAttributes
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingsAttributes(v)
    _elem559 = temp
}
    p.Success = append(p.Success, _elem559)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSettingsAttributes2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if func(tgt, src SettingsAttributes) bool {
          if tgt != src { return false }
          return true
        }(p.Success[i], p.Success[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type TalkServiceGetContactRegistrationArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Type MIDType `thrift:"type,2" db:"type" json:"type"`
}

func NewTalkServiceGetContactRegistrationArgs() *TalkServiceGetContactRegistrationArgs {
  return &TalkServiceGetContactRegistrationArgs{}
}


func (p *TalkServiceGetContactRegistrationArgs) GetID() string {
  return p.ID
}

func (p *TalkServiceGetContactRegistrationArgs) GetType() MIDType {
  return p.Type
}
func (p *TalkServiceGetContactRegistrationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MIDType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContactRegistration_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TalkServiceGetContactRegistrationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TalkServiceGetContactRegistrationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactRegistrationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactRegistrationResult struct {
  Success *ContactRegistration `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactRegistrationResult() *TalkServiceGetContactRegistrationResult {
  return &TalkServiceGetContactRegistrationResult{}
}

var TalkServiceGetContactRegistrationResult_Success_DEFAULT *ContactRegistration
func (p *TalkServiceGetContactRegistrationResult) GetSuccess() *ContactRegistration {
  if !p.IsSetSuccess() {
    return TalkServiceGetContactRegistrationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetContactRegistrationResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactRegistrationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactRegistrationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactRegistrationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactRegistrationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactRegistrationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ContactRegistration{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContactRegistration_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactRegistrationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactRegistrationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactRegistrationResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetSettingsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetSettingsArgs() *TalkServiceGetSettingsArgs {
  return &TalkServiceGetSettingsArgs{}
}


func (p *TalkServiceGetSettingsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetSettingsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetSettingsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetSettingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsResult struct {
  Success *Settings `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsResult() *TalkServiceGetSettingsResult {
  return &TalkServiceGetSettingsResult{}
}

var TalkServiceGetSettingsResult_Success_DEFAULT *Settings
func (p *TalkServiceGetSettingsResult) GetSuccess() *Settings {
  if !p.IsSetSuccess() {
    return TalkServiceGetSettingsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetSettingsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetSettingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetSettingsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetSettingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetSettingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetSettingsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Settings{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsResult(%+v)", *p)
}

type TalkServiceNoopArgs struct {
}

func NewTalkServiceNoopArgs() *TalkServiceNoopArgs {
  return &TalkServiceNoopArgs{}
}

func (p *TalkServiceNoopArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNoopArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "noop_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNoopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNoopArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNoopResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNoopResult() *TalkServiceNoopResult {
  return &TalkServiceNoopResult{}
}

var TalkServiceNoopResult_E_DEFAULT *TalkException
func (p *TalkServiceNoopResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNoopResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNoopResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNoopResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNoopResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNoopResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "noop_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNoopResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNoopResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNoopResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - LastMessageId
type TalkServiceRemoveAllMessagesArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  LastMessageId string `thrift:"lastMessageId,2" db:"lastMessageId" json:"lastMessageId"`
}

func NewTalkServiceRemoveAllMessagesArgs() *TalkServiceRemoveAllMessagesArgs {
  return &TalkServiceRemoveAllMessagesArgs{}
}


func (p *TalkServiceRemoveAllMessagesArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceRemoveAllMessagesArgs) GetLastMessageId() string {
  return p.LastMessageId
}
func (p *TalkServiceRemoveAllMessagesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAllMessages_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceRemoveAllMessagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveAllMessagesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveAllMessagesResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveAllMessagesResult() *TalkServiceRemoveAllMessagesResult {
  return &TalkServiceRemoveAllMessagesResult{}
}

var TalkServiceRemoveAllMessagesResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveAllMessagesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveAllMessagesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveAllMessagesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveAllMessagesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveAllMessagesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveAllMessagesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAllMessages_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveAllMessagesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveAllMessagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveAllMessagesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
type TalkServiceUpdateContactSettingArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Flag ContactFlag `thrift:"flag,3" db:"flag" json:"flag"`
  Value string `thrift:"value,4" db:"value" json:"value"`
}

func NewTalkServiceUpdateContactSettingArgs() *TalkServiceUpdateContactSettingArgs {
  return &TalkServiceUpdateContactSettingArgs{}
}


func (p *TalkServiceUpdateContactSettingArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateContactSettingArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceUpdateContactSettingArgs) GetFlag() ContactFlag {
  return p.Flag
}

func (p *TalkServiceUpdateContactSettingArgs) GetValue() string {
  return p.Value
}
func (p *TalkServiceUpdateContactSettingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactFlag(v)
  p.Flag = temp
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateContactSetting_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateContactSettingArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateContactSettingResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateContactSettingResult() *TalkServiceUpdateContactSettingResult {
  return &TalkServiceUpdateContactSettingResult{}
}

var TalkServiceUpdateContactSettingResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateContactSettingResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateContactSettingResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateContactSettingResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateContactSettingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateContactSetting_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateContactSettingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateContactSettingResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type TalkServiceGetGroupCallArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetGroupCallArgs() *TalkServiceGetGroupCallArgs {
  return &TalkServiceGetGroupCallArgs{}
}


func (p *TalkServiceGetGroupCallArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *TalkServiceGetGroupCallArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupCallArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetGroupCallArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupCallArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupCallArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupCallResult struct {
  Success *GroupCall `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupCallResult() *TalkServiceGetGroupCallResult {
  return &TalkServiceGetGroupCallResult{}
}

var TalkServiceGetGroupCallResult_Success_DEFAULT *GroupCall
func (p *TalkServiceGetGroupCallResult) GetSuccess() *GroupCall {
  if !p.IsSetSuccess() {
    return TalkServiceGetGroupCallResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetGroupCallResult_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupCallResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupCallResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupCallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupCallResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupCallResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupCallResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GroupCall{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetGroupCallResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupCallResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupCallResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupCallResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupCallResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
type TalkServiceFetchOpsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  GlobalRev int64 `thrift:"globalRev,4" db:"globalRev" json:"globalRev"`
  IndividualRev int64 `thrift:"individualRev,5" db:"individualRev" json:"individualRev"`
}

func NewTalkServiceFetchOpsArgs() *TalkServiceFetchOpsArgs {
  return &TalkServiceFetchOpsArgs{}
}


func (p *TalkServiceFetchOpsArgs) GetLocalRev() int64 {
  return p.LocalRev
}

func (p *TalkServiceFetchOpsArgs) GetCount() int32 {
  return p.Count
}

func (p *TalkServiceFetchOpsArgs) GetGlobalRev() int64 {
  return p.GlobalRev
}

func (p *TalkServiceFetchOpsArgs) GetIndividualRev() int64 {
  return p.IndividualRev
}
func (p *TalkServiceFetchOpsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GlobalRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IndividualRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOpsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "globalRev", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:globalRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.GlobalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.globalRev (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:globalRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "individualRev", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:individualRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.IndividualRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.individualRev (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:individualRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOpsResult struct {
  Success []*Operation `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFetchOpsResult() *TalkServiceFetchOpsResult {
  return &TalkServiceFetchOpsResult{}
}

var TalkServiceFetchOpsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOpsResult) GetSuccess() []*Operation {
  return p.Success
}
var TalkServiceFetchOpsResult_E_DEFAULT *TalkException
func (p *TalkServiceFetchOpsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFetchOpsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFetchOpsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFetchOpsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFetchOpsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem560 := &Operation{}
    if err := _elem560.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem560), err)
    }
    p.Success = append(p.Success, _elem560)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOpsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOpsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOpsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOpsResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
type TalkServiceFetchOperationsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTalkServiceFetchOperationsArgs() *TalkServiceFetchOperationsArgs {
  return &TalkServiceFetchOperationsArgs{}
}


func (p *TalkServiceFetchOperationsArgs) GetLocalRev() int64 {
  return p.LocalRev
}

func (p *TalkServiceFetchOperationsArgs) GetCount() int32 {
  return p.Count
}
func (p *TalkServiceFetchOperationsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *TalkServiceFetchOperationsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TalkServiceFetchOperationsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOperations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOperationsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOperationsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TalkServiceFetchOperationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOperationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOperationsResult struct {
  Success []*Operation `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFetchOperationsResult() *TalkServiceFetchOperationsResult {
  return &TalkServiceFetchOperationsResult{}
}

var TalkServiceFetchOperationsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOperationsResult) GetSuccess() []*Operation {
  return p.Success
}
var TalkServiceFetchOperationsResult_E_DEFAULT *TalkException
func (p *TalkServiceFetchOperationsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFetchOperationsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFetchOperationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFetchOperationsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFetchOperationsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem561 := &Operation{}
    if err := _elem561.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem561), err)
    }
    p.Success = append(p.Success, _elem561)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOperations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOperationsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOperationsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOperationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOperationsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type TalkServiceKickoutFromGroupArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceKickoutFromGroupArgs() *TalkServiceKickoutFromGroupArgs {
  return &TalkServiceKickoutFromGroupArgs{}
}


func (p *TalkServiceKickoutFromGroupArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceKickoutFromGroupArgs) GetGroupId() string {
  return p.GroupId
}

func (p *TalkServiceKickoutFromGroupArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceKickoutFromGroupArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceKickoutFromGroupArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceKickoutFromGroupArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceKickoutFromGroupArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem562 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem562 = v
}
    p.ContactIds = append(p.ContactIds, _elem562)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceKickoutFromGroupArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "kickoutFromGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceKickoutFromGroupArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceKickoutFromGroupArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceKickoutFromGroupArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceKickoutFromGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceKickoutFromGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceKickoutFromGroupResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceKickoutFromGroupResult() *TalkServiceKickoutFromGroupResult {
  return &TalkServiceKickoutFromGroupResult{}
}

var TalkServiceKickoutFromGroupResult_E_DEFAULT *TalkException
func (p *TalkServiceKickoutFromGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceKickoutFromGroupResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceKickoutFromGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceKickoutFromGroupResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceKickoutFromGroupResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceKickoutFromGroupResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "kickoutFromGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceKickoutFromGroupResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceKickoutFromGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceKickoutFromGroupResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetExtendedProfileArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetExtendedProfileArgs() *TalkServiceGetExtendedProfileArgs {
  return &TalkServiceGetExtendedProfileArgs{}
}


func (p *TalkServiceGetExtendedProfileArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetExtendedProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetExtendedProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getExtendedProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetExtendedProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetExtendedProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetExtendedProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetExtendedProfileResult struct {
  Success *ExtendedProfile `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetExtendedProfileResult() *TalkServiceGetExtendedProfileResult {
  return &TalkServiceGetExtendedProfileResult{}
}

var TalkServiceGetExtendedProfileResult_Success_DEFAULT *ExtendedProfile
func (p *TalkServiceGetExtendedProfileResult) GetSuccess() *ExtendedProfile {
  if !p.IsSetSuccess() {
    return TalkServiceGetExtendedProfileResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetExtendedProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceGetExtendedProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetExtendedProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetExtendedProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetExtendedProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetExtendedProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExtendedProfile{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getExtendedProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetExtendedProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetExtendedProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetExtendedProfileResult(%+v)", *p)
}

// Attributes:
//  - FeatureType
type TalkServiceAcquireEncryptedAccessTokenArgs struct {
  // unused field # 1
  FeatureType FeatureType `thrift:"featureType,2" db:"featureType" json:"featureType"`
}

func NewTalkServiceAcquireEncryptedAccessTokenArgs() *TalkServiceAcquireEncryptedAccessTokenArgs {
  return &TalkServiceAcquireEncryptedAccessTokenArgs{}
}


func (p *TalkServiceAcquireEncryptedAccessTokenArgs) GetFeatureType() FeatureType {
  return p.FeatureType
}
func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := FeatureType(v)
  p.FeatureType = temp
}
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireEncryptedAccessToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "featureType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:featureType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FeatureType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.featureType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:featureType: ", p), err) }
  return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcquireEncryptedAccessTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcquireEncryptedAccessTokenResult() *TalkServiceAcquireEncryptedAccessTokenResult {
  return &TalkServiceAcquireEncryptedAccessTokenResult{}
}

var TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT string
func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT *TalkException
func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireEncryptedAccessToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatRoomMid
//  - Type
//  - Contents
type TalkServiceCreateChatRoomAnnouncementArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatRoomMid string `thrift:"chatRoomMid,2" db:"chatRoomMid" json:"chatRoomMid"`
  Type ChatRoomAnnouncementType `thrift:"type,3" db:"type" json:"type"`
  Contents *ChatRoomAnnouncementContents `thrift:"contents,4" db:"contents" json:"contents"`
}

func NewTalkServiceCreateChatRoomAnnouncementArgs() *TalkServiceCreateChatRoomAnnouncementArgs {
  return &TalkServiceCreateChatRoomAnnouncementArgs{}
}


func (p *TalkServiceCreateChatRoomAnnouncementArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) GetChatRoomMid() string {
  return p.ChatRoomMid
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) GetType() ChatRoomAnnouncementType {
  return p.Type
}
var TalkServiceCreateChatRoomAnnouncementArgs_Contents_DEFAULT *ChatRoomAnnouncementContents
func (p *TalkServiceCreateChatRoomAnnouncementArgs) GetContents() *ChatRoomAnnouncementContents {
  if !p.IsSetContents() {
    return TalkServiceCreateChatRoomAnnouncementArgs_Contents_DEFAULT
  }
return p.Contents
}
func (p *TalkServiceCreateChatRoomAnnouncementArgs) IsSetContents() bool {
  return p.Contents != nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatRoomMid = v
}
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ChatRoomAnnouncementType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Contents = &ChatRoomAnnouncementContents{}
  if err := p.Contents.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contents), err)
  }
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createChatRoomAnnouncement_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatRoomMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatRoomMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMid: ", p), err) }
  return err
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:contents: ", p), err) }
  if err := p.Contents.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contents), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:contents: ", p), err) }
  return err
}

func (p *TalkServiceCreateChatRoomAnnouncementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatRoomAnnouncementArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateChatRoomAnnouncementResult struct {
  Success *ChatRoomAnnouncement `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateChatRoomAnnouncementResult() *TalkServiceCreateChatRoomAnnouncementResult {
  return &TalkServiceCreateChatRoomAnnouncementResult{}
}

var TalkServiceCreateChatRoomAnnouncementResult_Success_DEFAULT *ChatRoomAnnouncement
func (p *TalkServiceCreateChatRoomAnnouncementResult) GetSuccess() *ChatRoomAnnouncement {
  if !p.IsSetSuccess() {
    return TalkServiceCreateChatRoomAnnouncementResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCreateChatRoomAnnouncementResult_E_DEFAULT *TalkException
func (p *TalkServiceCreateChatRoomAnnouncementResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateChatRoomAnnouncementResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateChatRoomAnnouncementResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChatRoomAnnouncement{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createChatRoomAnnouncement_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatRoomAnnouncementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatRoomAnnouncementResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
//  - Reference
type TalkServiceFindAndAddContactByMetaTagArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactByMetaTagArgs() *TalkServiceFindAndAddContactByMetaTagArgs {
  return &TalkServiceFindAndAddContactByMetaTagArgs{}
}


func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetSearchId() string {
  return p.SearchId
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactByMetaTagArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactByMetaTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactByMetaTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactByMetaTagResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactByMetaTagResult() *TalkServiceFindAndAddContactByMetaTagResult {
  return &TalkServiceFindAndAddContactByMetaTagResult{}
}

var TalkServiceFindAndAddContactByMetaTagResult_Success_DEFAULT *Contact
func (p *TalkServiceFindAndAddContactByMetaTagResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindAndAddContactByMetaTagResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindAndAddContactByMetaTagResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactByMetaTagResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactByMetaTagResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactByMetaTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactByMetaTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactByMetaTagResult(%+v)", *p)
}

// Attributes:
//  - FollowRequest
type TalkServiceFollowArgs struct {
  // unused field # 1
  FollowRequest *FollowRequest `thrift:"followRequest,2" db:"followRequest" json:"followRequest"`
}

func NewTalkServiceFollowArgs() *TalkServiceFollowArgs {
  return &TalkServiceFollowArgs{}
}

var TalkServiceFollowArgs_FollowRequest_DEFAULT *FollowRequest
func (p *TalkServiceFollowArgs) GetFollowRequest() *FollowRequest {
  if !p.IsSetFollowRequest() {
    return TalkServiceFollowArgs_FollowRequest_DEFAULT
  }
return p.FollowRequest
}
func (p *TalkServiceFollowArgs) IsSetFollowRequest() bool {
  return p.FollowRequest != nil
}

func (p *TalkServiceFollowArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFollowArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowRequest = &FollowRequest{}
  if err := p.FollowRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowRequest), err)
  }
  return nil
}

func (p *TalkServiceFollowArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "follow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFollowArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:followRequest: ", p), err) }
  if err := p.FollowRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:followRequest: ", p), err) }
  return err
}

func (p *TalkServiceFollowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFollowArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceFollowResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFollowResult() *TalkServiceFollowResult {
  return &TalkServiceFollowResult{}
}

var TalkServiceFollowResult_E_DEFAULT *TalkException
func (p *TalkServiceFollowResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFollowResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFollowResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFollowResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFollowResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFollowResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "follow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFollowResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFollowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFollowResult(%+v)", *p)
}

// Attributes:
//  - ID
type TalkServiceGetContactArgs struct {
  // unused field # 1
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceGetContactArgs() *TalkServiceGetContactArgs {
  return &TalkServiceGetContactArgs{}
}


func (p *TalkServiceGetContactArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceGetContactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceGetContactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceGetContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactResult() *TalkServiceGetContactResult {
  return &TalkServiceGetContactResult{}
}

var TalkServiceGetContactResult_Success_DEFAULT *Contact
func (p *TalkServiceGetContactResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceGetContactResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetContactResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceLeaveGroupArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceLeaveGroupArgs() *TalkServiceLeaveGroupArgs {
  return &TalkServiceLeaveGroupArgs{}
}


func (p *TalkServiceLeaveGroupArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceLeaveGroupArgs) GetGroupId() string {
  return p.GroupId
}
func (p *TalkServiceLeaveGroupArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveGroupArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceLeaveGroupArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceLeaveGroupArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "leaveGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveGroupArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceLeaveGroupArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceLeaveGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLeaveGroupResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceLeaveGroupResult() *TalkServiceLeaveGroupResult {
  return &TalkServiceLeaveGroupResult{}
}

var TalkServiceLeaveGroupResult_E_DEFAULT *TalkException
func (p *TalkServiceLeaveGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceLeaveGroupResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceLeaveGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceLeaveGroupResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveGroupResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceLeaveGroupResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "leaveGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveGroupResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceLeaveGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveGroupResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatCheckedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
  SessionId []byte `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatCheckedArgs() *TalkServiceSendChatCheckedArgs {
  return &TalkServiceSendChatCheckedArgs{}
}


func (p *TalkServiceSendChatCheckedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceSendChatCheckedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceSendChatCheckedArgs) GetLastMessageId() string {
  return p.LastMessageId
}

func (p *TalkServiceSendChatCheckedArgs) GetSessionId() []byte {
  return p.SessionId
}
func (p *TalkServiceSendChatCheckedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatChecked_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatCheckedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SessionId); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatCheckedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatCheckedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatCheckedResult() *TalkServiceSendChatCheckedResult {
  return &TalkServiceSendChatCheckedResult{}
}

var TalkServiceSendChatCheckedResult_E_DEFAULT *TalkException
func (p *TalkServiceSendChatCheckedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendChatCheckedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendChatCheckedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendChatCheckedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatChecked_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatCheckedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendChatCheckedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatCheckedResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type TalkServiceUpdateIdentifierArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  Request *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewTalkServiceUpdateIdentifierArgs() *TalkServiceUpdateIdentifierArgs {
  return &TalkServiceUpdateIdentifierArgs{}
}


func (p *TalkServiceUpdateIdentifierArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var TalkServiceUpdateIdentifierArgs_Request_DEFAULT *IdentityCredentialRequest
func (p *TalkServiceUpdateIdentifierArgs) GetRequest() *IdentityCredentialRequest {
  if !p.IsSetRequest() {
    return TalkServiceUpdateIdentifierArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceUpdateIdentifierArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceUpdateIdentifierArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateIdentifierArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *TalkServiceUpdateIdentifierArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IdentityCredentialRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceUpdateIdentifierArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateIdentifier_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateIdentifierArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *TalkServiceUpdateIdentifierArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err) }
  return err
}

func (p *TalkServiceUpdateIdentifierArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateIdentifierArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateIdentifierResult struct {
  Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateIdentifierResult() *TalkServiceUpdateIdentifierResult {
  return &TalkServiceUpdateIdentifierResult{}
}

var TalkServiceUpdateIdentifierResult_Success_DEFAULT *IdentityCredentialResponse
func (p *TalkServiceUpdateIdentifierResult) GetSuccess() *IdentityCredentialResponse {
  if !p.IsSetSuccess() {
    return TalkServiceUpdateIdentifierResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceUpdateIdentifierResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateIdentifierResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateIdentifierResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateIdentifierResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateIdentifierResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateIdentifierResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateIdentifierResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdentityCredentialResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceUpdateIdentifierResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateIdentifierResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateIdentifier_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateIdentifierResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateIdentifierResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateIdentifierResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateIdentifierResult(%+v)", *p)
}


