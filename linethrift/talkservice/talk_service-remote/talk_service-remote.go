// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"talkservice"
)

var _ = talkservice.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void tryFriendRequest(string midOrEMid, Method_ method, string friendRequestParams)")
  fmt.Fprintln(os.Stderr, "  void updateExtendedProfileAttribute(i32 reqSeq, UpdateExtendedProfileAttributeAttr attr, ExtendedProfile extendedProfile)")
  fmt.Fprintln(os.Stderr, "  void verifyAccountMigration(string migrationSessionId)")
  fmt.Fprintln(os.Stderr, "  void reportLocation(Geolocation location, Trigger trigger, ClientNetworkStatus networkStatus)")
  fmt.Fprintln(os.Stderr, "   getPaidCallBalanceList(string language)")
  fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest requests)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, MIDType type, string reference)")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "  GetFollowersResponse getFollowers(GetFollowersRequest getFollowersRequest)")
  fmt.Fprintln(os.Stderr, "   getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr, "  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  void removeChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, i64 announcementSeq)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string chatMid, string lastMessageId, string sessionId)")
  fmt.Fprintln(os.Stderr, "  IdentityCredentialResponse updatePassword(string authSessionId, IdentityCredentialRequest request)")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id, string reference)")
  fmt.Fprintln(os.Stderr, "  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void requestCleanupUserProvidedData( dataTypes)")
  fmt.Fprintln(os.Stderr, "  BuddyStatusBar getBuddyStatusBarV2(GetBuddyStatusBarV2Request request)")
  fmt.Fprintln(os.Stderr, "  PaidCallHistoryResult getPaidCallHistory(i64 start, i32 size, string language)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  Group createGroupV2(i32 seq, string name,  contactIds)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones, string reference)")
  fmt.Fprintln(os.Stderr, "   getAcceptedProximityMatches(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncementsBulk( chatRoomMids, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getCountries(CountryGroup countryGroup)")
  fmt.Fprintln(os.Stderr, "  GetFollowingsResponse getFollowings(GetFollowingsRequest getFollowingsRequest)")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "  i64 getRingbackTone()")
  fmt.Fprintln(os.Stderr, "  RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void report(i64 syncOpRevision, ReportCategory category, string report)")
  fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, Group group)")
  fmt.Fprintln(os.Stderr, "   findBuddyContactsByQuery(string language, string country, string query, i32 fromIndex, i32 count, RequestsSource requestSource)")
  fmt.Fprintln(os.Stderr, "  PaidCallMetadataResult getPaidCallMetadata(string language)")
  fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncements(string chatRoomMids)")
  fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
  fmt.Fprintln(os.Stderr, "   getFriendRequests(Direction direction, i64 lastSeenSeqId)")
  fmt.Fprintln(os.Stderr, "  Ringtone getRingtone()")
  fmt.Fprintln(os.Stderr, "  void updateProfile(i32 reqSeq, Profile profile)")
  fmt.Fprintln(os.Stderr, "  void notifySleep(i64 lastRev, i32 badge)")
  fmt.Fprintln(os.Stderr, "  string registerWithSnsIdAndIdentityCredential(SnSIdTyoe snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void removeFollower(RemoveFollowerRequest removeFollowerRequest)")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(Provider provider, string identifier, string locale)")
  fmt.Fprintln(os.Stderr, "  void sendEchoPush(string text)")
  fmt.Fprintln(os.Stderr, "  void unfollow(UnfollowRequest unfollowRequest)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroupCall(string chatMid,  memberMids, MediaType mediaType)")
  fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getChatRoomBGMs( chatRoomMids, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getE2EEGroupSharedKey(i32 keyVersion, string chatMid, i32 groupKeyId)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsInvited(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo, string udidHash, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  RegisterWithSnsIdResult registerWithSnsId(SnSIdTyoe snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void removeFriendRequest(Direction direction, string midOrEMid)")
  fmt.Fprintln(os.Stderr, "  string openAuthSession(AuthSessionRequest request)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcodeWithE2EE(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, string encryptedKeyChain, string hashKeyChain)")
  fmt.Fprintln(os.Stderr, "  GetBalanceResponse getBalance(GetBalanceRequest request)")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(updateNotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  Room createRoomV2(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByMetaTag(string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsJoined(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getRoomsV2( roomIds)")
  fmt.Fprintln(os.Stderr, "  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  GroupCallRoute acquireGroupCallRoute(string chatMid, MediaType mediaType, bool isInitialHost,  capabilities)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketIdWithTag)")
  fmt.Fprintln(os.Stderr, "   getE2EEPublicKey(string mid, i32 keyVersion, i32 keyId)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithIdentityCredential(string sessionId, Provider provider, string identifier, string verifier, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  string reissueGroupTicket(string groupMid)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttributes(i32 reqSeq, UpdateProfileAttributesRequest request)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, Attr attr, string value)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  string decryptFollowEMid(string eMid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string searchId)")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
  fmt.Fprintln(os.Stderr, "  bool wakeUpLongPolling(i64 clientRevision)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitationByTicket(i32 reqSeq, string groupMid, string ticketId)")
  fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
  fmt.Fprintln(os.Stderr, "   getGroupsV2( groupId)")
  fmt.Fprintln(os.Stderr, "   getGroups( groupId)")
  fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  Group getCompactGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  Group getGroupWithoutMembers(string groupId)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "   getMessageReadRange( chatIds, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes2( attributesToRetrieve)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  ChatRoomBGM updateChatRoomBGM(i32 reqSeq, string chatRoomMid, string chatRoomBGMInfo)")
  fmt.Fprintln(os.Stderr, "  Group findGroupByTicket(string ticketId)")
  fmt.Fprintln(os.Stderr, "  FriendRequestsInfo getRecentFriendRequests(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes(i32 attrBitset)")
  fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
  fmt.Fprintln(os.Stderr, "   updateSettingsAttributes2(i32 reqSeq,  attributesToUpdate, Settings settings)")
  fmt.Fprintln(os.Stderr, "  ContactRegistration getContactRegistration(string id, MIDType type)")
  fmt.Fprintln(os.Stderr, "  Settings getSettings(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void noop()")
  fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactFlag flag, string value)")
  fmt.Fprintln(os.Stderr, "  GroupCall getGroupCall(string chatMid)")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
  fmt.Fprintln(os.Stderr, "  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  ExtendedProfile getExtendedProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureType featureType)")
  fmt.Fprintln(os.Stderr, "  ChatRoomAnnouncement createChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents)")
  fmt.Fprintln(os.Stderr, "  Contact findAndAddContactByMetaTag(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  void follow(FollowRequest followRequest)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId, string sessionId)")
  fmt.Fprintln(os.Stderr, "  IdentityCredentialResponse updateIdentifier(string authSessionId, IdentityCredentialRequest request)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := talkservice.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "tryFriendRequest":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TryFriendRequest requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Method_(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TryFriendRequest(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateExtendedProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateExtendedProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err565 := (strconv.Atoi(flag.Arg(1)))
    if err565 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.UpdateExtendedProfileAttributeAttr(tmp1)
    value1 := argvalue1
    arg566 := flag.Arg(3)
    mbTrans567 := thrift.NewTMemoryBufferLen(len(arg566))
    defer mbTrans567.Close()
    _, err568 := mbTrans567.WriteString(arg566)
    if err568 != nil {
      Usage()
      return
    }
    factory569 := thrift.NewTJSONProtocolFactory()
    jsProt570 := factory569.GetProtocol(mbTrans567)
    argvalue2 := talkservice.NewExtendedProfile()
    err571 := argvalue2.Read(context.Background(), jsProt570)
    if err571 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateExtendedProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyAccountMigration":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "VerifyAccountMigration requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.VerifyAccountMigration(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reportLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReportLocation requires 3 args")
      flag.Usage()
    }
    arg573 := flag.Arg(1)
    mbTrans574 := thrift.NewTMemoryBufferLen(len(arg573))
    defer mbTrans574.Close()
    _, err575 := mbTrans574.WriteString(arg573)
    if err575 != nil {
      Usage()
      return
    }
    factory576 := thrift.NewTJSONProtocolFactory()
    jsProt577 := factory576.GetProtocol(mbTrans574)
    argvalue0 := talkservice.NewGeolocation()
    err578 := argvalue0.Read(context.Background(), jsProt577)
    if err578 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Trigger(tmp1)
    value1 := argvalue1
    arg579 := flag.Arg(3)
    mbTrans580 := thrift.NewTMemoryBufferLen(len(arg579))
    defer mbTrans580.Close()
    _, err581 := mbTrans580.WriteString(arg579)
    if err581 != nil {
      Usage()
      return
    }
    factory582 := thrift.NewTJSONProtocolFactory()
    jsProt583 := factory582.GetProtocol(mbTrans580)
    argvalue2 := talkservice.NewClientNetworkStatus()
    err584 := argvalue2.Read(context.Background(), jsProt583)
    if err584 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ReportLocation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getPaidCallBalanceList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallBalanceList requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallBalanceList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
      flag.Usage()
    }
    arg586 := flag.Arg(1)
    mbTrans587 := thrift.NewTMemoryBufferLen(len(arg586))
    defer mbTrans587.Close()
    _, err588 := mbTrans587.WriteString(arg586)
    if err588 != nil {
      Usage()
      return
    }
    factory589 := thrift.NewTJSONProtocolFactory()
    jsProt590 := factory589.GetProtocol(mbTrans587)
    argvalue0 := talkservice.NewCreateChatRequest()
    err591 := argvalue0.Read(context.Background(), jsProt590)
    if err591 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err592 := (strconv.Atoi(flag.Arg(1)))
    if err592 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.MIDType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err595 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err595 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err596 := (strconv.Atoi(flag.Arg(2)))
    if err596 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg597 := flag.Arg(1)
    mbTrans598 := thrift.NewTMemoryBufferLen(len(arg597))
    defer mbTrans598.Close()
    _, err599 := mbTrans598.WriteString(arg597)
    if err599 != nil { 
      Usage()
      return
    }
    factory600 := thrift.NewTJSONProtocolFactory()
    jsProt601 := factory600.GetProtocol(mbTrans598)
    containerStruct0 := talkservice.NewTalkServiceGetContactsArgs()
    err602 := containerStruct0.ReadField1(context.Background(), jsProt601)
    if err602 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowers requires 1 args")
      flag.Usage()
    }
    arg603 := flag.Arg(1)
    mbTrans604 := thrift.NewTMemoryBufferLen(len(arg603))
    defer mbTrans604.Close()
    _, err605 := mbTrans604.WriteString(arg603)
    if err605 != nil {
      Usage()
      return
    }
    factory606 := thrift.NewTJSONProtocolFactory()
    jsProt607 := factory606.GetProtocol(mbTrans604)
    argvalue0 := talkservice.NewGetFollowersRequest()
    err608 := argvalue0.Read(context.Background(), jsProt607)
    if err608 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err610 := (strconv.Atoi(flag.Arg(1)))
    if err610 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyRegistrationComplete":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyRegistrationComplete requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyRegistrationComplete(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeChatRoomAnnouncement":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RemoveChatRoomAnnouncement requires 3 args")
      flag.Usage()
    }
    tmp0, err614 := (strconv.Atoi(flag.Arg(1)))
    if err614 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err616 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err616 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RemoveChatRoomAnnouncement(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 4 args")
      flag.Usage()
    }
    tmp0, err617 := (strconv.Atoi(flag.Arg(1)))
    if err617 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updatePassword":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdatePassword requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg622 := flag.Arg(2)
    mbTrans623 := thrift.NewTMemoryBufferLen(len(arg622))
    defer mbTrans623.Close()
    _, err624 := mbTrans623.WriteString(arg622)
    if err624 != nil {
      Usage()
      return
    }
    factory625 := thrift.NewTJSONProtocolFactory()
    jsProt626 := factory625.GetProtocol(mbTrans623)
    argvalue1 := talkservice.NewIdentityCredentialRequest()
    err627 := argvalue1.Read(context.Background(), jsProt626)
    if err627 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdatePassword(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 3 args")
      flag.Usage()
    }
    tmp0, err628 := (strconv.Atoi(flag.Arg(1)))
    if err628 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnblockContact(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredentialWithResult":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredentialWithResult_ requires 2 args")
      flag.Usage()
    }
    arg631 := flag.Arg(1)
    mbTrans632 := thrift.NewTMemoryBufferLen(len(arg631))
    defer mbTrans632.Close()
    _, err633 := mbTrans632.WriteString(arg631)
    if err633 != nil {
      Usage()
      return
    }
    factory634 := thrift.NewTJSONProtocolFactory()
    jsProt635 := factory634.GetProtocol(mbTrans632)
    argvalue0 := talkservice.NewIdentityCredential()
    err636 := argvalue0.Read(context.Background(), jsProt635)
    if err636 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyIdentityCredentialWithResult_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "requestCleanupUserProvidedData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestCleanupUserProvidedData requires 1 args")
      flag.Usage()
    }
    arg638 := flag.Arg(1)
    mbTrans639 := thrift.NewTMemoryBufferLen(len(arg638))
    defer mbTrans639.Close()
    _, err640 := mbTrans639.WriteString(arg638)
    if err640 != nil { 
      Usage()
      return
    }
    factory641 := thrift.NewTJSONProtocolFactory()
    jsProt642 := factory641.GetProtocol(mbTrans639)
    containerStruct0 := talkservice.NewTalkServiceRequestCleanupUserProvidedDataArgs()
    err643 := containerStruct0.ReadField1(context.Background(), jsProt642)
    if err643 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.DataTypes
    value0 := argvalue0
    fmt.Print(client.RequestCleanupUserProvidedData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBuddyStatusBarV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBuddyStatusBarV2 requires 1 args")
      flag.Usage()
    }
    arg644 := flag.Arg(1)
    mbTrans645 := thrift.NewTMemoryBufferLen(len(arg644))
    defer mbTrans645.Close()
    _, err646 := mbTrans645.WriteString(arg644)
    if err646 != nil {
      Usage()
      return
    }
    factory647 := thrift.NewTJSONProtocolFactory()
    jsProt648 := factory647.GetProtocol(mbTrans645)
    argvalue0 := talkservice.NewGetBuddyStatusBarV2Request()
    err649 := argvalue0.Read(context.Background(), jsProt648)
    if err649 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetBuddyStatusBarV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPaidCallHistory":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPaidCallHistory requires 3 args")
      flag.Usage()
    }
    argvalue0, err650 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err650 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err651 := (strconv.Atoi(flag.Arg(2)))
    if err651 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPaidCallHistory(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err653 := (strconv.Atoi(flag.Arg(1)))
    if err653 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createGroupV2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateGroupV2 requires 3 args")
      flag.Usage()
    }
    tmp0, err655 := (strconv.Atoi(flag.Arg(1)))
    if err655 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg657 := flag.Arg(3)
    mbTrans658 := thrift.NewTMemoryBufferLen(len(arg657))
    defer mbTrans658.Close()
    _, err659 := mbTrans658.WriteString(arg657)
    if err659 != nil { 
      Usage()
      return
    }
    factory660 := thrift.NewTJSONProtocolFactory()
    jsProt661 := factory660.GetProtocol(mbTrans658)
    containerStruct2 := talkservice.NewTalkServiceCreateGroupV2Args()
    err662 := containerStruct2.ReadField3(context.Background(), jsProt661)
    if err662 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CreateGroupV2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 3 args")
      flag.Usage()
    }
    tmp0, err663 := (strconv.Atoi(flag.Arg(1)))
    if err663 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg664 := flag.Arg(2)
    mbTrans665 := thrift.NewTMemoryBufferLen(len(arg664))
    defer mbTrans665.Close()
    _, err666 := mbTrans665.WriteString(arg664)
    if err666 != nil { 
      Usage()
      return
    }
    factory667 := thrift.NewTJSONProtocolFactory()
    jsProt668 := factory667.GetProtocol(mbTrans665)
    containerStruct1 := talkservice.NewTalkServiceFindAndAddContactsByPhoneArgs()
    err669 := containerStruct1.ReadField2(context.Background(), jsProt668)
    if err669 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAcceptedProximityMatches":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAcceptedProximityMatches requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAcceptedProximityMatches(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncementsBulk":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncementsBulk requires 2 args")
      flag.Usage()
    }
    arg672 := flag.Arg(1)
    mbTrans673 := thrift.NewTMemoryBufferLen(len(arg672))
    defer mbTrans673.Close()
    _, err674 := mbTrans673.WriteString(arg672)
    if err674 != nil { 
      Usage()
      return
    }
    factory675 := thrift.NewTJSONProtocolFactory()
    jsProt676 := factory675.GetProtocol(mbTrans673)
    containerStruct0 := talkservice.NewTalkServiceGetChatRoomAnnouncementsBulkArgs()
    err677 := containerStruct0.ReadField1(context.Background(), jsProt676)
    if err677 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatRoomMids
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetChatRoomAnnouncementsBulk(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCountries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCountries requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.CountryGroup(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCountries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowings requires 1 args")
      flag.Usage()
    }
    arg678 := flag.Arg(1)
    mbTrans679 := thrift.NewTMemoryBufferLen(len(arg678))
    defer mbTrans679.Close()
    _, err680 := mbTrans679.WriteString(arg678)
    if err680 != nil {
      Usage()
      return
    }
    factory681 := thrift.NewTJSONProtocolFactory()
    jsProt682 := factory681.GetProtocol(mbTrans679)
    argvalue0 := talkservice.NewGetFollowingsRequest()
    err683 := argvalue0.Read(context.Background(), jsProt682)
    if err683 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "getRingbackTone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRingbackTone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRingbackTone(context.Background()))
    fmt.Print("\n")
    break
  case "registerWithPhoneNumber":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterWithPhoneNumber requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterWithPhoneNumber(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "report":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Report requires 3 args")
      flag.Usage()
    }
    argvalue0, err686 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err686 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.ReportCategory(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.Report(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "unblockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err688 := (strconv.Atoi(flag.Arg(1)))
    if err688 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err690 := (strconv.Atoi(flag.Arg(1)))
    if err690 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg691 := flag.Arg(2)
    mbTrans692 := thrift.NewTMemoryBufferLen(len(arg691))
    defer mbTrans692.Close()
    _, err693 := mbTrans692.WriteString(arg691)
    if err693 != nil {
      Usage()
      return
    }
    factory694 := thrift.NewTJSONProtocolFactory()
    jsProt695 := factory694.GetProtocol(mbTrans692)
    argvalue1 := talkservice.NewGroup()
    err696 := argvalue1.Read(context.Background(), jsProt695)
    if err696 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findBuddyContactsByQuery":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "FindBuddyContactsByQuery requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err700 := (strconv.Atoi(flag.Arg(4)))
    if err700 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err701 := (strconv.Atoi(flag.Arg(5)))
    if err701 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err := (strconv.Atoi(flag.Arg(6)))
    if err != nil {
      Usage()
     return
    }
    argvalue5 := talkservice.RequestsSource(tmp5)
    value5 := argvalue5
    fmt.Print(client.FindBuddyContactsByQuery(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getPaidCallMetadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallMetadata requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "blockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err703 := (strconv.Atoi(flag.Arg(1)))
    if err703 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 3 args")
      flag.Usage()
    }
    tmp0, err705 := (strconv.Atoi(flag.Arg(1)))
    if err705 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllChatMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
      flag.Usage()
    }
    arg708 := flag.Arg(1)
    mbTrans709 := thrift.NewTMemoryBufferLen(len(arg708))
    defer mbTrans709.Close()
    _, err710 := mbTrans709.WriteString(arg708)
    if err710 != nil {
      Usage()
      return
    }
    factory711 := thrift.NewTJSONProtocolFactory()
    jsProt712 := factory711.GetProtocol(mbTrans709)
    argvalue0 := talkservice.NewGetAllChatMidsRequest()
    err713 := argvalue0.Read(context.Background(), jsProt712)
    if err713 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncements":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncements requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetChatRoomAnnouncements(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCountryWithRequestIp":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCountryWithRequestIp(context.Background()))
    fmt.Print("\n")
    break
  case "getFriendRequests":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFriendRequests requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Direction(tmp0)
    value0 := argvalue0
    argvalue1, err715 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err715 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetFriendRequests(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRingtone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRingtone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRingtone(context.Background()))
    fmt.Print("\n")
    break
  case "updateProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfile requires 2 args")
      flag.Usage()
    }
    tmp0, err716 := (strconv.Atoi(flag.Arg(1)))
    if err716 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg717 := flag.Arg(2)
    mbTrans718 := thrift.NewTMemoryBufferLen(len(arg717))
    defer mbTrans718.Close()
    _, err719 := mbTrans718.WriteString(arg717)
    if err719 != nil {
      Usage()
      return
    }
    factory720 := thrift.NewTJSONProtocolFactory()
    jsProt721 := factory720.GetProtocol(mbTrans718)
    argvalue1 := talkservice.NewProfile()
    err722 := argvalue1.Read(context.Background(), jsProt721)
    if err722 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifySleep":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifySleep requires 2 args")
      flag.Usage()
    }
    argvalue0, err723 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err723 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err724 := (strconv.Atoi(flag.Arg(2)))
    if err724 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.NotifySleep(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerWithSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsIdAndIdentityCredential requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SnSIdTyoe(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg726 := flag.Arg(3)
    mbTrans727 := thrift.NewTMemoryBufferLen(len(arg726))
    defer mbTrans727.Close()
    _, err728 := mbTrans727.WriteString(arg726)
    if err728 != nil {
      Usage()
      return
    }
    factory729 := thrift.NewTJSONProtocolFactory()
    jsProt730 := factory729.GetProtocol(mbTrans727)
    argvalue2 := talkservice.NewIdentityCredential()
    err731 := argvalue2.Read(context.Background(), jsProt730)
    if err731 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg734 := flag.Arg(6)
    mbTrans735 := thrift.NewTMemoryBufferLen(len(arg734))
    defer mbTrans735.Close()
    _, err736 := mbTrans735.WriteString(arg734)
    if err736 != nil {
      Usage()
      return
    }
    factory737 := thrift.NewTJSONProtocolFactory()
    jsProt738 := factory737.GetProtocol(mbTrans735)
    argvalue5 := talkservice.NewDeviceInfo()
    err739 := argvalue5.Read(context.Background(), jsProt738)
    if err739 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.RegisterWithSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "removeFollower":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveFollower requires 1 args")
      flag.Usage()
    }
    arg741 := flag.Arg(1)
    mbTrans742 := thrift.NewTMemoryBufferLen(len(arg741))
    defer mbTrans742.Close()
    _, err743 := mbTrans742.WriteString(arg741)
    if err743 != nil {
      Usage()
      return
    }
    factory744 := thrift.NewTJSONProtocolFactory()
    jsProt745 := factory744.GetProtocol(mbTrans742)
    argvalue0 := talkservice.NewRemoveFollowerRequest()
    err746 := argvalue0.Read(context.Background(), jsProt745)
    if err746 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveFollower(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Provider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendEchoPush":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendEchoPush requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SendEchoPush(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unfollow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unfollow requires 1 args")
      flag.Usage()
    }
    arg750 := flag.Arg(1)
    mbTrans751 := thrift.NewTMemoryBufferLen(len(arg750))
    defer mbTrans751.Close()
    _, err752 := mbTrans751.WriteString(arg750)
    if err752 != nil {
      Usage()
      return
    }
    factory753 := thrift.NewTJSONProtocolFactory()
    jsProt754 := factory753.GetProtocol(mbTrans751)
    argvalue0 := talkservice.NewUnfollowRequest()
    err755 := argvalue0.Read(context.Background(), jsProt754)
    if err755 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unfollow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroupCall":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroupCall requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg757 := flag.Arg(2)
    mbTrans758 := thrift.NewTMemoryBufferLen(len(arg757))
    defer mbTrans758.Close()
    _, err759 := mbTrans758.WriteString(arg757)
    if err759 != nil { 
      Usage()
      return
    }
    factory760 := thrift.NewTJSONProtocolFactory()
    jsProt761 := factory760.GetProtocol(mbTrans758)
    containerStruct1 := talkservice.NewTalkServiceInviteIntoGroupCallArgs()
    err762 := containerStruct1.ReadField2(context.Background(), jsProt761)
    if err762 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MemberMids
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.MediaType(tmp2)
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroupCall(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "cancelChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
      flag.Usage()
    }
    arg763 := flag.Arg(1)
    mbTrans764 := thrift.NewTMemoryBufferLen(len(arg763))
    defer mbTrans764.Close()
    _, err765 := mbTrans764.WriteString(arg763)
    if err765 != nil {
      Usage()
      return
    }
    factory766 := thrift.NewTJSONProtocolFactory()
    jsProt767 := factory766.GetProtocol(mbTrans764)
    argvalue0 := talkservice.NewCancelChatInvitationRequest()
    err768 := argvalue0.Read(context.Background(), jsProt767)
    if err768 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findChatByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindChatByTicket requires 1 args")
      flag.Usage()
    }
    arg769 := flag.Arg(1)
    mbTrans770 := thrift.NewTMemoryBufferLen(len(arg769))
    defer mbTrans770.Close()
    _, err771 := mbTrans770.WriteString(arg769)
    if err771 != nil {
      Usage()
      return
    }
    factory772 := thrift.NewTJSONProtocolFactory()
    jsProt773 := factory772.GetProtocol(mbTrans770)
    argvalue0 := talkservice.NewFindChatByTicketRequest()
    err774 := argvalue0.Read(context.Background(), jsProt773)
    if err774 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindChatByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetAllContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatRoomBGMs":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChatRoomBGMs requires 2 args")
      flag.Usage()
    }
    arg775 := flag.Arg(1)
    mbTrans776 := thrift.NewTMemoryBufferLen(len(arg775))
    defer mbTrans776.Close()
    _, err777 := mbTrans776.WriteString(arg775)
    if err777 != nil { 
      Usage()
      return
    }
    factory778 := thrift.NewTJSONProtocolFactory()
    jsProt779 := factory778.GetProtocol(mbTrans776)
    containerStruct0 := talkservice.NewTalkServiceGetChatRoomBGMsArgs()
    err780 := containerStruct0.ReadField1(context.Background(), jsProt779)
    if err780 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatRoomMids
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetChatRoomBGMs(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEGroupSharedKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEGroupSharedKey requires 3 args")
      flag.Usage()
    }
    tmp0, err781 := (strconv.Atoi(flag.Arg(1)))
    if err781 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err783 := (strconv.Atoi(flag.Arg(3)))
    if err783 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEGroupSharedKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getGroupIdsInvited":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetGroupIdsInvited(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyUpdated":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "NotifyUpdated requires 4 args")
      flag.Usage()
    }
    argvalue0, err784 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err784 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg785 := flag.Arg(2)
    mbTrans786 := thrift.NewTMemoryBufferLen(len(arg785))
    defer mbTrans786.Close()
    _, err787 := mbTrans786.WriteString(arg785)
    if err787 != nil {
      Usage()
      return
    }
    factory788 := thrift.NewTJSONProtocolFactory()
    jsProt789 := factory788.GetProtocol(mbTrans786)
    argvalue1 := talkservice.NewDeviceInfo()
    err790 := argvalue1.Read(context.Background(), jsProt789)
    if err790 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.NotifyUpdated(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerWithSnsId":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsId requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SnSIdTyoe(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg796 := flag.Arg(5)
    mbTrans797 := thrift.NewTMemoryBufferLen(len(arg796))
    defer mbTrans797.Close()
    _, err798 := mbTrans797.WriteString(arg796)
    if err798 != nil {
      Usage()
      return
    }
    factory799 := thrift.NewTJSONProtocolFactory()
    jsProt800 := factory799.GetProtocol(mbTrans797)
    argvalue4 := talkservice.NewDeviceInfo()
    err801 := argvalue4.Read(context.Background(), jsProt800)
    if err801 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.RegisterWithSnsId(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "removeFriendRequest":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveFriendRequest requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Direction(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveFriendRequest(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openAuthSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenAuthSession requires 1 args")
      flag.Usage()
    }
    arg805 := flag.Arg(1)
    mbTrans806 := thrift.NewTMemoryBufferLen(len(arg805))
    defer mbTrans806.Close()
    _, err807 := mbTrans806.WriteString(arg805)
    if err807 != nil {
      Usage()
      return
    }
    factory808 := thrift.NewTJSONProtocolFactory()
    jsProt809 := factory808.GetProtocol(mbTrans806)
    argvalue0 := talkservice.NewAuthSessionRequest()
    err810 := argvalue0.Read(context.Background(), jsProt809)
    if err810 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenAuthSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyQrcodeWithE2EE":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "VerifyQrcodeWithE2EE requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ErrorCode(tmp2)
    value2 := argvalue2
    arg813 := flag.Arg(4)
    mbTrans814 := thrift.NewTMemoryBufferLen(len(arg813))
    defer mbTrans814.Close()
    _, err815 := mbTrans814.WriteString(arg813)
    if err815 != nil {
      Usage()
      return
    }
    factory816 := thrift.NewTJSONProtocolFactory()
    jsProt817 := factory816.GetProtocol(mbTrans814)
    argvalue3 := talkservice.NewE2EEPublicKey()
    err818 := argvalue3.Read(context.Background(), jsProt817)
    if err818 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    argvalue5 := []byte(flag.Arg(6))
    value5 := argvalue5
    fmt.Print(client.VerifyQrcodeWithE2EE(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getBalance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBalance requires 1 args")
      flag.Usage()
    }
    arg821 := flag.Arg(1)
    mbTrans822 := thrift.NewTMemoryBufferLen(len(arg821))
    defer mbTrans822.Close()
    _, err823 := mbTrans822.WriteString(arg821)
    if err823 != nil {
      Usage()
      return
    }
    factory824 := thrift.NewTJSONProtocolFactory()
    jsProt825 := factory824.GetProtocol(mbTrans822)
    argvalue0 := talkservice.NewGetBalanceRequest()
    err826 := argvalue0.Read(context.Background(), jsProt825)
    if err826 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetBalance(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.UpdateNotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "verifyPhoneNumber":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumber requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.VerifyPhoneNumber(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "cancelGroupInvitation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CancelGroupInvitation requires 3 args")
      flag.Usage()
    }
    tmp0, err833 := (strconv.Atoi(flag.Arg(1)))
    if err833 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg835 := flag.Arg(3)
    mbTrans836 := thrift.NewTMemoryBufferLen(len(arg835))
    defer mbTrans836.Close()
    _, err837 := mbTrans836.WriteString(arg835)
    if err837 != nil { 
      Usage()
      return
    }
    factory838 := thrift.NewTJSONProtocolFactory()
    jsProt839 := factory838.GetProtocol(mbTrans836)
    containerStruct2 := talkservice.NewTalkServiceCancelGroupInvitationArgs()
    err840 := containerStruct2.ReadField3(context.Background(), jsProt839)
    if err840 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CancelGroupInvitation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createRoomV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoomV2 requires 2 args")
      flag.Usage()
    }
    tmp0, err841 := (strconv.Atoi(flag.Arg(1)))
    if err841 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg842 := flag.Arg(2)
    mbTrans843 := thrift.NewTMemoryBufferLen(len(arg842))
    defer mbTrans843.Close()
    _, err844 := mbTrans843.WriteString(arg842)
    if err844 != nil { 
      Usage()
      return
    }
    factory845 := thrift.NewTJSONProtocolFactory()
    jsProt846 := factory845.GetProtocol(mbTrans843)
    containerStruct1 := talkservice.NewTalkServiceCreateRoomV2Args()
    err847 := containerStruct1.ReadField2(context.Background(), jsProt846)
    if err847 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoomV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findContactByMetaTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindContactByMetaTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindContactByMetaTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
      flag.Usage()
    }
    arg850 := flag.Arg(1)
    mbTrans851 := thrift.NewTMemoryBufferLen(len(arg850))
    defer mbTrans851.Close()
    _, err852 := mbTrans851.WriteString(arg850)
    if err852 != nil {
      Usage()
      return
    }
    factory853 := thrift.NewTJSONProtocolFactory()
    jsProt854 := factory853.GetProtocol(mbTrans851)
    argvalue0 := talkservice.NewGetChatsRequest()
    err855 := argvalue0.Read(context.Background(), jsProt854)
    if err855 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetChats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupIdsJoined":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetGroupIdsJoined(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRoomsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomsV2 requires 1 args")
      flag.Usage()
    }
    arg856 := flag.Arg(1)
    mbTrans857 := thrift.NewTMemoryBufferLen(len(arg856))
    defer mbTrans857.Close()
    _, err858 := mbTrans857.WriteString(arg856)
    if err858 != nil { 
      Usage()
      return
    }
    factory859 := thrift.NewTJSONProtocolFactory()
    jsProt860 := factory859.GetProtocol(mbTrans857)
    containerStruct0 := talkservice.NewTalkServiceGetRoomsV2Args()
    err861 := containerStruct0.ReadField1(context.Background(), jsProt860)
    if err861 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RoomIds
    value0 := argvalue0
    fmt.Print(client.GetRoomsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reissueChatTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueChatTicket requires 1 args")
      flag.Usage()
    }
    arg862 := flag.Arg(1)
    mbTrans863 := thrift.NewTMemoryBufferLen(len(arg862))
    defer mbTrans863.Close()
    _, err864 := mbTrans863.WriteString(arg862)
    if err864 != nil {
      Usage()
      return
    }
    factory865 := thrift.NewTJSONProtocolFactory()
    jsProt866 := factory865.GetProtocol(mbTrans863)
    argvalue0 := talkservice.NewReissueChatTicketRequest()
    err867 := argvalue0.Read(context.Background(), jsProt866)
    if err867 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReissueChatTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err868 := (strconv.Atoi(flag.Arg(1)))
    if err868 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg869 := flag.Arg(2)
    mbTrans870 := thrift.NewTMemoryBufferLen(len(arg869))
    defer mbTrans870.Close()
    _, err871 := mbTrans870.WriteString(arg869)
    if err871 != nil {
      Usage()
      return
    }
    factory872 := thrift.NewTJSONProtocolFactory()
    jsProt873 := factory872.GetProtocol(mbTrans870)
    argvalue1 := talkservice.NewMessage()
    err874 := argvalue1.Read(context.Background(), jsProt873)
    if err874 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err875 := (strconv.Atoi(flag.Arg(1)))
    if err875 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acquireGroupCallRoute":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AcquireGroupCallRoute requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.MediaType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg879 := flag.Arg(4)
    mbTrans880 := thrift.NewTMemoryBufferLen(len(arg879))
    defer mbTrans880.Close()
    _, err881 := mbTrans880.WriteString(arg879)
    if err881 != nil { 
      Usage()
      return
    }
    factory882 := thrift.NewTJSONProtocolFactory()
    jsProt883 := factory882.GetProtocol(mbTrans880)
    containerStruct3 := talkservice.NewTalkServiceAcquireGroupCallRouteArgs()
    err884 := containerStruct3.ReadField4(context.Background(), jsProt883)
    if err884 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Capabilities
    value3 := argvalue3
    fmt.Print(client.AcquireGroupCallRoute(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "acceptChatInvitationByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitationByTicket requires 1 args")
      flag.Usage()
    }
    arg885 := flag.Arg(1)
    mbTrans886 := thrift.NewTMemoryBufferLen(len(arg885))
    defer mbTrans886.Close()
    _, err887 := mbTrans886.WriteString(arg885)
    if err887 != nil {
      Usage()
      return
    }
    factory888 := thrift.NewTJSONProtocolFactory()
    jsProt889 := factory888.GetProtocol(mbTrans886)
    argvalue0 := talkservice.NewAcceptChatInvitationByTicketRequest()
    err890 := argvalue0.Read(context.Background(), jsProt889)
    if err890 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitationByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err893 := (strconv.Atoi(flag.Arg(2)))
    if err893 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err894 := (strconv.Atoi(flag.Arg(3)))
    if err894 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerDeviceWithIdentityCredential":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithIdentityCredential requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Provider(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.RegisterDeviceWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "reissueGroupTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueGroupTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ReissueGroupTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateProfileAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttributes requires 2 args")
      flag.Usage()
    }
    tmp0, err900 := (strconv.Atoi(flag.Arg(1)))
    if err900 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg901 := flag.Arg(2)
    mbTrans902 := thrift.NewTMemoryBufferLen(len(arg901))
    defer mbTrans902.Close()
    _, err903 := mbTrans902.WriteString(arg901)
    if err903 != nil {
      Usage()
      return
    }
    factory904 := thrift.NewTJSONProtocolFactory()
    jsProt905 := factory904.GetProtocol(mbTrans902)
    argvalue1 := talkservice.NewUpdateProfileAttributesRequest()
    err906 := argvalue1.Read(context.Background(), jsProt905)
    if err906 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfileAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err907 := (strconv.Atoi(flag.Arg(1)))
    if err907 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Attr(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acceptChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
      flag.Usage()
    }
    arg911 := flag.Arg(1)
    mbTrans912 := thrift.NewTMemoryBufferLen(len(arg911))
    defer mbTrans912.Close()
    _, err913 := mbTrans912.WriteString(arg911)
    if err913 != nil {
      Usage()
      return
    }
    factory914 := thrift.NewTJSONProtocolFactory()
    jsProt915 := factory914.GetProtocol(mbTrans912)
    argvalue0 := talkservice.NewAcceptChatInvitationRequest()
    err916 := argvalue0.Read(context.Background(), jsProt915)
    if err916 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "decryptFollowEMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DecryptFollowEMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DecryptFollowEMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "inviteIntoChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
      flag.Usage()
    }
    arg919 := flag.Arg(1)
    mbTrans920 := thrift.NewTMemoryBufferLen(len(arg919))
    defer mbTrans920.Close()
    _, err921 := mbTrans920.WriteString(arg919)
    if err921 != nil {
      Usage()
      return
    }
    factory922 := thrift.NewTJSONProtocolFactory()
    jsProt923 := factory922.GetProtocol(mbTrans920)
    argvalue0 := talkservice.NewInviteIntoChatRequest()
    err924 := argvalue0.Read(context.Background(), jsProt923)
    if err924 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InviteIntoChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "wakeUpLongPolling":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WakeUpLongPolling requires 1 args")
      flag.Usage()
    }
    argvalue0, err925 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err925 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WakeUpLongPolling(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptGroupInvitationByTicket":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitationByTicket requires 3 args")
      flag.Usage()
    }
    tmp0, err926 := (strconv.Atoi(flag.Arg(1)))
    if err926 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AcceptGroupInvitationByTicket(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteOtherFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
      flag.Usage()
    }
    arg929 := flag.Arg(1)
    mbTrans930 := thrift.NewTMemoryBufferLen(len(arg929))
    defer mbTrans930.Close()
    _, err931 := mbTrans930.WriteString(arg929)
    if err931 != nil {
      Usage()
      return
    }
    factory932 := thrift.NewTJSONProtocolFactory()
    jsProt933 := factory932.GetProtocol(mbTrans930)
    argvalue0 := talkservice.NewDeleteOtherFromChatRequest()
    err934 := argvalue0.Read(context.Background(), jsProt933)
    if err934 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactsByPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
      flag.Usage()
    }
    arg935 := flag.Arg(1)
    mbTrans936 := thrift.NewTMemoryBufferLen(len(arg935))
    defer mbTrans936.Close()
    _, err937 := mbTrans936.WriteString(arg935)
    if err937 != nil { 
      Usage()
      return
    }
    factory938 := thrift.NewTJSONProtocolFactory()
    jsProt939 := factory938.GetProtocol(mbTrans936)
    containerStruct0 := talkservice.NewTalkServiceFindContactsByPhoneArgs()
    err940 := containerStruct0.ReadField1(context.Background(), jsProt939)
    if err940 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Phones
    value0 := argvalue0
    fmt.Print(client.FindContactsByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupsV2 requires 1 args")
      flag.Usage()
    }
    arg941 := flag.Arg(1)
    mbTrans942 := thrift.NewTMemoryBufferLen(len(arg941))
    defer mbTrans942.Close()
    _, err943 := mbTrans942.WriteString(arg941)
    if err943 != nil { 
      Usage()
      return
    }
    factory944 := thrift.NewTJSONProtocolFactory()
    jsProt945 := factory944.GetProtocol(mbTrans942)
    containerStruct0 := talkservice.NewTalkServiceGetGroupsV2Args()
    err946 := containerStruct0.ReadField1(context.Background(), jsProt945)
    if err946 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupId
    value0 := argvalue0
    fmt.Print(client.GetGroupsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroups":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroups requires 1 args")
      flag.Usage()
    }
    arg947 := flag.Arg(1)
    mbTrans948 := thrift.NewTMemoryBufferLen(len(arg947))
    defer mbTrans948.Close()
    _, err949 := mbTrans948.WriteString(arg947)
    if err949 != nil { 
      Usage()
      return
    }
    factory950 := thrift.NewTJSONProtocolFactory()
    jsProt951 := factory950.GetProtocol(mbTrans948)
    containerStruct0 := talkservice.NewTalkServiceGetGroupsArgs()
    err952 := containerStruct0.ReadField1(context.Background(), jsProt951)
    if err952 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupId
    value0 := argvalue0
    fmt.Print(client.GetGroups(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCompactGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupWithoutMembers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupWithoutMembers requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupWithoutMembers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err956 := (strconv.Atoi(flag.Arg(1)))
    if err956 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg958 := flag.Arg(3)
    mbTrans959 := thrift.NewTMemoryBufferLen(len(arg958))
    defer mbTrans959.Close()
    _, err960 := mbTrans959.WriteString(arg958)
    if err960 != nil { 
      Usage()
      return
    }
    factory961 := thrift.NewTJSONProtocolFactory()
    jsProt962 := factory961.GetProtocol(mbTrans959)
    containerStruct2 := talkservice.NewTalkServiceInviteIntoGroupArgs()
    err963 := containerStruct2.ReadField3(context.Background(), jsProt962)
    if err963 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "acceptGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err964 := (strconv.Atoi(flag.Arg(1)))
    if err964 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AcceptGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageReadRange":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageReadRange requires 2 args")
      flag.Usage()
    }
    arg966 := flag.Arg(1)
    mbTrans967 := thrift.NewTMemoryBufferLen(len(arg966))
    defer mbTrans967.Close()
    _, err968 := mbTrans967.WriteString(arg966)
    if err968 != nil { 
      Usage()
      return
    }
    factory969 := thrift.NewTJSONProtocolFactory()
    jsProt970 := factory969.GetProtocol(mbTrans967)
    containerStruct0 := talkservice.NewTalkServiceGetMessageReadRangeArgs()
    err971 := containerStruct0.ReadField1(context.Background(), jsProt970)
    if err971 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatIds
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageReadRange(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSelfFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
      flag.Usage()
    }
    arg972 := flag.Arg(1)
    mbTrans973 := thrift.NewTMemoryBufferLen(len(arg972))
    defer mbTrans973.Close()
    _, err974 := mbTrans973.WriteString(arg972)
    if err974 != nil {
      Usage()
      return
    }
    factory975 := thrift.NewTJSONProtocolFactory()
    jsProt976 := factory975.GetProtocol(mbTrans973)
    argvalue0 := talkservice.NewDeleteSelfFromChatRequest()
    err977 := argvalue0.Read(context.Background(), jsProt976)
    if err977 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes2 requires 1 args")
      flag.Usage()
    }
    arg978 := flag.Arg(1)
    mbTrans979 := thrift.NewTMemoryBufferLen(len(arg978))
    defer mbTrans979.Close()
    _, err980 := mbTrans979.WriteString(arg978)
    if err980 != nil { 
      Usage()
      return
    }
    factory981 := thrift.NewTJSONProtocolFactory()
    jsProt982 := factory981.GetProtocol(mbTrans979)
    containerStruct0 := talkservice.NewTalkServiceGetSettingsAttributes2Args()
    err983 := containerStruct0.ReadField1(context.Background(), jsProt982)
    if err983 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.AttributesToRetrieve
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err984 := (strconv.Atoi(flag.Arg(1)))
    if err984 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg986 := flag.Arg(3)
    mbTrans987 := thrift.NewTMemoryBufferLen(len(arg986))
    defer mbTrans987.Close()
    _, err988 := mbTrans987.WriteString(arg986)
    if err988 != nil { 
      Usage()
      return
    }
    factory989 := thrift.NewTJSONProtocolFactory()
    jsProt990 := factory989.GetProtocol(mbTrans987)
    containerStruct2 := talkservice.NewTalkServiceInviteIntoRoomArgs()
    err991 := containerStruct2.ReadField3(context.Background(), jsProt990)
    if err991 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "rejectChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
      flag.Usage()
    }
    arg992 := flag.Arg(1)
    mbTrans993 := thrift.NewTMemoryBufferLen(len(arg992))
    defer mbTrans993.Close()
    _, err994 := mbTrans993.WriteString(arg992)
    if err994 != nil {
      Usage()
      return
    }
    factory995 := thrift.NewTJSONProtocolFactory()
    jsProt996 := factory995.GetProtocol(mbTrans993)
    argvalue0 := talkservice.NewRejectChatInvitationRequest()
    err997 := argvalue0.Read(context.Background(), jsProt996)
    if err997 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RejectChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateChatRoomBGM":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateChatRoomBGM requires 3 args")
      flag.Usage()
    }
    tmp0, err998 := (strconv.Atoi(flag.Arg(1)))
    if err998 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateChatRoomBGM(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findGroupByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindGroupByTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindGroupByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecentFriendRequests":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecentFriendRequests requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRecentFriendRequests(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes requires 1 args")
      flag.Usage()
    }
    tmp0, err1002 := (strconv.Atoi(flag.Arg(1)))
    if err1002 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err1003 := (strconv.Atoi(flag.Arg(1)))
    if err1003 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RejectGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
      flag.Usage()
    }
    arg1005 := flag.Arg(1)
    mbTrans1006 := thrift.NewTMemoryBufferLen(len(arg1005))
    defer mbTrans1006.Close()
    _, err1007 := mbTrans1006.WriteString(arg1005)
    if err1007 != nil {
      Usage()
      return
    }
    factory1008 := thrift.NewTJSONProtocolFactory()
    jsProt1009 := factory1008.GetProtocol(mbTrans1006)
    argvalue0 := talkservice.NewUpdateChatRequest()
    err1010 := argvalue0.Read(context.Background(), jsProt1009)
    if err1010 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes2 requires 3 args")
      flag.Usage()
    }
    tmp0, err1011 := (strconv.Atoi(flag.Arg(1)))
    if err1011 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1012 := flag.Arg(2)
    mbTrans1013 := thrift.NewTMemoryBufferLen(len(arg1012))
    defer mbTrans1013.Close()
    _, err1014 := mbTrans1013.WriteString(arg1012)
    if err1014 != nil { 
      Usage()
      return
    }
    factory1015 := thrift.NewTJSONProtocolFactory()
    jsProt1016 := factory1015.GetProtocol(mbTrans1013)
    containerStruct1 := talkservice.NewTalkServiceUpdateSettingsAttributes2Args()
    err1017 := containerStruct1.ReadField2(context.Background(), jsProt1016)
    if err1017 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.AttributesToUpdate
    value1 := argvalue1
    arg1018 := flag.Arg(3)
    mbTrans1019 := thrift.NewTMemoryBufferLen(len(arg1018))
    defer mbTrans1019.Close()
    _, err1020 := mbTrans1019.WriteString(arg1018)
    if err1020 != nil {
      Usage()
      return
    }
    factory1021 := thrift.NewTJSONProtocolFactory()
    jsProt1022 := factory1021.GetProtocol(mbTrans1019)
    argvalue2 := talkservice.NewSettings()
    err1023 := argvalue2.Read(context.Background(), jsProt1022)
    if err1023 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getContactRegistration":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetContactRegistration requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.MIDType(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetContactRegistration(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "noop":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Noop requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Noop(context.Background()))
    fmt.Print("\n")
    break
  case "removeAllMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
      flag.Usage()
    }
    tmp0, err1025 := (strconv.Atoi(flag.Arg(1)))
    if err1025 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveAllMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err1027 := (strconv.Atoi(flag.Arg(1)))
    if err1027 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ContactFlag(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getGroupCall":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupCall requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupCall(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err1031 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1031 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1032 := (strconv.Atoi(flag.Arg(2)))
    if err1032 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err1033 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1033 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1034 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1034 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "fetchOperations":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
      flag.Usage()
    }
    argvalue0, err1035 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1035 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1036 := (strconv.Atoi(flag.Arg(2)))
    if err1036 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchOperations(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "kickoutFromGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KickoutFromGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err1037 := (strconv.Atoi(flag.Arg(1)))
    if err1037 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1039 := flag.Arg(3)
    mbTrans1040 := thrift.NewTMemoryBufferLen(len(arg1039))
    defer mbTrans1040.Close()
    _, err1041 := mbTrans1040.WriteString(arg1039)
    if err1041 != nil { 
      Usage()
      return
    }
    factory1042 := thrift.NewTJSONProtocolFactory()
    jsProt1043 := factory1042.GetProtocol(mbTrans1040)
    containerStruct2 := talkservice.NewTalkServiceKickoutFromGroupArgs()
    err1044 := containerStruct2.ReadField3(context.Background(), jsProt1043)
    if err1044 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.KickoutFromGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getExtendedProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetExtendedProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetExtendedProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.FeatureType(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChatRoomAnnouncement":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CreateChatRoomAnnouncement requires 4 args")
      flag.Usage()
    }
    tmp0, err1045 := (strconv.Atoi(flag.Arg(1)))
    if err1045 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ChatRoomAnnouncementType(tmp2)
    value2 := argvalue2
    arg1047 := flag.Arg(4)
    mbTrans1048 := thrift.NewTMemoryBufferLen(len(arg1047))
    defer mbTrans1048.Close()
    _, err1049 := mbTrans1048.WriteString(arg1047)
    if err1049 != nil {
      Usage()
      return
    }
    factory1050 := thrift.NewTJSONProtocolFactory()
    jsProt1051 := factory1050.GetProtocol(mbTrans1048)
    argvalue3 := talkservice.NewChatRoomAnnouncementContents()
    err1052 := argvalue3.Read(context.Background(), jsProt1051)
    if err1052 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.CreateChatRoomAnnouncement(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactByMetaTag":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactByMetaTag requires 3 args")
      flag.Usage()
    }
    tmp0, err1053 := (strconv.Atoi(flag.Arg(1)))
    if err1053 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactByMetaTag(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "follow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Follow requires 1 args")
      flag.Usage()
    }
    arg1056 := flag.Arg(1)
    mbTrans1057 := thrift.NewTMemoryBufferLen(len(arg1056))
    defer mbTrans1057.Close()
    _, err1058 := mbTrans1057.WriteString(arg1056)
    if err1058 != nil {
      Usage()
      return
    }
    factory1059 := thrift.NewTJSONProtocolFactory()
    jsProt1060 := factory1059.GetProtocol(mbTrans1057)
    argvalue0 := talkservice.NewFollowRequest()
    err1061 := argvalue0.Read(context.Background(), jsProt1060)
    if err1061 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Follow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "leaveGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err1063 := (strconv.Atoi(flag.Arg(1)))
    if err1063 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
      flag.Usage()
    }
    tmp0, err1065 := (strconv.Atoi(flag.Arg(1)))
    if err1065 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateIdentifier":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateIdentifier requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1070 := flag.Arg(2)
    mbTrans1071 := thrift.NewTMemoryBufferLen(len(arg1070))
    defer mbTrans1071.Close()
    _, err1072 := mbTrans1071.WriteString(arg1070)
    if err1072 != nil {
      Usage()
      return
    }
    factory1073 := thrift.NewTJSONProtocolFactory()
    jsProt1074 := factory1073.GetProtocol(mbTrans1071)
    argvalue1 := talkservice.NewIdentityCredentialRequest()
    err1075 := argvalue1.Read(context.Background(), jsProt1074)
    if err1075 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateIdentifier(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
